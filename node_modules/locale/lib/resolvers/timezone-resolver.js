/**
 *  PayPal Timezone resolver
 *  Determine the Timezone to use.
 *
 *  If user is logged-in and has timezone set, return that
 *  Else primary timezone from cow
 *
 */

var TimeZoneResolver,
    CAL_TZ_KEY = 'm_tz',
    CAL_TZ_RULE_KEY = 'rule_tz';

module.exports = TimeZoneResolver = function (cow, options, calEvent) {
    this.cow = cow;

    if (options.timeZoneResolvers) {
        this.priority = options.timeZoneResolvers;
    }

    this.calEvent = calEvent;
};

var proto = TimeZoneResolver.prototype;

TimeZoneResolver.prototype.resolve = function (req) {

    var timezone, resFactor;

    this.priority.some(function (determinerName) {
        var determiner = this.determiners[determinerName];

        timezone  = determiner.method.call(this, req);
        resFactor = determinerName;

        return timezone;

    }.bind(this));

    if (this.calEvent) {
        this.calEvent.addData(CAL_TZ_KEY, timezone);
        this.calEvent.addData(CAL_TZ_RULE_KEY, resFactor);
    }

    return {
        determiner: resFactor,
        value: timezone
    };
};


TimeZoneResolver.prototype.priority = [
    'viaUserProfile',
    'viaCowPrimary'
];



TimeZoneResolver.prototype.determiners = {

    viaUserProfile: {
        desc: 'Read from User Preference Object',

        method: function (req) {
            var timezone = null,
                tz,
                user = req.user,
                cowTZs;

            if (!user) {
                return;
            }

            tz = user.timeZone && user.timeZone.timeZoneCode || user.timeZone;

            if (tz) {
                cowTZs = this.cow.getTimeZones();
                if (cowTZs && cowTZs.indexOf(tz) !== -1) {
                    timezone = tz;
                }

            }
            return timezone;
        }
    },

    viaCowPrimary: {
        desc: 'Read from COW primary',

        method: function (req) {
            return this.cow.getPrimaryTimeZone();
        }
    }

};