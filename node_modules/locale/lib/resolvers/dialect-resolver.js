/**
 *  PayPal Dialect resolver
 *  A Dialect is represented by a language and a country code as en_US
 *
 *  locale.x    - specify the locale directly: case-insensitive. e.g 'en_US', 'fr_FR'
 *  LANG cookie
 *  User profile language preference
 *  Browser Language preference
 *  Default for the country
 *
 * Dialect must be valid COW dialect
 *
 */

var url = require('url'),
    util = require('util'),
    cookie = require('cookie'),
    deployEnv = require('environment-inc'),
    DialectResolver,
    CAL_DIALECT_KEY = 'm_locale',
    CAL_DIALECT_RULE_KEY = 'rule_locale';

var CONSTANTS = {
    locale_x_request_param : 'locale.x',
    locale_test_request_param : 'locale.test',
    cookieName : 'LANG',
    defaultLanguage : 'en_US'
};

function setCookie(response, dialect, country) {
    response.cookie(CONSTANTS.cookieName, dialect + ';' + country, {
            domain: '.paypal.com',
            path: '/',
            expires: new Date(Date.now() + 31556000),
            httpOnly: true
        });
}

module.exports = DialectResolver = function (cow, options, calEvent) {
    options = options || {};

    this.cow = cow;
    this.supportedLocales = options.supportedLocales;
    this.defaultLocale = options.fallback;
    this.disableCookie = options.disableCookie;

    if (options.dialectResolvers) {
        this.priority = options.dialectResolvers;
    }

    this.calEvent = calEvent;
};

module.exports.getDefaultLanguage = function getDefaultLanguage(cow) {
    var defaultLanguage = CONSTANTS.defaultLanguage;

    if (cow.getLanguages()) {
        defaultLanguage = cow.getLanguages()[0];
    }
    return defaultLanguage;
};


DialectResolver.prototype.resolve = function (req, res) {

    this.req = req;
    this.res = res;

    var dialect, resFactor;

    this.priority.some(function (determinerName) {
        var determiner = this.determiners[determinerName];

        if (!determiner) {
            return;
        }

        if (determiner.dev && deployEnv.isLive()) {
            return;
        }

        try {
            dialect = determiner.method.call(this, req, res);
        }
        catch (err) {
            return;
        }

        dialect = this.normalizeLocale(dialect);

        if (!dialect || !this.isSupportedLocale(dialect)) {
            return;
        }

        resFactor = determinerName;

        if (determiner.cookie && dialect && !this.disableCookie) {
            setCookie(res, dialect, this.cow.countryCode);
        }

        return dialect;

    }.bind(this));

    if (this.calEvent) {
        this.calEvent.addData(CAL_DIALECT_KEY, dialect);
        this.calEvent.addData(CAL_DIALECT_RULE_KEY, resFactor);
    }

    dialect = dialect || CONSTANTS.defaultLanguage;

    return {
        determiner: resFactor,
        value: dialect,
        language: dialect && dialect.split('_')[0] || 'en'
    };
};


DialectResolver.prototype.isSupportedLocale = function (locale) {

    if (this.supportedLocales) {
        return ~this.supportedLocales.indexOf(locale) || ~this.supportedLocales.indexOf(locale.replace('_', '-'));
    }

    if (this.cow.isValidLanguage(locale)) {
        return true;
    }

    return false;
};


DialectResolver.prototype.normalizeLocale = function (locale) {

    if (!locale || !locale.replace) {   //skip if not a string
        return;
    }

    locale = locale.replace('-', '_');

    var language, country;

    if (locale.length > 2) {
        language = locale.substr(0, 2);
        country = locale.substr(3).toUpperCase();
    } else {
        language = locale;
    }

    if (language && country) {
        locale = language + '_' + country;
    }

    if (this.isSupportedLocale(locale)) {
        return locale;
    }
    else if (this.isSupportedLocale(language + '_XC')) {
        return language + '_XC';
    }
    else if (this.isSupportedLocale(language + '_' + this.cow.countryCode)) {
        return language + '_' + this.cow.countryCode;
    }
    else if (this.isSupportedLocale(language + '_US')) {
        return language + '_US';
    }
    else if (this.cow.countryCode === country && this.cow.isValid2LetterLanguage(language) && this.isSupportedLocale(this.cow.getValidLangFrom2LetterLanguage(language))) {
        return this.cow.getValidLangFrom2LetterLanguage(language);
    }
};


DialectResolver.prototype.priority = [
    'viaLocaleTestUrlParam',
    'viaRosettaPost',
    'viaLocaleXUrlParam',
    'viaOriginalURLURLParam',
    'viaLangCookie',
    'viaSession',
    'viaUserProfile',
    'viaBrowserPref',
    'viaCountryDefault',
    'viaAppDefault',
    'viaDefault'
];


DialectResolver.prototype.determiners = {

    viaLocaleTestUrlParam: {
        desc: 'For non-LIVE test, read from locale.test url param, e.g. http://localhost.com:3000/?locale.test=fr',
        dev: true,

        method: function (req) {
            return req.query[CONSTANTS.locale_test_request_param] || (req.body && req.body[CONSTANTS.locale_test_request_param]);
        }
    },

    viaRosettaPost: {
        desc: 'Read rosetta language',

        method: function (req) {
            return;
        }
    },

    viaLocaleXUrlParam: {
        desc: 'Read from locale.x url param, e.g. http://localhost.com:3000/?locale.x=en_GB',
        cookie: true,

        method: function (req) {
            var localeX = req.query[CONSTANTS.locale_x_request_param] || (req.body && req.body[CONSTANTS.locale_x_request_param]);
            if (localeX && util.isArray(localeX)) {
                localeX = localeX[localeX.length - 1]; //returning the last locale in the array
            }
            return localeX;
        }
    },

    viaOriginalURLURLParam: {
        desc: 'Read from original.url url param, e.g. http://localhost.paypal.com:3000/?original.url=http%3A%2F%2Flocalhost.com%3A3000%2F%3Flocale.x%3Dde',

        method: function (req) {

            var localeX,
                originalURLParam = req.query[CONSTANTS.original_url];

            if (originalURLParam) {
                var originalUrl  = url.parse(decodeURIComponent(originalURLParam), true);
                localeX = originalUrl.query[CONSTANTS.locale_x_request_param];
                if (localeX && util.isArray(localeX)) {
                    localeX = localeX[localeX.length - 1];
                }
            }
        }
    },

    viaSession: {
        desc: 'Read from session',
        cookie: true,

        method: function (req) {
            return req.session && req.session.localeDialect;
        }
    },

    viaLangCookie: {
        desc: 'Read lang cookie',

        method: function (req) {

            if (!this.cow.isConsiderCookieLanguage()) {
                return;
            }

            var langCookie = cookie.parse(req.headers.cookie || '')[CONSTANTS.cookieName];

            if (langCookie) {
                langCookie = langCookie.toLowerCase().split(';');

                if (langCookie.length === 2) {
                    return langCookie[0];
                }
            }
        }
    },

    viaUserProfile: {
        desc: 'Read from user preference object',
        cookie: true,

        method: function (req) {

            if (!req.user) {
                return;
            }

            var user = req.user;

            var country = user.country && user.country.countryCode || user.country;
            var language = user.dialect && user.dialect.language && user.dialect.language.languageCode || user.dialect;

            if (country && language) {
                return language + '_' + country;
            }
        }
    },

    viaBrowserPref: {
        desc: 'Read from accept-language http header',
        cookie: true,

        method: function (req) {

            if (!this.cow.isConsiderBrowserLanguage()) {
                return;
            }

            var result;

            var acceptLang = req.headers['accept-language'] || '';

            acceptLang.split(',').some(function (option) {

                var locale = option.split(';')[0].trim();

                if (!locale) {
                    return;
                }

                locale = locale.split('-');

                var language = locale[0] && locale[0].toLowerCase();
                var country = locale[1] && locale[1].toUpperCase();

                if (!country) {
                    country = (this.normalizeLocale(language) || '').split('_')[1];
                }

                if (language && country && this.isSupportedLocale(language + '_' + country)) {
                    return result = language + '_' + country;
                }
            }.bind(this));

            return result;
        }
    },

    viaCountryDefault: {
        desc: 'Return the country default',
        cookie: true,

        method: function (req) {

            if (this.cow.getLanguages()) {
                return this.cow.getLanguages()[0];
            }
        }
    },

    viaAppDefault: {
        desc: 'Return the app default',
        cookie: true,

        method: function (req) {

            return this.defaultLocale;
        }
    },

    viaDefault: {
        desc: 'Return the default',
        cookie: true,

        method: function (req) {

            return CONSTANTS.defaultLanguage;
        }
    }
};

module.exports.CONSTANTS = CONSTANTS;