/**
 *  PayPal Country resolver
 *  Resolves the country based on several HTTP parameters
 *
 *  country.x    - specify the country directly: case-insensitive. e.g 'us', 'Fr', 'DE'
 *  country co brand -
 *  original.url - specify the original url (in case of redirection).
 *  LANG cookie
 *
 * Country must be valid COW country
 * TODO
 *    - Read session
 */

var url = require('url'),
    util = require('util'),
    cookie = require('cookie'),
    deployEnv = require('environment-inc'),
    countrySynonyms = require('../constants/country-synonyms'),
    CountryResolver,
    CAL_COUNTRY_RULE_KEY = 'rule_cntry',
    CAL_COUNTRY_KEY = 'm_cntry';

var CONSTANTS = {
    defaultCountry : 'US',
    country_x_request_param : 'country.x',
    country_test_request_param : 'country.test',
    original_url : 'original.url',
    cookieName : 'LANG',
    geolocationHeader : 'ak-client-info',
    coBrandHeader: 'x-pp-cobrand'
};

module.exports = CountryResolver = function (cowFactory, options, calEvent) {
    options = options || {};

    this.cowFactory = cowFactory;

    this.supportedCountries = options.supportedCountries;
    this.defaultCountry = options.fallbackCountry;
    this.geolocation = options.geolocation;

    if (options.countryResolvers) {
        this.priority = options.countryResolvers;
    }

    this.calEvent = calEvent;
};


CountryResolver.prototype.resolve = function (req, res) {

    this.req = req;
    this.res = res;

    var country, resFactor;

    this.priority.some(function (determinerName) {
        var determiner = this.determiners[determinerName];

        if (!determiner) {
            return;
        }

        if (determiner.dev && deployEnv.isLive()) {
            return;
        }

        try {
            country = determiner.method.call(this, req);
        }
        catch (err) {
            return;
        }

        resFactor = determinerName;

        if (country) {
            // In some conditions, country can become something other than
            // a simple string. If it is an array and all the values are
            // equal or synonyms, let it go as that must be the country.
            // There is a suspicion that there are ways to get a mix of
            // UK and GB so use synonyms to fix that.
            if (Array.isArray(country)) {
              var firstCountry = countrySynonyms[country[0]] || country[0];
              for (var i=1; i < country.length; i++) {
                var nextCountry = countrySynonyms[country[i]] || country[i];
                if (nextCountry !== firstCountry) {
                  return;
                }
              }
              country = firstCountry;
            }
            if (typeof country !== 'string') {
              return; // bail out as it is not a string
            }
            country = country.toUpperCase();
            country = countrySynonyms[country] || country;

            if (this.isSupportedCountry(country)) {
                return country;
            }
        }

    }.bind(this));

    if (req.session) {
        req.session.localeCountry = country;
    }

    if (this.calEvent) {
        this.calEvent.addData(CAL_COUNTRY_KEY, country);
        this.calEvent.addData(CAL_COUNTRY_RULE_KEY, resFactor);
    }

    return {
        determiner: resFactor,
        value: country,
        cow: this.cowFactory.getCow(country)
    };
};


CountryResolver.prototype.isSupportedCountry = function (country) {

    if (country) {
        country = country.toUpperCase();
    }

    if (this.supportedCountries) {
        return ~this.supportedCountries.indexOf(country);
    }

    if (this.cowFactory.isValidCountry(country)) {
        return true;
    }

    return false;
};


CountryResolver.prototype.priority = [
    'viaCountryTestUrlParam',
    'viaUserProfile',
    'viaCountryXUrlParam',
    'viaCountryCoBrand',
    'viaOriginalURLURLParam',
    'viaLangCookie',
    'viaSession',
    'viaBrowserPref',
    'viaGeolocation',
    'viaAppDefault',
    'viaDefault'
];

var viaCountryTestUrlParam = {
        desc: 'For non-LIVE test, read from country.test url param, e.g. http://localhost.com:3000/?country.test=fr',
        dev: true,

        method: function (req) {
            return req.query[CONSTANTS.country_test_request_param] || (req.body && req.body[CONSTANTS.country_test_request_param]);
        }
    };

CountryResolver.prototype.determiners = {

    viaCountryTestUrlParam: viaCountryTestUrlParam,
    viaCountryTextUrlParam: viaCountryTestUrlParam,    //For backward compatibility

    viaUserProfile: {
        desc: 'Read from User Preference Object',

        method: function (req) {
            var user = req.user;

            if (!user) {
                return;
            }
            return user.country && user.country.countryCode || user.country;
        }
    },

    viaCountryXUrlParam: {
        desc: 'Read from country.x url param, e.g. http://localhost.com:3000/?country.x=fr',

        method: function (req) {
            var countryX = req.query[CONSTANTS.country_x_request_param] || (req.body && req.body[CONSTANTS.country_x_request_param]);

            if (countryX && util.isArray(countryX)) {
                countryX = countryX[countryX.length - 1];
            }
            if (countryX && this.isSupportedCountry(countryX)) {
                return countryX;
            }
        }
    },

    viaCountryCoBrand: {
        desc: 'Read from URL country brand, e.g. https://www.paypal.com/ca/foo',

        method: function (req) {

            var country;

            // first, check if x-pp-cobrand is set in request header
            if (req.headers && req.headers[CONSTANTS.coBrandHeader]) {
                country = req.headers[CONSTANTS.coBrandHeader];
            } else {
                // otherwise, use first segment from URL
                country = req.url.split('/').filter(Boolean)[0];
            }

            if (country && this.isSupportedCountry(country)) {
                return country;
            }
        }
    },

    viaOriginalURLURLParam: {
        desc: 'Read from original.url url param, e.g. http://localhost.paypal.com:3000/?original.url=http%3A%2F%2Flocalhost.com%3A3000%2F%3Fcountry.x%3Dde',

        method: function (req) {

            var country,
                originalURLParam = req.query[CONSTANTS.original_url];

            if (originalURLParam) {
                var originalUrl  = url.parse(decodeURIComponent(originalURLParam), true);
                country = originalUrl.query[CONSTANTS.country_x_request_param];
                if (country && util.isArray(country)) {
                    country = country[country.length - 1];
                }
                if (country && this.isSupportedCountry(country)) {
                    return country;
                }
            }
        }
    },

    viaSession: {
        desc: 'Read from session',

        method: function (req) {
            return req.session && req.session.localeCountry;
        }
    },

    viaLangCookie: {
        desc: 'Read from LANG cookie',

        method: function (req) {

            var country,
                langCookie = cookie.parse(req.headers.cookie || '')[CONSTANTS.cookieName];

            if (langCookie) {
                langCookie = langCookie.toLowerCase().split(';');

                if (langCookie.length === 2) {
                    country = langCookie[1];

                    if (country && this.isSupportedCountry(country)) {
                        return country;
                    }
                }
            }
        }
    },

    viaBrowserPref: {
        desc: 'Read from accept-language http header',

        method: function (req) {

            var result;

            var acceptLang = req.headers['accept-language'] || '';

            acceptLang.split(',').some(function (option) {

                var locale = option.split(';')[0].trim();

                if (!locale) {
                    return;
                }

                locale = locale.split('-');

                var country = locale[1] && locale[1].toUpperCase();

                if (country && this.isSupportedCountry(country)) {
                    return result = country;
                }

            }.bind(this));

            return result;
        }
    },

    viaGeolocation: {
        desc: 'Read geolocation header, currently being added by Akamai',

        method: function (req) {
            var country;

            if (this.geolocation && req.headers[CONSTANTS.geolocationHeader]) {
                country = (req.headers[CONSTANTS.geolocationHeader].split(','))[0];

                if (country && this.isSupportedCountry(country)) {
                    return country;
                }

            }
        }
    },

    viaAppDefault: {
        desc: 'Use app default country',

        method: function (req) {
            return this.defaultCountry;
        }
    },

    viaDefault: {
        desc: 'Use default country',

        method: function (req) {
            return CONSTANTS.defaultCountry;
        }
    }
};

module.exports.CONSTANTS = CONSTANTS;