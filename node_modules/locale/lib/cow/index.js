'use strict';

/**
 * CowFactory
 */
var cdb = require('cdb'),
    fs = require('fs'),
    async = require('async'),
    Cow = require('./cow'),
    path = require('path'),
    countrySynonyms = require('../constants/country-synonyms'),
    wowo = require('wowo'),
    countriesMap = {},
    cowStore = {},
    cowWowoMap = {},
    useWowoMap = true,
    lazyLoad = true,
    cowBasePath,
    countryLoaded = [],
    cal,
    CAL_TRANSCATION_TYPE = 'COW_CDB_READ';

/**
 * Test if a string is numeric or not
 */
function isNumeric(s) {
    return !/[^0-9]/.test(s);
}

function toInt(s) {
    // If the string starts with '0x' or '-0x', parse as hex.
    var regex = /^\s*-?0x/i;
    return regex.test(s) ? parseInt(s, 16) : parseInt(s, 10);
}

module.exports = function CowFactory(config, parentCal) {
    var i,
        locale,
        isCowPackageFound = false,
        stageName = process.env.STAGE,
        depRootPath = process.env.DEPENDENCY_ROOT;

    config = config || {};
    cal = parentCal;

    if (depRootPath) {
        cowBasePath = path.join(depRootPath, '/locale/cow/');
        if (fs.existsSync(cowBasePath)) {
            isCowPackageFound = true;
        }
    }
    if (!isCowPackageFound && stageName) {
        cowBasePath = path.join('/x/web/', stageName, '/locale/cow/');
        if (fs.existsSync(cowBasePath)) {
            isCowPackageFound = true;
        }
    }
    if (!isCowPackageFound) {
        cowBasePath = path.join(__dirname, '/../../node_modules/locale-dev-cdbs/cdbs/locale/cow/');
        if (!fs.existsSync(cowBasePath)) {
            throw new Error('Not able to locate cow cdbs');
        }
    }

    lazyLoad = (typeof config.lazyLoad === 'boolean') ? config.lazyLoad : true;

    if (typeof config.locales === 'object') {
        for (i = 0; i < config.locales.length; i++) {
            locale = config.locales[i];
            countryLoaded.push(locale);
        }
    }

    async.series([
        function (callback) {
            readCountriesList(callback);
        },
        function (callback) {
            readWowoMap(callback);
        },
        function (callback) {
            var countryId;
            readCountryCow('default');
            if (lazyLoad) {
                if (countryLoaded.length > 0) {
                    for (i = 0; i < countryLoaded.length; i++) {
                        countryId = countryLoaded[i];
                        if (countriesMap[countryId]) {
                            readCountryCow(countryId);
                        } else {
                            console.error('invalid countryId : ' + countryId);
                        }
                    }
                }
            } else {
                //read all countries
                for (countryId in countriesMap) {
                    readCountryCow(countryId);
                }
            }
            callback();
        }
    ]);

    return {
        isValidCountry : isValidCountry,
        readCountries : readCountries,  //Async
        readCow : readCow,              //Async
        getCountries : getCountries,    //Sync
        getCow : getCow                 //Sync
    };
};

function isValidCountry(countryId) {
    countryId = countrySynonyms[countryId] || countryId;
    return !!countriesMap[countryId];
}

function readCountries(callback) {
    return callback(null, countriesMap);
}

function getCountries() {
    return countriesMap;
}

function readCow(countryId, callback) {
    var cow;
    countryId = countrySynonyms[countryId] || countryId || 'US';
    cow = cowStore[countryId];

    if (!cow) {
        cow = readCountryCow(countryId);
    }
    return callback(null, cow);
}

function getCow(countryId) {
    var cow;
    countryId = countrySynonyms[countryId] || countryId || 'US';

    cow = cowStore[countryId];
    if (!cow) {
        cow = readCountryCow(countryId);
    }
    return cow;
}

function getCowValue(countryId, cowObject, key) {
    var cowWowoOffKey, cowWowoOffValue, wowoKey;

    if (useWowoMap) {
        cowWowoOffKey = key + '_off';
        cowWowoOffValue = cowObject[cowWowoOffKey];
        if (cowWowoOffValue) {
            wowoKey = cowWowoMap['wowo_map_' + countryId + '_' + key];
            if (wowoKey && !wowo.getWowo().isWowoOn(wowoKey)) {
                return cowWowoOffValue;
            }
        }
    }
    return cowObject[key];
}

function readCountriesList(callback) {
    var calEvent;

    if (Object.keys(countriesMap).length > 0) {
        //Don't read CountryList.cdb twice
        return;
    }

    if (cal) {
        calEvent = cal.createEvent(CAL_TRANSCATION_TYPE, 'locale_country_list');
        calEvent.status = cal.Status.SUCCESS;
    }

    var startTime = Date.now(),
        endTime,
        cowObject = cdb.readSync(cowBasePath + 'CountryList.cdb');

    var key,
        value,
        countryId,
        countryName;

    for (key in cowObject) {
        if (key.indexOf('cow_property_enable_signup_list_') !== -1 ||
            key.indexOf('cow_property_disable_signup_list_') !== -1) {
            value = cowObject[key];
            if (value.length === 1) {
                countryId = value[0];
                if (countryId !== 'COW_ARRAY_END') {
                    value = cowObject['cow_property_country_name_' + countryId];
                    if (value) {
                        countryName = Cow.formatString(value.join());
                        countriesMap[countryId] = countryName;
                    } else {
                        countriesMap[countryId] = '-';
                    }
                }
            }
        }
    }
    endTime = Date.now();

    if (calEvent) {
        calEvent.addData('time', (endTime - startTime) + 'ms');
        calEvent.addData('totalCountriesLoaded', Object.keys(countriesMap).length);
        calEvent.complete();
    }

    callback && callback();
}

function readWowoMap(callback) {
    var wowoMap, key, value;

    try {
        wowo.getWowo();
    } catch (err) {
        useWowoMap = false;
    }

    if (useWowoMap) {
        wowoMap = cdb.readSync(path.join(cowBasePath, 'wowo_map.cdb'));

        for (key in wowoMap) {
            value = wowoMap[key];
            if (Array.isArray(value)) {
                value = value[0];
            }
            cowWowoMap[key] = value;
        }
    }

    if(callback) {
        callback();
    }
}

function readCountryCow(countryId) {
    var calEvent;

    countryId = countrySynonyms[countryId] || countryId;

    if (cal) {
        calEvent = cal.createEvent(CAL_TRANSCATION_TYPE, 'locale_country_' + countryId);
        calEvent.status = cal.Status.SUCCESS;
    }

    var startTime = Date.now(),
        endTime;

    var cowObject = cdb.readSync(cowBasePath + countryId + '.cdb'),
        key,
        token1,
        token2,
        val,
        index,
        countryCow = cowStore[countryId] = new Cow(countryId),
        countryStore = {};

    for (key in cowObject) {
        index = null;
        token1 = null;
        token2 = null;
        if (key.lastIndexOf('_') !== -1) {
            token1 = key.substr(0, key.lastIndexOf('_'));
            token2 = key.substr(key.lastIndexOf('_') + 1);
            if (useWowoMap && token2 === 'off') {
                continue;
            }
            if (isNumeric(token2)) {
                index = toInt(token2);
            }
        }
        if (index !== null) {
            if (!countryStore[token1]) {
                countryStore[token1] = [];
            }
            countryStore[token1][index] = getCowValue(countryId, cowObject, key).join();
        } else {
            countryStore[key] = getCowValue(countryId, cowObject, key);
        }
    }
    for (key in countryStore) {
        val = countryStore[key];
        token1 = null;

        var endIndex = val.indexOf('COW_ARRAY_END');
        if (endIndex !== -1) {
            val = val.slice(0, endIndex);
        }

        val = val.filter(function (val, index, arr) {
                token1 = index;
                return true;
            });

        if (val.length === 1 && token1 !== 0) {
            countryStore[key] = null;
            countryCow.set(key + '_' + token1, val);
        } else {
            countryCow.set(key, val);
        }
    }
    if (countryId !== 'default') {
        //carrying over the default cow properties to country
        var defaultCow = cowStore['default'];
        if (defaultCow) {
            var defaultCowMap = defaultCow.getMap();
            for (key in defaultCowMap) {
                if (countryCow.get(key) === undefined)  {
                    countryCow.set(key, defaultCowMap[key]);
                }
            }
        }
    }

    endTime = Date.now();

    if (calEvent) {
        calEvent.addData('time', (endTime - startTime) + 'ms');
        calEvent.complete();
    }

    return countryCow;
}