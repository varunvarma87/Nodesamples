
'use strict';

/**
 * COW country object
 * use Cow.formatString to format cow string to normal String
 */

var Cow,
    formatString;

module.exports = Cow = function Cow(countryCode) {
    this.countryCode = countryCode;
    this.map = {};
    this.stateMap = {};
};

module.exports.formatString = formatString = function formatString(str) {
    return str.replace('COW_string_', '').replace(/_/g, ' ');
};

Cow.prototype = {

    set : function (key, value) {
        this.map[key] = value;
    },
    get : function (key) {
        return this.map[key];
    },
    getMap : function () {
        return this.map;
    },
    getCountryCode : function () {
        return this.countryCode;
    },
    getStateCodes : function () {
        return this.map.cow_property_state_codes;
    },
    getStateMap : function () {
        var stateCodes,
            stateNames,
            i;

        if (Object.keys(this.stateMap).length === 0) {

            stateCodes = this.map.cow_property_state_codes;
            stateNames = this.map.cow_property_state_names;

            if (stateCodes && stateNames) {
                if (stateCodes.length !== stateNames.length) {
                    throw 'state codes or names size mismatch error, please fix the cow files';
                }

                for (i = 0; i < stateCodes.length; i++) {
                    this.stateMap[stateCodes[i]] = formatString(stateNames[i]);
                }
            }
        }

        return this.stateMap;
    },
    getCountryNumeric : function () {
        var countryNumeric = this.map.cow_property_country_numeric;
        if (Array.isArray(countryNumeric)) {
            countryNumeric = countryNumeric.join();
        }
        return countryNumeric;
    },
    getCurrencyCode : function () {
        var currencyCode = this.map.cow_property_currency_code;
        if (Array.isArray(currencyCode)) {
            currencyCode = currencyCode.join();
        }
        return currencyCode;
    },
    getTelephoneCountryCode : function () {
        var telephoneCountryCode = this.map.cow_property_telephone_country_code;
        if (Array.isArray(telephoneCountryCode)) {
            telephoneCountryCode  = telephoneCountryCode.join();
        }
        return telephoneCountryCode;
    },
    getTelephoneIntlAccessCode : function () {
        var telephoneIntlAccessCode = this.map.cow_property_telephone_intl_access_code;
        if (Array.isArray(telephoneIntlAccessCode)) {
            telephoneIntlAccessCode = telephoneIntlAccessCode.join();
        }
        return telephoneIntlAccessCode;
    },
    getPrimaryTimeZone : function () {
        var primaryTimeZone = this.map.cow_property_time_zone_primary;
        if (Array.isArray(primaryTimeZone)) {
            primaryTimeZone = primaryTimeZone.join();
        }
        return primaryTimeZone;
    },
    getTimeZones : function () {
        return this.map.cow_property_time_zone_support;
    },
    getLanguages : function () {
        return this.map.cow_property_language_support;
    },
    isValidLanguage : function (language) {
        var isValidLanguage = false,
            pieces,
            langs = this.getLanguages();

        if (language) { //sanitizing
            pieces = language.split('_');
            if (pieces.length === 2) {
                language = pieces[0].toLowerCase() + '_' + pieces[1].toUpperCase();
            } else {
                language = null;
            }
        }

        if (langs && language) {
            if (langs.indexOf(language) !== -1) {
                isValidLanguage = true;
            }
        }
        return isValidLanguage;
    },
    isValid2LetterLanguage : function (language) {
        var isValidLanguage = false,
            langs = this.getLanguages();

        if (langs && language) {
            if (langs.join(' ').indexOf(language + '_') !== -1) {
                isValidLanguage = true;
            }
        }
        return isValidLanguage;
    },
    getValidLangFrom2LetterLanguage : function (language) {
        var validLanguage = language,
            langs = this.getLanguages(),
            langsStr,
            index;

        if (langs && language) {
            langsStr = langs.join(' ');
            index = langsStr.indexOf(language + '_');
            if (index !== -1 && langsStr && langsStr.length >= index + 5) {
                validLanguage = langsStr.substr(index, 5);
            }
        }
        return validLanguage;
    },
    getLegalEntity : function () {
        var legalEntity = this.map.cow_property_legal_entity;
        if (Array.isArray(legalEntity)) {
            legalEntity = legalEntity.join();
        }
        return legalEntity;
    },
    isClock12HrFormat : function () {
        var isClock12HrFormat = this.map.cow_property_content_format_template_12_hour_clock;
        if (Array.isArray(isClock12HrFormat)) {
            isClock12HrFormat = isClock12HrFormat.join();
        }
        return (isClock12HrFormat === 'true');
    },
    isInEU : function () {
        var isInEU = this.map.cow_property_is_in_european_union;
        if (Array.isArray(isInEU)) {
            isInEU = isInEU.join();
        }
        return (isInEU === 'true');
    },
    isInEuroZone : function () {
        var isInEuroZone = this.map.cow_property_is_in_eurozone;
        if (Array.isArray(isInEuroZone)) {
            isInEuroZone = isInEuroZone.join();
        }
        return (isInEuroZone === 'true');
    },
    isInNanp : function () {
        var isInNanp = this.map.cow_property_is_in_nanp;
        if (Array.isArray(isInNanp)) {
            isInNanp = isInNanp.join();
        }
        return (isInNanp === 'true');
    },
    isSaytEnabled : function () {
        var isSaytEnabled = this.map.cow_property_sayt_enabled;
        if (Array.isArray(isSaytEnabled)) {
            isSaytEnabled = isSaytEnabled.join();
        }
        return (isSaytEnabled === 'true');
    },
    isSiteWideSearchEnabled : function () {
        var isSiteWideSearchEnabled = this.map.cow_property_sitewide_search_enabled;
        if (Array.isArray(isSiteWideSearchEnabled)) {
            isSiteWideSearchEnabled = isSiteWideSearchEnabled.join();
        }
        return (isSiteWideSearchEnabled === 'true');
    },
    isBaynoteSeachEnabled : function () {
        var isBaynoteSeachEnabled = this.map.cow_property_baynote_search_enabled_country;
        if (Array.isArray(isBaynoteSeachEnabled)) {
            isBaynoteSeachEnabled = isBaynoteSeachEnabled.join();
        }
        return (isBaynoteSeachEnabled === 'true');

    },
    isSignupEnabled : function () {
        var isSignupEnabled = this.map.cow_property_enable_signup;
        if (Array.isArray(isSignupEnabled)) {
            isSignupEnabled = isSignupEnabled.join();
        }
        return (isSignupEnabled === 'true');
    },
    getCountryCoBrand : function () {
        var countryCoBrand = this.map.cow_property_country_cobrand;
        if (Array.isArray(countryCoBrand)) {
            countryCoBrand = countryCoBrand.join();
        }
        return countryCoBrand;
    },
    isConsiderCookieLanguage : function () {
        var isConsiderCookieLanguage = this.map.cow_property_consider_cookie_language;
        if (Array.isArray(isConsiderCookieLanguage)) {
            isConsiderCookieLanguage = isConsiderCookieLanguage.join();
        } else {
            isConsiderCookieLanguage = 'true';
        }
        return (isConsiderCookieLanguage === 'true');
    },
    isConsiderBrowserLanguage : function () {
        var isConsiderBrowserLanguage = this.map.cow_property_consider_browser_language;
        if (Array.isArray(isConsiderBrowserLanguage)) {
            isConsiderBrowserLanguage = isConsiderBrowserLanguage.join();
        } else {
            isConsiderBrowserLanguage = 'true';
        }
        return (isConsiderBrowserLanguage === 'true');
    },
    getSignupCategory : function () {
        var signupCategory = this.map.cow_property_signup_category_information;
        if (Array.isArray(signupCategory)) {
            signupCategory = signupCategory.join();
        }
        return signupCategory;
    }
};