'use strict';

var assert = require('assert'),
    tryRequire = require('try-require'),
    cal = tryRequire('cal'),
    Locale = require('../index'),
    testUtils = require('./fixtures/utils'),
    locale;

if (cal) {
    cal.setDefaultWriteStream('console');
    cal.defaults.formatter = cal.formatter.silent;
}

describe('Locale', function () {

    beforeEach(function (next) {
        locale = Locale({locales: ['US']});
        next();
    });

    it('Defaut request: US locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'US');
            assert.ok(locality.locale === 'en_US');
            assert.ok(locality.culture === 'en-US');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'US');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/US/en');
            assert.ok(locality.getCountrySpecifics().isConsiderBrowserLanguage() === true);
            next();
        });
    });

    it('Defaut request: UK locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = { 'country.x' : 'UK'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'GB');
            assert.ok(locality.locale === 'en_GB');
            assert.ok(locality.culture === 'en-GB');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'GB');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/GB/en');
            assert.ok(locality.getCountrySpecifics().isConsiderBrowserLanguage() === false);
            next();
        });
    });


    it('Country.x as FR request: FR locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = { 'country.x' : 'fr'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'FR');
            assert.ok(locality.locale === 'fr_FR');
            assert.ok(locality.culture === 'fr-FR');
            assert.ok(locality.language === 'fr');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'FR');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/FR/fr');
            next();
        });
    });

    it('Request: es_XC locality for MX from user object with cookie', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.headers = {
            cookie : 'LANG=es_XC%3BMX;'
        };
        req.user = {
            country : {
                countryCode : 'MX'
            },
            dialect : {
                language : {
                    languageCode : 'es'
                }
            },
            timeZone : {
                timeZoneCode : 'America/Mexico_City'
            }
        };

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'MX');
            assert.ok(locality.locale === 'es_XC');
            assert.ok(locality.culture === 'es-MX');
            assert.ok(locality.language === 'es');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'MX');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/MX/es');
            next();
        });
    });

    it('Request: no_NO locality for No from user object with cookie', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.headers = {
            cookie : 'LANG=en_US%3BUS;'
        };
        req.user = {
            country : {
                countryCode : 'NO'
            },
            dialect : {
                language : {
                    languageCode : 'no'
                }
            },
            timeZone : {
                timeZoneCode : 'Europe/Oslo'
            }
        };


        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'NO');
            assert.ok(locality.locale === 'no_NO');
            assert.ok(locality.culture === 'no-NO');
            assert.ok(locality.language === 'no');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'NO');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/NO/no');
            next();
        });
    });

    it('Request: es_XC locality for MX', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'MX', 'locale.x' : 'es_XC'};


        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'MX');
            assert.ok(locality.locale === 'es_XC');
            assert.ok(locality.culture === 'es-MX');
            assert.ok(locality.language === 'es');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'MX');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/MX/es');
            next();
        });
    });

    it('Request: en_HK locality for HK (supporting en_HK as en_GB is valid)', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'HK', 'locale.x' : 'en_HK'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'HK');
            assert.ok(locality.locale === 'en_GB');
            assert.ok(locality.culture === 'en-HK');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'HK');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/HK/en');
            next();
        });
    });

    it('Request: fr_HK locality for HK (not-supporting fr_HK as no valid fr dialect)', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'HK', 'locale.x' : 'fr_HK'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'HK');
            assert.ok(locality.locale === 'en_GB');
            assert.ok(locality.culture === 'en-HK');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'HK');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/HK/en');
            next();
        });
    });

    it('Request: en_US locality for DE', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'DE', 'locale.x' : 'en_US'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'DE');
            assert.ok(locality.locale === 'en_US');
            assert.ok(locality.culture === 'en-DE');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'DE');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/DE/en');
            assert.ok(locality.getCountrySpecifics().isConsiderBrowserLanguage() === false);
            next();
        });
    });

    it('Request: de_DE locality for CH', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'CH', 'locale.x' : 'de_DE'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'CH');
            assert.ok(locality.locale === 'de_DE');
            assert.ok(locality.culture === 'de-CH');
            assert.ok(locality.language === 'de');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'CH');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/CH/de');
            next();
        });
    });

    it('Request: fr_FR locality for CH', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'CH', 'locale.x' : 'fr_FR'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'CH');
            assert.ok(locality.locale === 'fr_FR');
            assert.ok(locality.culture === 'fr-CH');
            assert.ok(locality.language === 'fr');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'CH');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/CH/fr');
            next();
        });
    });

    it('Request: not supported right now it_XC locality for CH', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'CH', 'locale.x' : 'it_XC'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'CH');
            assert.ok(locality.locale === 'de_DE');
            assert.ok(locality.culture === 'de-CH');
            assert.ok(locality.language === 'de');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'CH');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/CH/de');
            next();
        });
    });


    it('Request: default de_DE locality for AT', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'AT'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'AT');
            assert.ok(locality.locale === 'de_DE');
            assert.ok(locality.culture === 'de-AT');
            assert.ok(locality.language === 'de');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'AT');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/AT/de');
            assert.ok(locality.getCountrySpecifics().isConsiderBrowserLanguage() === false);
            next();
        });
    });

    it('Defaut request: Unsupported locality, use fallback language', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'ZK'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'US');
            assert.ok(locality.locale === 'en_US');
            assert.ok(locality.culture === 'en-US');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'US');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/US/en');
            assert.ok(locality.getCountrySpecifics().isConsiderBrowserLanguage() === true);
            next();
        });
    });

    it('Defaut request: Unsupported locality based on configs, use fallback language', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'DE'};

        var options = {'supportedLocales': ['en-US'], 'fallback': 'en-US'},
            localeConfig = Locale(options);


        localeConfig(req, res, function (options) {
            var locality = req.locality;
            assert.ok(locality.country === 'DE');
            assert.ok(locality.locale === 'en_US');
            assert.ok(locality.culture === 'en-DE');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'DE');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/DE/en');
            assert.ok(locality.getCountrySpecifics().isConsiderBrowserLanguage() === false);
            next();
        });
    });

    it('Defaut request: Unsupported country based on configs, use fallback country', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'DE'};

        var options = {'supportedCountries': ['US'], 'fallbackCountry': 'US'},
            localeConfig = Locale(options);

        localeConfig(req, res, function (options) {
            var locality = req.locality;
            assert.ok(locality.country === 'US');
            assert.ok(locality.locale === 'en_US');
            assert.ok(locality.culture === 'en-US');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'US');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/US/en');
            next();
        });
    });


    it('Country.x as FR post request: FR locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.body = {'country.x' : 'fr'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'FR');
            assert.ok(locality.locale === 'fr_FR');
            assert.ok(locality.culture === 'fr-FR');
            assert.ok(locality.language === 'fr');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'FR');
            assert.ok(locality.getCountrySpecifics().isConsiderBrowserLanguage() === false);
            next();
        });
    });

    it('cobrand as IN request: IN locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.url = '/in/locale/';

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'IN');
            assert.ok(locality.locale === 'en_GB');
            assert.ok(locality.culture === 'en-IN');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'IN');
            next();
        });
    });

    it('cobrand as UK request: UK locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.url = '/uk/locale/';

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'GB');
            assert.ok(locality.locale === 'en_GB');
            assert.ok(locality.culture === 'en-GB');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'GB');
            next();
        });
    });

    it('cobrand as GB request: GB locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.url = '/gb/locale/';

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'GB');
            assert.ok(locality.locale === 'en_GB');
            assert.ok(locality.culture === 'en-GB');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'GB');
            next();
        });
    });

    it('userPref as de_DE request: DE locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.headers = { 'accept-language' : 'de'};
        req.user = {
            country : {
                countryCode : 'DE'
            },
            dialect : {
                language : {
                    languageCode : 'de'
                }
            },
            timeZone : {
                timeZoneCode : 'Europe/Berlin'
            }
        };

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'DE');
            assert.ok(locality.locale === 'de_DE');
            assert.ok(locality.culture === 'de-DE');
            assert.ok(locality.language === 'de');
            assert.ok(locality.timezone === 'Europe/Berlin');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'DE');
            assert.ok(locality.getCountrySpecifics().isConsiderBrowserLanguage() === false);
            next();
        });
    });

    it('Non-LIVE country.test override as de_DE request: DE locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'locale.test' : 'de_DE', 'country.test' : 'DE'};
        req.headers = { 'accept-language' : 'en'};
        req.user = {
            country : {
                countryCode : 'US'
            },
            dialect : {
                language : {
                    languageCode : 'en'
                }
            },
            timeZone : {
                timeZoneCode : 'America/Los_Angeles'
            }
        };
        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'DE');
            assert.ok(locality.locale === 'de_DE');
            assert.ok(locality.culture === 'de-DE');
            assert.ok(locality.language === 'de');
            assert.ok(locality.timezone === 'America/Los_Angeles'); //No change in timezone
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'DE');
            assert.ok(locality.getCountrySpecifics().isConsiderBrowserLanguage() === false);
            next();
        });
    });

    it('LIVE country.test should not override as de_DE request: US locality', function (next) {
        process.env.DEPLOY_ENV = 'LIVE';

        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'locale.test' : 'de_DE', 'country.test' : 'DE'};
        req.headers = { 'accept-language' : 'en'};
        req.user = {
            country : {
                countryCode : 'US'
            },
            dialect : {
                language : {
                    languageCode : 'en'
                }
            },
            timeZone : {
                timeZoneCode : 'America/Los_Angeles'
            }
        };

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'US');
            assert.ok(locality.locale === 'en_US');
            assert.ok(locality.culture === 'en-US');
            assert.ok(locality.language === 'en');
            assert.ok(locality.timezone === 'America/Los_Angeles');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'US');

            process.env.DEPLOY_ENV = '';
            next();
        });
    });

    it('lang cookie as as en_XC;CA request: CA locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'ca'};
        req.headers = {
            cookie : 'LANG=en_XC%3BCA;'
        };

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'CA');
            assert.ok(locality.locale === 'en_US');
            assert.ok(locality.culture === 'en-CA');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'CA');
            next();
        });
    });

    it('lang cookie as as fr_BE;BE request: BE locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'be'};
        req.headers = {
            cookie : 'LANG=fr_BE%3BBE;'
        };

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'BE');
            assert.ok(locality.locale === 'fr_FR');
            assert.ok(locality.culture === 'fr-BE');
            assert.ok(locality.language === 'fr');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'BE');
            next();
        });
    });

    it('lang cookie as as fr_FR;BE request: BE locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'be'};
        req.headers = {
            cookie : 'LANG=fr_FR%3BBE;'
        };

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'BE');
            assert.ok(locality.locale === 'fr_FR');
            assert.ok(locality.culture === 'fr-BE');
            assert.ok(locality.language === 'fr');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'BE');
            next();
        });
    });

    it('lang cookie as as es_XC;US request: US locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'us'};
        req.headers = {
            cookie : 'LANG=es%3BUS;'
        };

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'US');
            assert.ok(locality.locale === 'es_XC');
            assert.ok(locality.culture === 'es-US');
            assert.ok(locality.language === 'es');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'US');
            next();
        });
    });

    it('lang cookie as as en;CA request: CA locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'ca'};
        req.headers = {
            cookie : 'LANG=en%3BCA;'
        };

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'CA');
            assert.ok(locality.locale === 'en_US');
            assert.ok(locality.culture === 'en-CA');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'CA');
            next();
        });
    });

    it('lang cookie as as fr_CA;CA request: CA locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'ca'};
        req.headers = {
            cookie : 'LANG=fr_CA%3BCA;'
        };

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'CA');
            assert.ok(locality.locale === 'fr_CA');
            assert.ok(locality.culture === 'fr-CA');
            assert.ok(locality.language === 'fr');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'CA');
            next();
        });
    });

    it('accept-language as fr request: FR locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);
        req.query = {'country.x' : 'fr'};
        req.headers = {'accept-language' : 'fr'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'FR');
            assert.ok(locality.locale === 'fr_FR');
            assert.ok(locality.culture === 'fr-FR');
            assert.ok(locality.language === 'fr');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'FR');
            next();
        });
    });

    it('accept-language as fr_FR request: FR locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);
        req.query = {'country.x' : 'fr'};
        req.headers = {'accept-language' : 'fr_FR, fr'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'FR');
            assert.ok(locality.locale === 'fr_FR');
            assert.ok(locality.culture === 'fr-FR');
            assert.ok(locality.language === 'fr');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'FR');
            next();
        });
    });

    it('originalUrl as IN request: IN locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'original.url' : 'http://localhost.paypal.com:3000/?country.x=in'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'IN');
            assert.ok(locality.locale === 'en_GB');
            assert.ok(locality.culture === 'en-IN');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'IN');
            next();
        });
    });

    it('locale.x as de_DE request: DE locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {
            'country.x' : 'de',
            'locale.x' : 'de_DE'
        };
        req.headers = { 'accept-language' : 'de'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'DE');
            assert.ok(locality.locale === 'de_DE');
            assert.ok(locality.culture === 'de-DE');
            assert.ok(locality.language === 'de');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'DE');
            next();
        });
    });

    it('locale.x as es_XC request: MX locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {
            'country.x' : 'mx',
            'locale.x' : 'es_XC'
        };
        req.headers = { 'accept-language' : 'en;es'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'MX');
            assert.ok(locality.locale === 'es_XC');
            assert.ok(locality.culture === 'es-MX');
            assert.ok(locality.language === 'es');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'MX');
            next();
        });
    });

    it('Default locale as es_XC request: MX locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = { 'country.x' : 'mx'};
        req.headers = { 'accept-language' : 'es;en'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'MX');
            assert.ok(locality.locale === 'es_XC');
            assert.ok(locality.culture === 'es-MX');
            assert.ok(locality.language === 'es');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'MX');
            next();
        });
    });

    it('locale.x as he_IL request: IL locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {
            'country.x' : 'il',
            'locale.x' : 'he_IL'
        };
        req.headers = { 'accept-language' : 'il'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'IL');
            assert.ok(locality.locale === 'he_IL');
            assert.ok(locality.culture === 'he-IL');
            assert.ok(locality.language === 'he');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'IL');
            next();
        });
    });

    it('locale.x as zh_TW request: TW locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {
            'country.x' : 'TW',
            'locale.x' : 'zh_TW'
        };

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'TW');
            assert.ok(locality.locale === 'zh_TW');
            assert.ok(locality.culture === 'zh-TW');
            assert.ok(locality.language === 'zh');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'TW');
            next();
        });
    });

    it('DE user with en_US query: DE locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'us'};
        req.headers = { 'accept-language' : 'de, en'};
        req.user = {
            country : {
                countryCode : 'DE'
            },
            dialect : {
                language : {
                    languageCode : 'de'
                }
            },
            timeZone : {
                timeZoneCode : 'Pacific/Auckland'
            }
        };
        req.cookie = 'LANG=en_US%3BUS;';

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'DE');
            assert.ok(locality.locale === 'de_DE');
            assert.ok(locality.culture === 'de-DE');
            assert.ok(locality.language === 'de');
            assert.ok(locality.timezone === 'Europe/Berlin');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'DE');
            next();
        });
    });

    it('locale.x as de_DE post request: DE locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.body = {
            'country.x' : 'de',
            'locale.x' : 'de_DE'
        };
        req.headers = { 'accept-language' : 'de'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'DE');
            assert.ok(locality.locale === 'de_DE');
            assert.ok(locality.culture === 'de-DE');
            assert.ok(locality.language === 'de');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'DE');
            next();
        });
    });

    it('accept-language fr: fr_XC locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.headers = { 'accept-language' : 'fr, en-US'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'US');
            assert.ok(locality.locale === 'fr_XC');
            assert.ok(locality.culture === 'fr-US');
            assert.ok(locality.language === 'fr');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'US');
            next();
        });
    });

    it('Directionality: US locality (ltr)', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = { 'country.x' : 'US'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.language === 'en');
            assert.ok(locality.directionality === 'ltr');
            next();
        });
    });

    it('Directionality: IL locality (rtl)', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {
            'country.x' : 'il',
            'locale.x' : 'he_IL'
        };
        req.headers = { 'accept-language' : 'il'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.language === 'he');
            assert.ok(locality.directionality === 'rtl');
            next();
        });
    });

    it('Defaut request: DM locality', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = { 'country.x' : 'DM'};

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'DM');
            assert.ok(locality.locale === 'en_US');
            assert.ok(locality.culture === 'en-DM');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'DM');
            assert.ok(res.locals.context.links.templateBaseUrl === 'https://www.paypalobjects.com/web/res/abc/def789321/DM/en');
            assert.ok(locality.getCountrySpecifics().isConsiderBrowserLanguage() === true);
            next();
        });
    });

});
