'use strict';

var assert = require('assert'),
    tryRequire = require('try-require'),
    cal = tryRequire('cal'),
    CountryResolver = require('../lib/resolvers/country-resolver'),
    CowFactory = require('../lib/cow/index'),
    testUtils = require('./fixtures/utils');

var cowFactory,
    countryResolver,
    req = testUtils.injectRequest();


//Test country resolution - as defined by Sparta: https://dev.paypal.com/wiki/Sparta/RequestLocaleCountryDialectResolution
//Adding in geolocation as a final check before defaulting to US, same as webscr country resolution
//Each test overrides the previous fallback logic (goes from more general to specific)
describe('Test country-resolver fallback logic', function () {

    if (cal) {
        cal.setDefaultWriteStream('console');
        cal.defaults.formatter = cal.formatter.silent;
    }
    cowFactory = CowFactory({}, cal);

    // Fallback to the US if we cannot figure out a country
    // In this test, the user gives two different country.x values
    it('Resolve to default when  Param with different duplicate', function (next) {

      req.query["original.url"] = 'http%3A%2F%2Flocalhost.com%3A3000%2F%3Fcountry.x%3DFR%26country.x%3Dhk';

      countryResolver = new CountryResolver(cowFactory);
      var resolvedCountry = countryResolver.resolve(req);
      assert.ok(resolvedCountry.determiner === 'viaOriginalURLURLParam');
      assert.ok(resolvedCountry.value === 'HK');
      req.query = {}; // cleanup for following tests
      next();
    });

    // Fallback to the US if we cannot figure out a country since it is not a string
    it('Resolve to default when country is an object', function (next) {

      req.session = { localeCountry : {"a": "FR", "b": "FR" }};

      countryResolver = new CountryResolver(cowFactory);
      var resolvedCountry = countryResolver.resolve(req);
      assert.ok(resolvedCountry.determiner === 'viaDefault');
      assert.ok(resolvedCountry.value === 'US');
      delete req.session; // cleanup for following tests
      next();
    });

    it('Resolve via default', function (next) {

        countryResolver = new CountryResolver(cowFactory);
        var resolvedCountry = countryResolver.resolve(req);
        assert.ok(resolvedCountry.determiner === 'viaDefault');
        assert.ok(resolvedCountry.value === 'US');
        next();
    });


    it('Resolve via geolocation', function (next) {

        req.headers[CountryResolver.CONSTANTS.geolocationHeader] = "DE";

        countryResolver = new CountryResolver(cowFactory, {geolocation: true});
        var resolvedCountry = countryResolver.resolve(req);
        assert.ok(resolvedCountry.determiner === 'viaGeolocation');
        assert.ok(resolvedCountry.value === 'DE');

        countryResolver = new CountryResolver(cowFactory, {geolocation: false});
        resolvedCountry = countryResolver.resolve(req);
        assert.ok(resolvedCountry.determiner === 'viaDefault');
        assert.ok(resolvedCountry.value === 'US');
        next();
    });

    it('Resolve via session', function (next) {

        req.session = { localeCountry : "FR" };

        countryResolver = new CountryResolver(cowFactory);
        var resolvedCountry = countryResolver.resolve(req);
        assert.ok(resolvedCountry.determiner === 'viaSession');
        assert.ok(resolvedCountry.value === 'FR');
        next();
    });

    it('Resolve via LANG cookie', function (next) {

        req.headers.cookie = 'cookie_check=yes; LANG=it_IT%3bIT;';

        countryResolver = new CountryResolver(cowFactory);
        var resolvedCountry = countryResolver.resolve(req);
        assert.ok(resolvedCountry.determiner === 'viaLangCookie');
        assert.ok(resolvedCountry.value === 'IT');
        next();
    });

    it('Resolve via Original URL Param', function (next) {

        req.query["original.url"] = 'http%3A%2F%2Flocalhost.com%3A3000%2F%3Fcountry.x%3Dhk';

        countryResolver = new CountryResolver(cowFactory);
        var resolvedCountry = countryResolver.resolve(req);
        assert.ok(resolvedCountry.determiner === 'viaOriginalURLURLParam');
        assert.ok(resolvedCountry.value === 'HK');
        next();
    });

    it('Resolve via Original URL Param with duplicate', function (next) {

        req.query["original.url"] = 'http%3A%2F%2Flocalhost.com%3A3000%2F%3Fcountry.x%3Dhk%26country.x%3Dhk';

        countryResolver = new CountryResolver(cowFactory);
        var resolvedCountry = countryResolver.resolve(req);
        assert.ok(resolvedCountry.determiner === 'viaOriginalURLURLParam');
        assert.ok(resolvedCountry.value === 'HK');
        next();
    });

    it('Resolve via Original URL Param with duplicate synonym', function (next) {

        req.query["original.url"] = 'http%3A%2F%2Flocalhost.com%3A3000%2F%3Fcountry.x%3DUK%26country.x%3DGB';

        countryResolver = new CountryResolver(cowFactory);
        var resolvedCountry = countryResolver.resolve(req);
        assert.ok(resolvedCountry.determiner === 'viaOriginalURLURLParam');
        assert.ok(resolvedCountry.value === 'GB');
        next();
    });


    //TODO: only testing nginx cobrand since the 2 letter country code won't make it to the app in live
    //given LTM rules and context root - consider removing the URL checks in the code altogether?
    it('Resolve via Country CoBrand', function (next) {

        //cobrand header needs to be added via nginx rules and stripped from URL
        req.headers['x-pp-cobrand'] = 'CN';

        countryResolver = new CountryResolver(cowFactory);
        var resolvedCountry = countryResolver.resolve(req);
        assert.ok(resolvedCountry.determiner === 'viaCountryCoBrand');
        assert.ok(resolvedCountry.value === 'CN');
        next();
    });

    it('Resolve via Country.x Param', function (next) {

        req.query[CountryResolver.CONSTANTS.country_x_request_param] = 'UK';

        countryResolver = new CountryResolver(cowFactory);
        var resolvedCountry = countryResolver.resolve(req);
        assert.ok(resolvedCountry.determiner === 'viaCountryXUrlParam');
        assert.ok(resolvedCountry.value === 'GB');
        next();
    });

    it('Resolve via Country.test Param', function (next) {

        req.query['country.test'] = 'UK';

        countryResolver = new CountryResolver(cowFactory);
        var resolvedCountry = countryResolver.resolve(req);
        assert.ok(resolvedCountry.determiner === 'viaCountryTestUrlParam');
        assert.ok(resolvedCountry.value === 'GB');
        req.query = {};
        next();
    });

    it('Resolve via User Profile', function (next) {

        req.user = {
            country: {
                countryCode: 'AU'
            }
        };

        countryResolver = new CountryResolver(cowFactory);
        var resolvedCountry = countryResolver.resolve(req);
        assert.ok(resolvedCountry.determiner === 'viaUserProfile');
        assert.ok(resolvedCountry.value === 'AU');
        next();
    });



});
