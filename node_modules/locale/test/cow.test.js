'use strict';

var assert = require('assert'),
    tryRequire = require('try-require'),
    cal = tryRequire('cal');

if (cal) {
    cal.setDefaultWriteStream('console');
    cal.defaults.formatter = cal.formatter.silent;
}

var cowFactory = require('../lib/cow/index')({locales: ['US']}, cal);

describe('COW Test, load only US by default, all other countries Lazy Load', function () {

    it('Async : country map', function (next) {
        cowFactory.readCountries(function (err, countriesMap) {
            assert.ok(countriesMap['US'] === 'United States');
            assert.ok(countriesMap['GB'] === 'United Kingdom');
            next();
        });
    });

    it('Async : US cow properties', function (next) {
        cowFactory.readCow('US', function (err, cow) {
            assert.ok(cow.getCountryCode() === 'US');
            assert.ok(cow.getCurrencyCode() === 'USD');
            assert.ok(cow.getCountryNumeric() === '840');
            assert.ok(cow.getTelephoneCountryCode() === '1');
            assert.ok(cow.getPrimaryTimeZone() === 'America/Los_Angeles');
            assert.ok(typeof cow.isClock12HrFormat() === "boolean");
            assert.ok(cow.isInEU() ===  false);
            assert.ok(cow.getStateMap().CA === 'California');
            next();
        });
    });

    it('Async : DE cow properties', function (next) {
        cowFactory.readCow('DE', function (err, cow) {
            //console.log(cow.getPrimaryTimeZone());
            assert.ok(cow.getCountryCode() === 'DE');
            assert.ok(cow.getCountryNumeric() === '276');
            assert.ok(cow.getTelephoneCountryCode() === '49');
            assert.ok(cow.getPrimaryTimeZone() === 'Europe/Berlin');
            assert.ok(typeof cow.isClock12HrFormat() === "boolean");
            assert.ok(cow.isInEU() ===  true);
            assert.ok(cow.getStateCodes().length === 0);
            next();
        });
    });

    it('Sync : country map', function (next) {
        var countriesMap = cowFactory.getCountries();
        assert.ok(countriesMap['US'] === 'United States');
        assert.ok(countriesMap['GB'] === 'United Kingdom');
        assert.ok(cowFactory.isValidCountry('FR'));
        assert.ok(cowFactory.isValidCountry('DE'));
        assert.ok(cowFactory.isValidCountry('IN'));
        assert.ok(cowFactory.isValidCountry('AA') === false);
        next();
    });

    it('Sync : US cow properties', function (next) {
        var cow = cowFactory.getCow('US');
        assert.ok(cow.getCountryCode() === 'US');
        assert.ok(cow.getTelephoneIntlAccessCode() === '011');
        assert.ok(cow.getCountryNumeric() === '840');
        assert.ok(cow.getLegalEntity() === 'I');
        assert.ok(cow.getPrimaryTimeZone() === 'America/Los_Angeles');
        assert.ok(typeof cow.isClock12HrFormat() === "boolean");
        assert.ok(cow.isValidLanguage('en_US') === true);
        assert.ok(cow.isValidLanguage('en_Fr') === false);
        assert.ok(cow.isInEuroZone() ===  false);
        assert.ok(cow.isInNanp() ===  true);
        assert.ok(typeof cow.isBaynoteSeachEnabled() === "boolean");
        assert.ok(typeof cow.isSaytEnabled() === "boolean");
        assert.ok(typeof cow.isSignupEnabled() === "boolean");
        assert.ok(typeof cow.isSiteWideSearchEnabled() === "boolean");
        assert.ok(typeof cow.isConsiderCookieLanguage() === "boolean");
        assert.ok(typeof cow.isConsiderBrowserLanguage() === "boolean");
        assert.ok(cow.getCountryCoBrand() === 'us');
        assert.ok(cow.getSignupCategory() === '63');
        next();
    });

    it('Sync : GB cow properties', function (next) {
        var cow = cowFactory.getCow('GB');
        assert.ok(cow.getCountryCode() === 'GB');
        assert.ok(cow.getCountryNumeric() === '826');
        assert.ok(cow.getTelephoneCountryCode() === '44');
        assert.ok(cow.getPrimaryTimeZone() === 'Europe/London');
        assert.ok(typeof cow.isClock12HrFormat() === "boolean");
        assert.ok(cow.isInEU() ===  true);
        assert.ok(cow.isInEuroZone() ===  true);
        assert.ok(cow.isInNanp() ===  false);
        assert.ok(cow.getTimeZones().indexOf(cow.getPrimaryTimeZone()) !== -1);
        assert.ok(cow.getLanguages().indexOf('en_GB') !== -1);
        assert.ok(cow.get('cow_property_credit_card_processor') !== null);
        next();
    });


    it('Sync : KH cow properties', function (next) {
        var cow = cowFactory.getCow('KH');
        assert.ok(cow.getCountryCode() === 'KH');
        assert.ok(cow.getPrimaryTimeZone() === 'America/Los_Angeles');
        assert.ok(typeof cow.isClock12HrFormat() === "boolean");
        assert.ok(cow.isInEU() ===  false);
        assert.ok(cow.isInEuroZone() ===  false);
        assert.ok(cow.isInNanp() ===  false);
        assert.ok(cow.getTimeZones().indexOf(cow.getPrimaryTimeZone()) !== -1);
        assert.ok(cow.getLanguages().indexOf('en_US') !== -1);
        assert.ok(cow.get('cow_property_credit_card_processor') !== null);
        next();
    });

    it('get IN cow', function (next) {
        var cowIN = cowFactory.getCow('IN');
        assert.ok(cowIN.getCountryCode() === 'IN');
        assert.ok(cowIN.getCurrencyCode() === 'INR');
        assert.ok(!cowIN.isValidLanguage('FR'));
        assert.strictEqual(cowIN.get('cow_property_default_primary_balance_currency').join(), 'USD');
        assert.strictEqual(cowIN.get('cow_property_legal_entity').join(), 'P');
        assert.ok(cowIN.get('cow_property_sendable_currency').indexOf('INR') === -1);
        assert.ok(cowIN.get('cow_property_sendable_currency').indexOf('COW_ARRAY_END') === -1);
        next();
    });
});
