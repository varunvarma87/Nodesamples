'use strict';

var assert = require('assert'),
    tryRequire = require('try-require'),
    cal = tryRequire('cal'),
    Locale = require('../index'),
    testUtils = require('./fixtures/utils'),
    locale;

if (cal) {
    cal.setDefaultWriteStream('console');
    cal.defaults.formatter = cal.formatter.silent;
}

describe('Formatters', function () {

    beforeEach(function (next) {
        locale = Locale({locales: ['US']});
        next();
    });

    it('Defaut formatter - no arguments: US', function (next) {

        var formatter = Locale.formatter(),
            date = new Date(2013, 2, 28, 14, 10, 30);

        assert.ok(formatter.format(100, 'n') === '100.00');
        assert.ok(formatter.format(1000, 'n') === '1,000.00');
        assert.ok(formatter.format(1000.50, 'n') === '1,000.50');
        assert.ok(formatter.format(100, 'c') === '$100.00');
        assert.ok(formatter.format(1000.50, 'c') === '$1,000.50');
        assert.ok(formatter.formatCurrency(1000) === '$1,000.00');
        assert.ok(formatter.formatCurrency(1000, 'EUR') === '€1,000.00');
        assert.ok(formatter.formatCurrency(1000.5) === '$1,000.50');
        assert.ok(formatter.format(date, 'd') === '3/28/2013');
        assert.ok(formatter.format(date, 'f') === 'Thursday, March 28, 2013 2:10 PM');
        assert.ok(formatter.format(date, 'F') === 'Thursday, March 28, 2013 2:10:30 PM');
        assert.ok(formatter.format(date, 'D') === 'Mar 28, 2013');
        assert.ok(formatter.format(date, 'M') === 'March 28');
        assert.ok(formatter.format(date, 'Y') === '2013 March');
        assert.ok(formatter.format(date, 't') === '2:10 PM');
        assert.ok(formatter.format(date, 'T') === '2:10:30 PM');
        assert.ok(formatter.format(date, 'd MMM yyyy') === '28 Mar 2013');
        assert.ok(formatter.format(date, 'd. MMMM yyyy') === '28. March 2013');
        assert.ok(formatter.format(date, 'MMM d, yyyy') === 'Mar 28, 2013');
        assert.ok(formatter.parseInt('1,000') === 1000);
        assert.ok(formatter.parseInt('1,000.23', 10) === 1000);
        assert.ok(formatter.parseFloat('1,000.23') === 1000.23);
        assert.ok(formatter.parseDate('2012 December').getDate() === 1);
        assert.ok(formatter.getCulture());
        assert.ok(formatter.getCalendar());
        next();
    });

    it('Defaut formatter: US', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        locale(req, res, function () {
            var locality = req.locality,
                formatter = locality.formatter(),
                date = new Date(2013, 2, 28, 14, 10, 30);

            assert.ok(formatter.format(100, 'n') === '100.00');
            assert.ok(formatter.format(1000, 'n') === '1,000.00');
            assert.ok(formatter.format(1000.50, 'n') === '1,000.50');
            assert.ok(formatter.format(100, 'c') === '$100.00');
            assert.ok(formatter.format(1000.50, 'c') === '$1,000.50');
            assert.ok(formatter.formatCurrency(1000) === '$1,000.00');
            assert.ok(formatter.formatCurrency(1000, 'EUR') === '€1,000.00');
            assert.ok(formatter.formatCurrency(1000.5) === '$1,000.50');
            assert.ok(formatter.format(date, 'd') === '3/28/2013');
            assert.ok(formatter.format(date, 'f') === 'Thursday, March 28, 2013 2:10 PM');
            assert.ok(formatter.format(date, 'F') === 'Thursday, March 28, 2013 2:10:30 PM');
            assert.ok(formatter.format(date, 'D') === 'Mar 28, 2013');
            assert.ok(formatter.format(date, 'M') === 'March 28');
            assert.ok(formatter.format(date, 'Y') === '2013 March');
            assert.ok(formatter.format(date, 't') === '2:10 PM');
            assert.ok(formatter.format(date, 'T') === '2:10:30 PM');
            assert.ok(formatter.format(date, 'd MMM yyyy') === '28 Mar 2013');
            assert.ok(formatter.format(date, 'd. MMMM yyyy') === '28. March 2013');
            assert.ok(formatter.format(date, 'MMM d, yyyy') === 'Mar 28, 2013');
            assert.ok(formatter.parseInt('1,000') === 1000);
            assert.ok(formatter.parseInt('1,000.23', 10) === 1000);
            assert.ok(formatter.parseFloat('1,000.23') === 1000.23);
            assert.ok(formatter.parseDate('2012 December').getDate() === 1);
            assert.ok(formatter.getCulture());
            assert.ok(formatter.getCalendar());
            next();
        });
    });

    it('en_CA formatter: CA', function (next) {

        var formatter = Locale.formatter('CA', 'en_CA'),
            date = new Date(2013, 2, 28, 14, 10, 30);

        assert.ok(formatter.format(100, 'n') === '100.00');
        assert.ok(formatter.format(1000, 'n') === '1,000.00');
        assert.ok(formatter.format(1000.50, 'n') === '1,000.50');
        assert.ok(formatter.format(100, 'c') === '$100.00');
        assert.ok(formatter.format(1000.50, 'c') === '$1,000.50');
        assert.ok(formatter.formatCurrency(1000) === '$1,000.00');
        assert.ok(formatter.formatCurrency(1000, 'EUR') === '€1,000.00');
        assert.ok(formatter.formatCurrency(1000.5) === '$1,000.50');
        assert.ok(formatter.format(date, 'd') === '28/03/2013');
        assert.ok(formatter.format(date, 'f') === 'March-28-13 2:10 PM');
        assert.ok(formatter.format(date, 'F') === 'March-28-13 2:10:30 PM');
        assert.ok(formatter.format(date, 'D') === 'March-28-13');
        assert.ok(formatter.format(date, 'M') === 'March 28');
        assert.ok(formatter.format(date, 'Y') === '2013 March');
        assert.ok(formatter.format(date, 't') === '2:10 PM');
        assert.ok(formatter.format(date, 'T') === '2:10:30 PM');
        assert.ok(formatter.format(date, 'd MMM yyyy') === '28 Mar 2013');
        assert.ok(formatter.format(date, 'd. MMMM yyyy') === '28. March 2013');
        assert.ok(formatter.format(date, 'MMM d, yyyy') === 'Mar 28, 2013');
        assert.ok(formatter.parseInt('1,000') === 1000);
        assert.ok(formatter.parseInt('1,000.23', 10) === 1000);
        assert.ok(formatter.parseFloat('1,000.23') === 1000.23);
        assert.ok(formatter.parseDate('2012 December').getDate() === 1);
        assert.ok(formatter.getCulture());
        assert.ok(formatter.getCalendar());
        next();
    });

    it('fr_CA formatter: CA', function (next) {

        var formatter = Locale.formatter('CA', 'fr_CA'),
            date = new Date(2013, 2, 28, 14, 10, 30);

        assert.ok(formatter.format(100, 'n') === '100,00');
        assert.ok(formatter.format(1000, 'n') === '1 000,00');
        assert.ok(formatter.format(1000.50, 'n') === '1 000,50');
        assert.ok(formatter.format(100, 'c') === '$100,00');
        assert.ok(formatter.format(1000.50, 'c') === '$1 000,50');
        assert.ok(formatter.formatCurrency(1000) === '$1 000,00');
        assert.ok(formatter.formatCurrency(1000, 'EUR') === '€1 000,00');
        assert.ok(formatter.formatCurrency(1000.5) === '$1 000,50');
        assert.ok(formatter.formatDate(date, 'd') === '28/03/2013');
        assert.ok(formatter.formatDate(date, 'f') === '28 mars 2013 14:10');
        assert.ok(formatter.formatDate(date, 'F') === '28 mars 2013 14:10:30');
        assert.ok(formatter.formatDate(date, 'D') === '28 mars 2013');
        assert.ok(formatter.formatDate(date, 'M') === '28 mars');
        assert.ok(formatter.formatDate(date, 'Y') === '2013 mars');
        assert.ok(formatter.formatDate(date, 't') === '14:10');
        assert.ok(formatter.formatDate(date, 'T') === '14:10:30');
        assert.ok(formatter.getCulture());
        assert.ok(formatter.getCalendar());
        next();
    });

    it('en_GB formatter: GB', function (next) {
        var formatter = Locale.formatter('GB', 'en-GB'),
            date = new Date(2013, 2, 28, 14, 10, 30);

        assert.ok(formatter.format(100, 'n') === '100.00');
        assert.ok(formatter.format(1000, 'n') === '1,000.00');
        assert.ok(formatter.format(100, 'c') === '£100.00');
        assert.ok(formatter.format(1000, 'c') === '£1,000.00');
        assert.ok(formatter.formatCurrency(1000) === '£1,000.00');
        assert.ok(formatter.formatCurrency(1000, 'EUR') === '€1,000.00');
        assert.ok(formatter.formatCurrency(1000, 'USD') === '$1,000.00');
        assert.ok(formatter.format(date, 'd') === '28/03/2013');
        assert.ok(formatter.format(date, 'f') === '28 March 2013 14:10');
        assert.ok(formatter.format(date, 'F') === '28 March 2013 14:10:30');
        assert.ok(formatter.format(date, 'D') === '28 March 2013');
        assert.ok(formatter.format(date, 'M') === '28 March');
        assert.ok(formatter.format(date, 'Y') === 'March 2013');
        assert.ok(formatter.format(date, 't') === '14:10');
        assert.ok(formatter.format(date, 'T') === '14:10:30');
        assert.ok(formatter.parseDate('21 December 2012').getMonth() === 11);
        assert.ok(formatter.getCulture() === 'en-GB');
        assert.ok(formatter.getCalendar());
        next();
    });


    it('en_GB formatter - using default language with no locale in args: GB', function (next) {
        var formatter = Locale.formatter('GB'),
            date = new Date(2013, 2, 28, 14, 10, 30);

        assert.ok(formatter.format(100, 'n') === '100.00');
        assert.ok(formatter.format(1000, 'n') === '1,000.00');
        assert.ok(formatter.format(100, 'c') === '£100.00');
        assert.ok(formatter.format(1000, 'c') === '£1,000.00');
        assert.ok(formatter.formatCurrency(1000) === '£1,000.00');
        assert.ok(formatter.formatCurrency(1000, 'EUR') === '€1,000.00');
        assert.ok(formatter.formatCurrency(1000, 'USD') === '$1,000.00');
        assert.ok(formatter.format(date, 'd') === '28/03/2013');
        assert.ok(formatter.format(date, 'f') === '28 March 2013 14:10');
        assert.ok(formatter.format(date, 'F') === '28 March 2013 14:10:30');
        assert.ok(formatter.format(date, 'D') === '28 March 2013');
        assert.ok(formatter.format(date, 'M') === '28 March');
        assert.ok(formatter.format(date, 'Y') === 'March 2013');
        assert.ok(formatter.format(date, 't') === '14:10');
        assert.ok(formatter.format(date, 'T') === '14:10:30');
        assert.ok(formatter.parseDate('21 December 2012').getMonth() === 11);
        assert.ok(formatter.getCulture() === 'en-GB');
        assert.ok(formatter.getCalendar());
        next();
    });

    it('en_GB formatter: GB', function (next) {
        var formatter = Locale.formatter('GB', 'en_GB'),
            date = new Date(2013, 2, 28, 14, 10, 30);

        assert.ok(formatter.format(100, 'n') === '100.00');
        assert.ok(formatter.format(1000, 'n') === '1,000.00');
        assert.ok(formatter.format(100, 'C') === '£100.00');
        assert.ok(formatter.format(1000, 'c') === '£1,000.00');
        assert.ok(formatter.formatCurrency(1000) === '£1,000.00');
        assert.ok(formatter.formatCurrency(1000, 'EUR') === '€1,000.00');
        assert.ok(formatter.formatCurrency(1000, 'USD') === '$1,000.00');
        assert.ok(formatter.format(date, 'd') === '28/03/2013');
        assert.ok(formatter.format(date, 'f') === '28 March 2013 14:10');
        assert.ok(formatter.format(date, 'F') === '28 March 2013 14:10:30');
        assert.ok(formatter.format(date, 'D') === '28 March 2013');
        assert.ok(formatter.format(date, 'M') === '28 March');
        assert.ok(formatter.format(date, 'Y') === 'March 2013');
        assert.ok(formatter.format(date, 't') === '14:10');
        assert.ok(formatter.format(date, 'T') === '14:10:30');
        assert.ok(formatter.parseDate('21 December 2012').getMonth() === 11);
        assert.ok(formatter.getCulture() === 'en-GB');
        assert.ok(formatter.getCalendar());
        assert.ok(formatter.getCalendar().patterns);
        assert.ok(formatter.getCalendar().patterns.d === 'dd/MM/yyyy');
        assert.ok(formatter.getCalendar().patterns.F === 'dd MMMM yyyy HH:mm:ss');
        assert.ok(formatter.getCalendar().days);
        assert.ok(formatter.getCalendar().days.names);
        assert.ok(formatter.getCalendar().days.names[0] === 'Sunday');
        next();
    });

    it('fr_US formatter: US', function (next) {
        var formatter = Locale.formatter('US', 'fr-US'),
            date = new Date(2013, 2, 28, 14, 10, 30);

        assert.ok(formatter.format(100, 'n') === '100,00');
        assert.ok(formatter.format(1000, 'n') === '1 000,00');
        assert.ok(formatter.format(1000.50, 'n') === '1 000,50');
        assert.ok(formatter.format(100, 'c') === '$100.00');
        assert.ok(formatter.format(1000.50, 'c') === '$1,000.50');
        assert.ok(formatter.formatCurrency(1000) === '$1,000.00');
        assert.ok(formatter.formatCurrency(1000, 'EUR') === '€1,000.00');
        assert.ok(formatter.formatCurrency(1000.5) === '$1,000.50');
        assert.ok(formatter.format(date, 'd') === '3/28/2013');
        assert.ok(formatter.format(date, 'f') === 'Thursday, March 28, 2013 2:10 PM');
        assert.ok(formatter.format(date, 'F') === 'Thursday, March 28, 2013 2:10:30 PM');
        assert.ok(formatter.format(date, 'D') === 'Thursday, March 28, 2013');
        assert.ok(formatter.format(date, 'M') === 'March 28');
        assert.ok(formatter.format(date, 'Y') === '2013 March');
        assert.ok(formatter.format(date, 't') === '2:10 PM');
        assert.ok(formatter.format(date, 'T') === '2:10:30 PM');
        assert.ok(formatter.format(date, 'd MMM yyyy') === '28 Mar 2013');
        assert.ok(formatter.format(date, 'd. MMMM yyyy') === '28. March 2013');
        assert.ok(formatter.format(date, 'MMM d, yyyy') === 'Mar 28, 2013');
        assert.ok(formatter.parseInt('1,000') === 1000);
        assert.ok(formatter.parseInt('1,000.23', 10) === 1000);
        assert.ok(formatter.parseFloat('1,000.23') === 1000.23);
        assert.ok(formatter.parseDate('2012 December').getDate() === 1);
        assert.ok(formatter.getCulture());
        assert.ok(formatter.getCalendar());
        next();
    });

    it('fr_FR formatter: FR', function (next) {
        var formatter = Locale.formatter('FR', 'fr-FR'),
            date = new Date(2013, 2, 28, 14, 10, 30);

        assert.ok(formatter.format(100, 'n') === '100,00');
        assert.ok(formatter.format(1000, 'n') === '1 000,00');
        assert.ok(formatter.format(100, 'c') === '€100,00');
        assert.ok(formatter.format(1000, 'c') === '€1 000,00');
        assert.ok(formatter.formatCurrency(1000) === '€1 000,00');
        assert.ok(formatter.formatCurrency(1000, 'USD') === '$1 000,00');
        assert.ok(formatter.format(date, 'd') === '28/03/2013');
        assert.ok(formatter.format(date, 'f') === 'jeudi 28 mars 2013 14:10');
        assert.ok(formatter.format(date, 'F') === 'jeudi 28 mars 2013 14:10:30');
        assert.ok(formatter.format(date, 'D') === 'jeudi 28 mars 2013');
        assert.ok(formatter.format(date, 'M') === '28 mars');
        assert.ok(formatter.format(date, 'Y') === 'mars 2013');
        assert.ok(formatter.format(date, 'd MMM yyyy') === '28 mars 2013');
        assert.ok(formatter.format(date, 'd. MMMM yyyy') === '28. mars 2013');
        assert.ok(formatter.format(date, 'MMM d, yyyy') === 'mars 28, 2013');
        assert.ok(formatter.format(date, 't') === '14:10');
        assert.ok(formatter.format(date, 'T') === '14:10:30');
        assert.ok(formatter.getCulture() === 'fr-FR');
        assert.ok(formatter.getCalendar());
        assert.ok(formatter.getCalendar().patterns);
        assert.ok(formatter.getCalendar().patterns.d === 'dd/MM/yyyy');
        assert.ok(formatter.getCalendar().patterns.F === 'dddd d MMMM yyyy HH:mm:ss');
        assert.ok(formatter.getCalendar().days);
        assert.ok(formatter.getCalendar().days.names);
        assert.ok(formatter.getCalendar().days.names[0] === 'dimanche');
        next();
    });

    it('fr_FR formatter: FR', function (next) {
        var formatter = Locale.formatter('FR', 'fr_FR'),
            date = new Date(2013, 2, 28, 14, 10, 30);

        assert.ok(formatter.format(100, 'n') === '100,00');
        assert.ok(formatter.format(1000, 'n') === '1 000,00');
        assert.ok(formatter.format(100, 'c') === '€100,00');
        assert.ok(formatter.format(1000, 'c') === '€1 000,00');
        assert.ok(formatter.formatCurrency(1000) === '€1 000,00');
        assert.ok(formatter.formatCurrency(1000, 'USD') === '$1 000,00');
        assert.ok(formatter.format(date, 'd') === '28/03/2013');
        assert.ok(formatter.format(date, 'f') === 'jeudi 28 mars 2013 14:10');
        assert.ok(formatter.format(date, 'F') === 'jeudi 28 mars 2013 14:10:30');
        assert.ok(formatter.format(date, 'D') === 'jeudi 28 mars 2013');
        assert.ok(formatter.format(date, 'M') === '28 mars');
        assert.ok(formatter.format(date, 'Y') === 'mars 2013');
        assert.ok(formatter.format(date, 'd MMM yyyy') === '28 mars 2013');
        assert.ok(formatter.format(date, 'd. MMMM yyyy') === '28. mars 2013');
        assert.ok(formatter.format(date, 'MMM d, yyyy') === 'mars 28, 2013');
        assert.ok(formatter.format(date, 't') === '14:10');
        assert.ok(formatter.format(date, 'T') === '14:10:30');
        assert.ok(formatter.getCulture() === 'fr-FR');
        next();
    });

    it('de_DE formatter: DE', function (next) {
        var formatter = Locale.formatter('DE', 'de_DE'),
            date = new Date(2013, 2, 28, 14, 10, 30);

        assert.ok(formatter.format(100, 'n') === '100,00');
        assert.ok(formatter.format(1000, 'n') === '1.000,00');
        assert.ok(formatter.format(100, 'c') === '€100,00');
        assert.ok(formatter.format(1000, 'c') === '€1.000,00');
        assert.ok(formatter.formatCurrency(1000) === '€1.000,00');
        assert.ok(formatter.formatCurrency(1000, 'USD') === '$1.000,00');
        assert.ok(formatter.format(date, 'd') === '28.03.2013');
        assert.ok(formatter.format(date, 'f') === 'Donnerstag, 28. März 2013 14:10');
        assert.ok(formatter.format(date, 'F') === 'Donnerstag, 28. März 2013 14:10:30');
        assert.ok(formatter.format(date, 'D') === 'Donnerstag, 28. März 2013');
        assert.ok(formatter.format(date, 'M') === '28 März');
        assert.ok(formatter.format(date, 'Y') === 'März 2013');
        assert.ok(formatter.format(date, 'd MMM yyyy') === '28 Mrz 2013');
        assert.ok(formatter.format(date, 'd. MMMM yyyy') === '28. März 2013');
        assert.ok(formatter.format(date, 'MMM d, yyyy') === 'Mrz 28, 2013');
        assert.ok(formatter.format(date, 't') === '14:10');
        assert.ok(formatter.format(date, 'T') === '14:10:30');
        assert.ok(formatter.getCulture() === 'de-DE');
        next();
    });

    it('ja_JP formatter - using req.locality: JP', function (next) {

        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = { 'country.x': 'JP', 'locale.x': 'ja_JP'};

        locale(req, res, function () {
            var locality = req.locality,
                formatter = locality.formatter(),
                date = new Date(2013, 2, 28, 14, 10, 30);

            assert.ok(formatter.format(100, 'n') === '100.00');
            assert.ok(formatter.format(1000, 'n') === '1,000.00');
            assert.ok(formatter.format(100, 'c') === '¥100');
            assert.ok(formatter.format(1000, 'c') === '¥1,000');
            assert.ok(formatter.formatCurrency(1000) === '¥1,000');
            assert.ok(formatter.format(date, 'd') === '2013/03/28');
            assert.ok(formatter.format(date, 'f') === '2013年3月28日 14:10');
            assert.ok(formatter.format(date, 'F') === '2013年3月28日 14:10:30');
            assert.ok(formatter.format(date, 'D') === '2013年3月28日');
            assert.ok(formatter.format(date, 'M') === '3月28日');
            assert.ok(formatter.format(date, 'Y') === '2013年3月');
            assert.ok(formatter.format(date, 't') === '14:10');
            assert.ok(formatter.format(date, 'T') === '14:10:30');
            assert.ok(formatter.getCulture() === 'ja-JP');
            next();
        });
    });

    it('ja_JP formatter: JP', function (next) {
        var formatter = Locale.formatter('JP', 'ja-JP'),
            date = new Date(2013, 2, 28, 14, 10, 30);

        assert.ok(formatter.format(100, 'n') === '100.00');
        assert.ok(formatter.format(1000, 'n') === '1,000.00');
        assert.ok(formatter.format(100, 'c') === '¥100');
        assert.ok(formatter.format(1000, 'c') === '¥1,000');
        assert.ok(formatter.formatCurrency(1000) === '¥1,000');
        assert.ok(formatter.format(date, 'd') === '2013/03/28');
        assert.ok(formatter.format(date, 'f') === '2013年3月28日 14:10');
        assert.ok(formatter.format(date, 'F') === '2013年3月28日 14:10:30');
        assert.ok(formatter.format(date, 'D') === '2013年3月28日');
        assert.ok(formatter.format(date, 'M') === '3月28日');
        assert.ok(formatter.format(date, 'Y') === '2013年3月');
        assert.ok(formatter.format(date, 't') === '14:10');
        assert.ok(formatter.format(date, 'T') === '14:10:30');
        assert.ok(formatter.getCulture() === 'ja-JP');
        next();
    });

    it('he_IL formatter: IL', function (next) {
        var formatter = Locale.formatter('IL', 'he-IL'),
            date = new Date(2013, 2, 28, 14, 10, 30);

        assert.ok(formatter.format(100, 'n') === '100.00');
        assert.ok(formatter.format(1000, 'n') === '1,000.00');
        assert.ok(formatter.format(100, 'c') === '₪ 100.00');
        assert.ok(formatter.format(1000, 'c') === '₪ 1,000.00');
        assert.ok(formatter.formatCurrency(1000) === '₪ 1,000.00');
        assert.ok(formatter.formatCurrency(1000, 'EUR') === '€ 1,000.00');
        assert.ok(formatter.formatCurrency(1000, 'USD') === '$ 1,000.00');
        assert.ok(formatter.format(date, 'd') === '28/03/2013');
        assert.ok(formatter.format(date, 'f') === 'יום חמישי 28 מרץ 2013 14:10');
        assert.ok(formatter.format(date, 'F') === 'יום חמישי 28 מרץ 2013 14:10:30');
        assert.ok(formatter.format(date, 'D') === 'יום חמישי 28 מרץ 2013');
        assert.ok(formatter.format(date, 'M') === '28 מרץ');
        assert.ok(formatter.format(date, 'Y') === 'מרץ 2013');
        assert.ok(formatter.format(date, 't') === '14:10');
        assert.ok(formatter.format(date, 'T') === '14:10:30');
        assert.ok(formatter.parseDate('יום שישי 21 דצמבר 2012').getMonth() === 11);
        assert.ok(formatter.getCulture() === 'he-IL');
        next();
    });

    it('da_DK formatter: DK', function (next) {
        var formatter = Locale.formatter('DK', 'da-DK'),
            date = new Date(2013, 2, 28, 14, 10, 30);

        assert.ok(formatter.getCulture() === 'da-DK');
        assert.ok(formatter.format(100, 'n') === '100,00');
        assert.ok(formatter.format(1000, 'n') === '1.000,00');
        assert.ok(formatter.formatCurrency(1000, 'USD') === '$ 1.000,00');
        assert.ok(formatter.format(date, 'd') === '28.03.2013');
        next();
    });

    it('pl-PL formatter: PL', function (next) {
        var formatter = Locale.formatter('PL', 'pl-PL'),
            date = new Date(2013, 2, 28, 14, 10, 30);

        assert.ok(formatter.getCulture() === 'pl-PL');
        assert.ok(formatter.format(100, 'n') === '100,00');
        assert.ok(formatter.format(1000, 'n') === '1 000,00');
        assert.ok(formatter.formatCurrency(1000, 'USD') === '1 000,00 $');
        assert.ok(formatter.format(date, 'd') === '28.03.2013');
        next();
    });

    it('Currency Symbols from Currency Code', function (next) {
        assert.ok(Locale.getCurrencySymbol('USD') === '$');
        assert.ok(Locale.getCurrencySymbol('EUR') === '€');
        assert.ok(Locale.getCurrencySymbol('GBP') === '£');
        assert.ok(Locale.getCurrencySymbol('INR') === '₹');
        assert.ok(Locale.getCurrencySymbol('ILS') === '₪');
        assert.ok(Locale.getCurrencySymbol('JPY') === '¥');
        assert.ok(Locale.getCurrencySymbol('CAD') === '$');

        next();
    });

    it('Calendar from culture', function (next) {
        var frenchCalendar = Locale.getCalendar('fr-FR'),
            arabicCalendar = Locale.getCalendar('ar-AE');

        assert.ok(frenchCalendar.months.names.length === 12);
        assert.ok(frenchCalendar.months.names[0] === 'janvier');
        assert.ok(arabicCalendar.months.names[0] === 'يناير');

        next();
    });

});