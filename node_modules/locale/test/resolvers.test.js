'use strict';

var assert = require('assert'),
    tryRequire = require('try-require'),
    cal = tryRequire('cal'),
    Locale = require('../index'),
    testUtils = require('./fixtures/utils'),
    locale;

if (cal) {
    cal.setDefaultWriteStream('console');
    cal.defaults.formatter = cal.formatter.silent;
}

describe('Resolvers', function () {

    beforeEach(function (next) {
        locale = Locale({locales: ['US']});
        next();
    });

    it('Register a resolver first', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'US'};

        Locale.registerDeterminer.country.first({

            name: 'viaFoo',
            desc: 'Return a custom country',

            method: function (req) {
                return 'GB';
            }
        });

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'GB');
            assert.ok(locality.locale === 'en_GB');
            assert.ok(locality.culture === 'en-GB');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'GB');

            Locale.removeDeterminer.country('viaFoo');
            next();
        });
    });

    it('Register a resolver after another', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'US'};

        Locale.registerDeterminer.country.first({

            name: 'viaFoo',
            desc: 'Return a custom country',

            method: function (req) {
                return null;
            }
        });

        Locale.registerDeterminer.country.after('viaFoo', {

            name: 'viaBar',
            desc: 'Return a custom country',

            method: function (req) {
                return 'GB';
            }
        });

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'GB');
            assert.ok(locality.locale === 'en_GB');
            assert.ok(locality.culture === 'en-GB');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'GB');

            Locale.removeDeterminer.country('viaFoo');
            Locale.removeDeterminer.country('viaBar');

            next();
        });
    });

    it('Register a resolver before another', function (next) {
        var req = testUtils.injectRequest(),
            res = testUtils.injectResponse(req);

        req.query = {'country.x' : 'US'};

        Locale.registerDeterminer.country.first({

            name: 'viaFoo',
            desc: 'Return a custom country',

            method: function (req) {
                return 'US';
            }
        });

        Locale.registerDeterminer.country.before('viaFoo', {

            name: 'viaBar',
            desc: 'Return a custom country',

            method: function (req) {
                return 'GB';
            }
        });

        locale(req, res, function () {
            var locality = req.locality;
            assert.ok(locality.country === 'GB');
            assert.ok(locality.locale === 'en_GB');
            assert.ok(locality.culture === 'en-GB');
            assert.ok(locality.language === 'en');
            assert.ok(locality.getCountrySpecifics().getCountryCode() === 'GB');

            Locale.removeDeterminer.country('viaFoo');
            Locale.removeDeterminer.country('viaBar');

            next();
        });
    });

});