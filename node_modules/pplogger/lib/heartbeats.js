'use strict';


var cal = require('cal'),
    os = require('os');

var HEARTBEAT_INTERVAL = 60000, //1min
    mStats,
    mPayloadHg;

/**
 * By Default configured to collect Heartbeats every 1min.
 */
function HeartBeats(config, stats, payloadHg) {
    config = config || {};

    mStats = stats;
    mPayloadHg = payloadHg;

    if (process.env.DEPLOY_ENV) {
        setInterval(this.beat, HEARTBEAT_INTERVAL);
    }
}

var proto = HeartBeats.prototype;

/**
 * Collects heartbeat metrics
 * SYSTEM - System level stats
 * REQUEST - Request level stats
 * CONTENT-LENGTH - Histogram stats for content length of incoming requests.
 */
proto.beat = function () {
    var memoryUsage = process.memoryUsage(),
        loadavg = os.loadavg();

    var sysHb = cal.createHeartbeat('STATE', 'PROCESS');
    sysHb.addData({
        'pid': process.pid,
        'freemem': os.freemem(),
        'rss': memoryUsage.rss,
        'heapTotal': memoryUsage.heapTotal,
        'heapUsed': memoryUsage.heapUsed,
        'os_loadavg1': loadavg[0],
        'os_loadavg5': loadavg[1],
        'os_loadavg15': loadavg[2]
    });
    sysHb.complete();

    var stats = mStats && mStats.toJSON(),
        rpsStats = stats && stats.rps;

    if (rpsStats && rpsStats.currentRate > 1) {
        var reqHb = cal.createHeartbeat('STATE', 'REQUEST');
        reqHb.addData({
            'mean': rpsStats.mean,
            'currentRate': rpsStats.currentRate,
            '1minRate': rpsStats['1MinuteRate'],
            '5minRate': rpsStats['5MinuteRate'],
            '15minRate': rpsStats['15MinuteRate']
        });
        reqHb.complete();

        var payloadHg = mPayloadHg && mPayloadHg.toJSON();

        if (payloadHg && payloadHg.mean) {
            var contentSizeHb = cal.createHeartbeat('STATE', 'CONTENT-LENGTH');
            contentSizeHb.addData({
                'max': payloadHg.max,
                'mean': payloadHg.mean,
                'median': payloadHg.median,
                'p75': payloadHg.p75,
                'p95': payloadHg.p95,
                'p99': payloadHg.p99,
                'p999': payloadHg.p999
            });
            contentSizeHb.complete();
        }
    }

};

module.exports = HeartBeats;
