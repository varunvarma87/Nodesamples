'use strict';


var cal = require('cal'),
    levels = require('./levels');

var timer = {
        flush: function () {
            this._transaction.flush();
        },

        updateName: function (name) {
            if (name) {
                this._transaction.name = name;
            }
        },

        end: function (data, err, status) {
            if (this._completed) {
                return;
            }
            if (data) {
                this._transaction.addData(data);
            }

            if (err) {
                this._transaction.addData(err);
            }

            this._transaction.status = status || 0;
            this._transaction.complete();
            this._completed = true;
        }
    };



function Profiler(config) {
    config = config || {};

    this._level = config.level || levels.debug;
}

/**
 * This will be called only for URL root Transaction
 */
Profiler.prototype.txnTimeStart = function time(req, name, data, type) {
    if (this._level > levels.info) {
        return null;
    }

    var timers = req._timers || (req._timers = {}),
        txnType = type || 'CALL_A',
        txn = cal.createTransaction(txnType, name);

    //In case of timer, flushing the 't' Transaction Event immediately
    txn.threadId = req.threadId;
    txn.flush();

    txn.correlationId = req.correlationId;

    if (data) {
        txn.addData(data);
        var params = {
            "log_id_": req.pageStartTime ? req.pageStartTime.toString(16) : "",
            "application_name": req.appName ? req.appName : ""
        };
        txn.addData(params);
    }

    timers[name] = Object.create(timer, {
        _transaction: {
            value: txn
        }
    });

    return timers[name];
};

Profiler.prototype.time = function time(req, name, data, type) {
    if (this._level > levels.info) {
        return null;
    }

    var timers = req._timers || (req._timers = {}),
        txnType = type || 'CALL_A',
        txn = cal.createTransaction(txnType, name);

    txn.correlationId = req.correlationId;
    txn.threadId = req.threadId;

    if (data) {
        txn.addData(data);
    }

    timers[name] = Object.create(timer, {
        _transaction: {
            value: txn
        }
    });

    return timers[name];
};

Profiler.prototype.timeEnd = function timeEnd(req, name, data, error, status) {
    if (this._level > levels.info) {
        return null;
    }

    var reqTimer = req._timers[name];

    if (reqTimer) {
        reqTimer.end(data, error, status);
    }
};


Profiler.prototype.profile = function profile(req, obj, method) {
    if (this._level > levels.info) {
        return null;
    }

    var orig = obj[method];

    obj[method] = function () {
        var args, callback;

        args = arguments;
        callback = args[args.length - 1];

        if (typeof callback === 'function') {
            req.time(method);

            args[args.length - 1] = function () {
                req.timeEnd(method);
                callback.apply(undefined, arguments);
                obj[method] = orig;
            };
        }

        orig.apply(obj, args);
    };
};


module.exports = Profiler;
