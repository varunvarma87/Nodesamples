/*global describe:false, it:false, before:false, after:false*/
'use strict';

var objutil = require('../index'),
    util = require('util'),
    assert = require('assert');


describe('deepMerge', function () {

    it('should handle primitives', function () {
        var src, dest;

        src = { foo: 'foo', bar: 'bar', baz: 'baz' };
        dest = { bam: 'bam' };

        objutil.deepMerge(src, dest);
        assert.strictEqual(src.foo, dest.foo);
        assert.strictEqual(src.bar, dest.bar);
        assert.strictEqual(src.baz, dest.baz);
        assert.strictEqual(src.bam, undefined);
        assert.strictEqual(dest.bam, 'bam');
    });


    it('should handle null', function () {
        var src, dest;

        src = { foo: null, bar: 'bar', baz: 'baz' };
        dest = objutil.deepMerge(src, { bam: 'bam' });

        assert.strictEqual(src.foo, dest.foo);
        assert.strictEqual(src.bar, dest.bar);
        assert.strictEqual(src.baz, dest.baz);
        assert.strictEqual(src.bam, undefined);
        assert.strictEqual(dest.bam, 'bam');
    });


    it('should handle undefined', function () {
        var src, dest;

        src = { foo: undefined, bar: 'bar', baz: 'baz' };
        dest = objutil.deepMerge(src, { bam: 'bam' });

        assert.strictEqual(src.foo, dest.foo);
        assert.strictEqual(src.bar, dest.bar);
        assert.strictEqual(src.baz, dest.baz);
        assert.strictEqual(src.bam, undefined);
        assert.strictEqual(dest.bam, 'bam');
    });


    it('should handle object references', function () {
        var src, dest;

        src = {
            foo: 'foo',
            bar: false,
            baz: 0xff,
            bam: {
                what: 'does',
                the: 'fox',
                say: '?'
            },
            bark: {
                woof: 'woof'
            },
            arr: [0x00, 0x01, 0x02]
        };

        dest = {
            yip: 'yeeeee',
            bark: {
                cha: 'cha cha cha cha chow'
            }
        };

        dest = objutil.deepMerge(src, dest);

        assert.ok(dest.bam);
        assert.strictEqual(src.foo, dest.foo);
        assert.strictEqual(src.bar, dest.bar);
        assert.strictEqual(src.baz, dest.baz);


        // should be cloned, not copied by reference
        assert.ok(dest.bam !== src.bam);
        assert.strictEqual(src.bam.what, dest.bam.what);
        assert.strictEqual(src.bam.the, dest.bam.the);
        assert.strictEqual(src.bam.say, dest.bam.say);

        // should be left alone
        assert.ok(src.bark !== dest.bark);
        assert.strictEqual(dest.bark.cha, 'cha cha cha cha chow');
        assert.strictEqual(dest.bark.woof, 'woof');

        assert.ok(dest.arr);
        assert.ok(Array.isArray(dest.arr));
        assert.ok(src.arr !== dest.arr);
        assert.ok(src.arr.length === dest.arr.length);

    });

});