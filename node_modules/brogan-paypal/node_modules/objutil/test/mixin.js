/*global describe:false, it:false, before:false, after:false*/
'use strict';

var objutil = require('../index'),
    assert = require('assert');


describe('mixin', function () {

    var src = {
        foo: 'foo',
        bar: { foo: 'foo' },
        baz: ['foo']
    };

    var src2 = {
        foo2: 'foo',
        bar2: { foo: 'foo' },
        baz2: ['foo']
    };

    var getset = {
        get foo () {
            return 'foo'
        }
    };

    it('should copy properties from one object to another', function () {
        var dest = {};
        objutil.mixin(src, dest);
        assert(dest);
        assert(dest !== src);
        assert.strictEqual(dest.foo, src.foo);
        assert.strictEqual(dest.bar, src.bar);
        assert.strictEqual(dest.baz, src.baz);
    });


    it('should return the mixin', function () {
        var dest = {};
        var same = objutil.mixin(src, dest);
        assert(same);
        assert(dest !== src);
        assert(same !== src);
        assert.strictEqual(dest, same);
        assert.strictEqual(dest.foo, src.foo);
        assert.strictEqual(dest.bar, src.bar);
        assert.strictEqual(dest.baz, src.baz);
    });


    it('should handle multiple sources', function () {
        var dest = {};
        objutil.mixin(src, src2, dest);
        assert(dest !== src);
        assert(dest !== src2);
        assert.strictEqual(dest.foo, src.foo);
        assert.strictEqual(dest.bar, src.bar);
        assert.strictEqual(dest.baz, src.baz);
        assert.strictEqual(dest.foo2, src2.foo2);
        assert.strictEqual(dest.bar2, src2.bar2);
        assert.strictEqual(dest.baz2, src2.baz2);
    });

    it('should overwrite existing properties', function () {
        var dest = { foo: 'bar' };
        objutil.mixin(src, dest);
        assert(dest !== src);
        assert.strictEqual(dest.foo, src.foo);
    });


    it('should copy getters and setters', function () {
        var dest = objutil.mixin(getset, {});
        assert(dest !== getset);
        assert.strictEqual(dest.foo, getset.foo);
    });

});