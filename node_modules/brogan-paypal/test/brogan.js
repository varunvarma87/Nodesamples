/*global describe:false, it:false, before:false, after:false, beforeEach:false, afterEach:false*/
'use strict';

var brogan = require('../lib/brogan'),
    confit = require('confit'),
    kraken = require('kraken-js'),
    express = require('express'),
    http = require('http'),
    assert = require('chai').assert;


describe('brogan', function () {

    describe('onConfig', function () {

        var info, cwd;


        before(function (done) {
            cwd = process.cwd();
            process.chdir('./test/fixtures');
            confit({ basedir: './config' }).create(function (error, store) {
                assert.ok(!error);
                assert.ok(store);
                done();
            });
        });


        beforeEach(function () {
            info = [];
        });


        after(function () {
            info = undefined;
            process.chdir(cwd);
        });

        it('should wrap passed options, providing default onconfig and protocols.', function() {
            var options = brogan();

            assert.ok(options);
            assert.strictEqual(typeof options, 'object');
            assert.strictEqual(typeof options.onconfig, 'function');
            assert.ok(options.protocols);
            assert.ok(options.protocols.vault);
            assert.strictEqual(typeof options.protocols.vault, 'function');
        });

    });

    describe('used with kraken, has required configs populated', function () {

        var cwd, app, server;

        before(function(done) {
            this.timeout(15000);
            cwd = process.cwd();
            process.env.NODE_ENV = '';
            process.env.SHARE_PWD = 'aardvark';
            process.chdir('./test/fixtures');

            var options = {
                onconfig: function(config, next) {
                    assert.ok(config);
                    assert.ok(next);
                    next(null, config);

                    done();
                },
                basedir: './'
            };

            app = express();
            app.use(kraken(brogan(options)));

            server = http.createServer(app);

            server.listen(8000, function (err) {
                assert.ok(!err);
            });
        });

        after(function (done) {
            process.chdir(cwd);
            server.close(done);
        });

        it('should populate brogan defaults', function () {
            assert.ok(app.kraken.get('mayfly'));
            assert.ok(app.kraken.get('mayfly:cryptKey'));
            assert.ok(app.kraken.get('mayfly:macKey'));
            assert.ok(app.kraken.get('rlogId'));
            assert.ok(app.kraken.get('rlogId:cryptKey'));
            assert.ok(app.kraken.get('rlogId:macKey'));
            assert.ok(app.kraken.get('ssl'));
            assert.ok(app.kraken.get('services'));
            assert.ok(app.kraken.get('services:servicecore'));
            assert.ok(app.kraken.get('services:servicecore:sessions'));
        });
    });

    describe('should setup vault options in deploy environment.', function () {
        var cwd;

        before(function(done) {
            this.timeout(8000);
            cwd = process.cwd();
            process.env.NODE_ENV = '';
            process.env.DEPLOY_ENV = 'live';
            process.env.SHARE_PWD = 'aardvark';
            process.chdir('./test/fixtures');
            done();
        });

        after(function (done) {
            process.chdir(cwd);
            done();
        });

        it('should populate brogan vault options', function () {
            var options = brogan();

            assert.ok(options);
            assert.ok(options.vault);
            assert.strictEqual(options.vault.name, 'testApp');
            assert.strictEqual(options.vault.env, 'live');
        });
    });
});
