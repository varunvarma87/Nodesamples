'use strict';

var path = require('path'),
    tryRequire = require('try-require'),
    root = process.cwd(),
    metaJson = tryRequire(path.join(root, 'manifest.json')),
    cal = tryRequire('cal');

function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getYear() % 100, d.getMonth() + 1, d.getDate() ].join('-') + ':' + time;
}

function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

function defaultUncaughtListener(e) {
    var calEvent;
    if (cal) {
        calEvent = cal.createEvent('SIGTERM', 'uncaughtException');
        calEvent.status = cal.Status.ERROR;
        calEvent.addData(e && e.stack || e);
        calEvent.complete();
    }
    console.error(timestamp(), 'SIGTERM', 'uncaughtException', e && e.stack || e || '');
    //signaling SIGTERM if no app listener
    process.emit('SIGTERM');
}



if (!process.listeners('uncaughtException').length) {
    var clusterInstance = metaJson && metaJson.info && metaJson.info.clusterInstance || '1',
        isClusterOn = (+clusterInstance !== 0 && +clusterInstance !== 1);

    if (isClusterOn) {
        //Attaching defaultUncaughtListener if no other uncaughtException handler
        // and is running more than 1 node processes
        process.on('uncaughtException', defaultUncaughtListener);
    }
}