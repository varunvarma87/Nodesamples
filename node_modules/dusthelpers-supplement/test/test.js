var should = require('should'),
	dust = require('dustjs-linkedin'),
	helpers = require('dustjs-helpers'),
	assert = require('assert'),
	path = require('path'),
	link = require('../index');
link(dust); // register helper

var mypath = "a/b/c";
var np = path.join.apply(null, mypath.split('/'));
// Ensure we're in the `test` environment.
process.env.NODE_ENV = 'test';

function runit(tmpl, model, callback) {
	var compiled = dust.compile(tmpl, "test");
	dust.loadSource(compiled);
	var out = dust.render("test", model, function (err, result) {
		return callback(null, result);
	});
}


// Generate purely relative link, e.g. <form action="a/b">. Note that there is no point
// using the helper for this case since the helper is a NOP. Just write the relative link
// and it will work on a stage, live, or sandbox.
describe('PayPal dust helper tests', function () {
	it('relative link test', function (done) {
		var tmpl = '{@link href="a/b" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.paypal.com"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('a/b');
			done();
		});
	});

	// Generate server relative link. This retains host information but we must regen the cobrand
	// if there is one to retain it. Example: <form action="/a/b">
	it('server relative link test', function (done) {
		var tmpl = '{@link href="/a/b" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.paypal.com"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('/a/b');
			done();
		});
	});

	it('localhost test', function (done) {
		var tmpl = '{@link href="a/b" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.paypal.com"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('a/b');
			done();
		});
	});

	// Generate server relative localhost link. This retains host information but we must regen the cobrand
	// if there is one to retain it. Example: <form action="/a/b">
	it('server relative link test for localhost', function (done) {
		var tmpl = '{@link href="/a/b" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "localhost.paypal.com"
				},
				"locality": {
					"host": "localhost.paypal.com",
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('/a/b');
			done();
		});
	});

	// Test case where cobrand is not known. Equivalent to BASIC_NOLOCALE from Sparta days.
	// except we generate  server relative URL rather than absolute.
	it('server relative link test no cobrand', function (done) {
		var tmpl = '{@link href="/a/b" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.paypal.com"
				},
				"locality": {
					"locale": "en_US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('/a/b');
			done();
		});
	});

	// Test case where no sys data in model
	it('server relative link test no cobrand', function (done) {
		var tmpl = '{@link href="/a/b" /}';
		var model = {};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('/a/b');
			done();
		});
	});

	it('server relative link test with upper case country and cobrand activated', function (done) {
		var tmpl = '{@link href="/a/b" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.paypal.com"
				},
				"locality": {
					"locale": "fr_FR",
					"cobrand": "FR",
					"country": "FR"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('/fr/a/b');
			done();
		});
	});

	it('paypalobjects link test for live', function (done) {
		var tmpl = '{@link href="/js/b.js" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.paypal.com"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('https://www.paypalobjects.com/js/b.js');
			done();
		});
	});

	it('paypalobjects relative link test for live', function (done) {
		var tmpl = '{@link href="js/b.js" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.paypal.com"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('https://www.paypalobjects.com/js/b.js');
			done();
		});
	});

	it('paypalobjects relative link test for stage case', function (done) {
		var tmpl = '{@link href="js/b.js" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.stage2dev007.qa.com"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('https://www.stage2dev007.qa.com/js/b.js');
			done();
		});
	});

	it('paypalobjects relative link test for stage with port', function (done) {
		var tmpl = '{@link href="js/b.js" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.stage2dev007.qa.com:8000"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('https://www.stage2dev007.qa.com/js/b.js');
			done();
		});
	});

	it('paypalobjects relative link test for OPEN SHIFT stage', function (done) {
		var tmpl = '{@link href="js/b.js" /}';
		process.env.DEPLOY_ENV = "staging";
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.5152364883474483.qa.com"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('https://www.5152364883474483.qa.com/js/b.js');
			done();
		});
	});

	it('paypalobjects no sys data for locale', function (done) {
		var tmpl = '{@link href="js/b.js" /}';
		var model = {};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('https://www.paypalobjects.com/js/b.js');
			done();
		});
	});

	it('paypalobjects relative link test for sandbox', function (done) {
		var tmpl = '{@link href="js/b.js" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.sandbox.paypal.com"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('https://www.sandbox.paypal.com/js/b.js');
			done();
		});
	});

	it('paypalobjects relative link test for sandbox with port', function (done) {
		var tmpl = '{@link href="js/b.js" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.sandbox.paypal.com:8000"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('https://www.sandbox.paypal.com/js/b.js');
			done();
		});
	});

	it('paypalobjects server relative link test for sandbox', function (done) {
		var tmpl = '{@link href="/js/b.js" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.sandbox.paypal.com"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('https://www.sandbox.paypal.com/js/b.js');
			done();
		});
	});

	it('paypalobjects server relative link test for sandbox with port', function (done) {
		var tmpl = '{@link href="/js/b.js" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.sandbox.paypal.com:8000"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('https://www.sandbox.paypal.com/js/b.js');
			done();
		});
	});

	it('Missing href', function (done) {
		var tmpl = '{@link junk="r/s/t" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.sandbox.paypal.com"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('');
			done();
		});
	});


	// Generate sample links of other types for demo. webscr command
	it('webscr link test', function (done) {
		var tmpl = '{@link href="/cgi-bin/webscr?cmd=_sendMoney" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.paypal.com"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('/cgi-bin/webscr?cmd=_sendMoney');
			done();
		});
	});

	// Test that command with query string ending with extension is treated as a command
	it('command ending with querystring with extension appearance', function (done) {
		var tmpl = '{@link href="/cgi-bin/webscr?cmd=_sendMoney&image=aa.gif" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.paypal.com"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('/cgi-bin/webscr?cmd=_sendMoney&image=aa.gif');
			done();
		});
	});

	// Test that command ending with an extension like .do can be forced to command type
	it('command ending with extension being forced to command type', function (done) {
		var tmpl = '{@link href="/cgi-bin/webscr/stuff.do" type="command"/}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.paypal.com"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('/cgi-bin/webscr/stuff.do');
			done();
		});
	});

	// Generate sample links of other types for demo. Sparta command
	it('sparta link test', function (done) {
		var tmpl = '{@link href="/webapps/SpartaReferenceApp/aaa" /}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.paypal.com"
				},
				"locality": {
					"locale": "en_US",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('/webapps/SpartaReferenceApp/aaa');
			done();
		});
	});

	it('test it works when nested', function (done) {
		var tmpl = '{#section}{@link href="/a/b" /}{/section}';
		var model = {
			"section": ['1'],
			"context": {
				"pageInfo": {
					"hostName": "www.paypal.com"
				},
				"locality": {
					"locale": "en_US",
					"cobrand": "FR",
					"country": "US"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('/fr/a/b');
			done();
		});
	});

	it('test adding cobrand if required', function (done) {
		var tmpl = '{@link href="/{context.locality.country}/a/b" /}';
		var model = {
				"context": {
					"pageInfo": {
						"hostName": "www.paypal.com"
					},
					"locality": {
						"locale": "en_US",
						"country": "US"
					}
				}
			};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('/US/a/b');
			done();
		});
	});

	// Test case where cobrand is ignored if defined and overridden
	// by the value provided.
	it('test adding cobrand override', function (done) {
		var tmpl = '{@link href="/a/b" cobrand="US"/}';
		var model = {
			"context": {
				"pageInfo": {
					"hostName": "www.paypal.com"
				},
				"locality": {
					"locale": "fr_FR",
					"cobrand": "FR",
					"country": "FR"
				}
			}
		};
		var out = runit(tmpl, model, function (err, out) {
			out.should.equal('/us/a/b');
			done();
		});
	});
});
