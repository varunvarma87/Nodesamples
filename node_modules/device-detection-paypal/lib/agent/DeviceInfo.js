'use strict';

var useragent = require('express-useragent');
var _ = require('underscore');

var TV_PATTERN = /GoogleTV|SmartTV|Internet TV|NetCast|NETTV|AppleTV|boxee|Kylo|Roku|DLNADOC|CE\\-HTML|Xbox|PLAYSTATION 3|Wii/i;
var TOUCH_SCREEN_PATTERN = /iphone|ip(a|o)d|android|xoom|playbook|tablet|bb10|lumia|windows .* touch/i;

var params = ['isTouchScreen', 'isTV', 'isTablet', 'isMobile', 'isRobot', 'isDesktop',
            'osName', 'deviceOS', 'browserVersion', 'browserName', 'browser',
            'fallback'];

var DeviceInfo = module.exports = function DeviceInfo(uaString) {
    this._uaString = uaString;
    this._ua = useragent.parse(uaString);
};

DeviceInfo.prototype = {
    get isTouchScreen() {
        if (typeof this._isTouchScreen === 'undefined') {
            this._isTouchScreen = TOUCH_SCREEN_PATTERN.test(this._uaString);
        }
        return this._isTouchScreen;
    },

    get isTV() {
        if (typeof this._isTV === 'undefined') {
            this._isTV = TV_PATTERN.test(this._uaString);
        }
        return this._isTV;
    },

    get isTablet() {
        return this._ua.isTablet;
    },

    get isMobile() {
        return this._ua.isMobile;
    },

    get isRobot() {
        return this._ua.isBot;
    },

    get osName() {
        return this._ua.os || this._ua.OS;
    },

    get deviceOS() {
        var ua = this._ua;
        var dos = this.osName;
        if (ua.isMobile || ua.isTablet) {
            if (ua.isAndroid) {
                dos = 'Android';
            }
            else if (ua.isiPhone || ua.isiPad || ua.isiPod) {
                dos = 'iOS';
            }
            else if (ua.isWindowsPhone) {
                dos = 'Windows Phone';
            }
            else if (ua.isBlackberry) {
                dos = 'RIM';
            }
        }
        else if (ua.isBot) {
            dos = 'bot';
        }
        return dos;
    },

    get browserVersion() {
        return this._ua.version || this._ua.Version;
    },

    get isDesktop() {
        return this._ua.isDesktop && !this.isTV;
    },

    get browser() {
        return this._ua.browser || this._ua.Browser;
    },

    get browserName() {
        return this.browser;
    },

    get fallback() {
        return true;
    }

};

module.exports.detect = function (uaString) {
    var ua = new DeviceInfo(uaString);

    return _.reduce(params, function (memo, key) {
        if (key.indexOf('_') !== 0) {
            memo[key] = ua[key];
        }

        return memo;
    }, {});
};
