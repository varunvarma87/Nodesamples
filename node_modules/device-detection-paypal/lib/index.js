/*global escape: true */
'use strict';

var servicecore = require('servicecore');
var querystring = require('querystring');
var DeviceDetClient = require('./DeviceDetClient');
var debug = require('debug')('device-detection-paypal:index');
var deviceInfo = require('./agent/DeviceInfo');
var userAgentCodes = require('./agent/userAgentCodes');
var _ = require('underscore');

servicecore.register('device-detection-paypal', DeviceDetClient);

var deviceDetectionClient; //Serive Client/Invoker


function getDeviceInfo(useragent, callback) {

    var params = { userAgent : useragent };

    if (debug.enabled) {
        debug('user agent param :', params);
    }

    if (!deviceDetectionClient) {
        deviceDetectionClient = servicecore.create('device-detection-paypal');
    }
    var paramsStr;

    paramsStr = querystring.stringify(params);

    deviceDetectionClient.getDeviceInfo(paramsStr, function (error, deviceInfoResult) {
        if (error || !(deviceInfoResult && deviceInfoResult.browserName)) {
            debug('service issue, fallback to express-useragent');
            deviceInfoResult = deviceInfo.detect(params.userAgent);
        }
        if (deviceInfoResult) {
            userAgentCodes(deviceInfoResult);
        }
        callback && callback(error, deviceInfoResult);
    });

}

function _getUserAgent(req) {
    var userAgent = (req && req.headers && req.headers['user-agent']) || '';
    return userAgent;
}

function middleware() {

    return function detectDevice(req, res, next) {

        if (req.deviceInfo || req.session && req.session._shared && req.session._shared.deviceInfo) {
            // avoid multiple service calls within same req and across session
            req.deviceInfo = req.deviceInfo || req.session && req.session._shared && req.session._shared.deviceInfo;
            next();
            return;
        }

        getDeviceInfo(_getUserAgent(req), function (error, deviceInfoResult) {
            if (req && deviceInfoResult) {
                //Cleanup the status property in the response
                if (deviceInfoResult.status) {
                    delete deviceInfoResult.status;
                }
                req.deviceInfo = deviceInfoResult;
                req.session = req.session || {};
                req.session._shared = req.session._shared || {};
                req.session._shared.deviceInfo = req.deviceInfo;
            }
            next();
        });

    };
}

module.exports = {
    middleware: middleware,
    getDeviceInfo : getDeviceInfo
};
