/*global describe:true, require:true, it:true , console.:true*/
'use strict';

var assert = require('assert'),
	nconf = require('nconf'),
	account = {
		accountNumber: '1453934342486834929',   // tamahmed-usbml@paypal.com
		id: '342387'
	},
	param = {
		id: 1453934342486834929
	},
	should = require('should'),
	servicecore = require('servicecore');

servicecore.register('fimanagementservice_ca', require('../index'));

nconf.file({ file: './test/config.json' });

servicecore.configuration = nconf.get('services');

var fimanagementserviceLib = servicecore.create('fimanagementservice_ca');

describe('FimanagementServiceLib Tests', function () {

	it('should test a call to getCardAccounts ', function (done) {
		this.timeout(50000);

		var callback = function (err, result) {
			if (!err) {
				result.should.have.property('statusCode');
			}
			done();
		};

		var result = fimanagementserviceLib.invoke('getCardAccounts',account, callback);
	});

	it('should test a call to getPreferences', function (done) {
		this.timeout(50000);

		var callback = function (err, result) {
			if (!err) {
				result.should.have.property('statusCode');
			}
			done();
		};

		var result = fimanagementserviceLib.getPreferences(account, param, callback);
	});

	it('should test a call to getCreditProductAccounts', function (done) {
		this.timeout(50000);

		var callback = function (err, result) {
			result.statusCode.should.equal(200);

			var creditAccounts = result.body.credit_accounts;
			creditAccounts.should.be.instanceOf(Array);

			var item = creditAccounts[0];
			item.type.should.equal('TXN_CARD_BML');
			item.issuer_reference_number.should.equal('Q6CH55JGM6EYN');

			done();
		};

		fimanagementserviceLib.getCreditProductAccounts(account, {}, callback);
	});

});

