/**
 *
 *  Analytics Middleware
 *  builds data for
 *      1. Client side FPTI
 *      2. Site Catalyst
 *  Makes a Server side FPTI call
 *
 */
'use strict';

var async =  require('async'),
    extend = require('extend'),
    debug = require('debug')('analytics'),
    servicecore = require('servicecore'),
    FptiService = require('./fptiService'),
    modConfig = require('module-config-paypal'),
    BuznameRegistry = require('./buznames/index'),
    SiteCatalystModel = require('./models/sitecatalyst'),
    FptiModel = require('./models/fpti'),
    cookieHelper = require('./utils/cookie-helper'),
    buznameRegistry;

var fptiService,
    analyticsModuleConfig,
    fptiServiceConfig;

servicecore.register('analytics', FptiService);

function _analytics(req, res, next) {
    var render = res.render,
        json = res.json,
        redirect = res.redirect;

    var user,
        appName,
        locality = req.locality,
        buzdata,
        pagename,
        pageToken,
        siteCatalystModel,
        fptiModel,
        doAnalytics;

    user = req.user;
    appName = req.appName;

    pageToken = appName + analyticsModuleConfig.templatePath;

    siteCatalystModel = new SiteCatalystModel(analyticsModuleConfig.sitecatalyst);
    siteCatalystModel.setUser(user);    //null check is in setUser
    siteCatalystModel.setCommons(req, locality);


    fptiModel = new FptiModel(analyticsModuleConfig.fpti);
    fptiModel.setUser(user);
    fptiModel.setCommons(req, locality);

    //Using public tracking url to record server side tracking as well
    var serverTracking = function (data) {
        if (!data) {
            return;
        }
        fptiService.serverTracking(data, function (e, body) {
            //do nothing, this is only one way request
            //In case of error servicecore will report the error
        });
        debug('firing fpti serverTracking beacon with payload: ', data);
        fptiModel.clearAdditionalServerSideData();
    };

    var tracking = {
        addData: function (fptiKey, siteCatalystKey, value) {
            if (fptiKey) {
                fptiModel.setAdditionalData(fptiKey, value);
            }
            if (siteCatalystKey) {
                siteCatalystModel.setAdditionalData(siteCatalystKey, value);
            }
        },
        addServerSideFptiData: function () {
            //takes (key, value) or (object) as argument
            var args = Array.prototype.slice.call(arguments);
            if (args.length === 1 && typeof args[0] === 'object') {
                Object.keys(args[0]).forEach(function (key) {
                    fptiModel.setAdditionalServerSideData(key, args[0][key]);
                });
            } else if (args.length === 2) {
                fptiModel.setAdditionalServerSideData(args[0], args[1]);
            }
        },
        addServerSidePxpTags: function (exp_id, trtmnt_id) {
            //for experimentation module
            fptiModel.setPxpTags(exp_id, trtmnt_id);
        },
        addServiceError: function (errObj) {
            //for servicecore to register all the service errors
            fptiModel.setServiceError(errObj);
        },
        flushServerSide: function (jsonData) {
            if (jsonData) {
                Object.keys(jsonData).forEach(function (key) {
                    fptiModel.setAdditionalServerSideData(key, jsonData[key]);
                });
            }

            tracking.addServerSideFptiData(fptiModel.getDefaultServerData(req));
            serverTracking(fptiModel.getServerData());

        },
        addError: function (fieldId, errorMsg, errorCode) {
            fptiModel.addError(fieldId, errorMsg, errorCode);
            siteCatalystModel.addError(fieldId, errorMsg, errorCode);
        },
        setBusinessType : function (businessType) {
            fptiModel.setBusinessType(businessType);
            siteCatalystModel.setBusinessType(businessType);
        },
        setMerchantType : function (merchantType) {
            fptiModel.setMerchantType(merchantType);
        },
        getDefaultServerData: function () {
            return fptiModel.getDefaultServerData(req);
        }
    };

    req.tracking = tracking;

    /**
     * Analytics heavylifting
     */
    doAnalytics = function (view, options) {

        var tsrce;

        options = options || {};

        pagename = pageToken.replace(analyticsModuleConfig.viewNameToken, view);

        pagename = options.pagename || pagename;

        if (options.pageQualifier) {
            pagename += ':' + options.pageQualifier;
        }

        buzdata = buznameRegistry.getBuzname(pagename);

        siteCatalystModel.setBuznames(buzdata, pagename);

        fptiModel.setUser(user);              //for late user binding
        fptiModel.setCommons(req, locality);  //for late commons binding

        fptiModel.setBuznames(buzdata, pagename, options.pageQualifier);

        if (res.cookie) {
            tsrce = options.tsrce || req.appName;
            res.cookie('tsrce', tsrce, {
                secure: cookieHelper.isSecure(req),
                domain: cookieHelper.resolveDomain(req),
                httpOnly: true,
                path: '/',
                expires: new Date(Date.now() + 86400000)
            });
        }

        if (options.skipTracking && options.skipTracking === true) {
            //skipTracking won't make client side anlaytics call and
            // won't add analytics data in JSON response.
            delete options.skipTracking;
            debug('skipping tracking');
        } else {
            options.sys = options.sys || {};
            options.sys.tracking = {
                fpti : fptiModel.getData(),
                siteCatalyst : siteCatalystModel.getData()
            };
            var context = res.locals && res.locals.context;
            if (context) {
                for (var key in context) {
                    if (context.hasOwnProperty(key)) {
                        options.sys[key] = context[key];
                    }
                }
            }
            debug('fpti client payload: ', fptiModel.getData());
        }

        tracking.addServerSideFptiData(fptiModel.getDefaultServerData(req));
        serverTracking(fptiModel.getServerData());
    };

    /**
     *  Wrapping res.render function and adding the analytics capabilities
     */
    res.render = function () {
        var view,
            options,
            args = Array.prototype.slice.call(arguments);
        view = args[0];
        if (args.length >= 2 && typeof args[1] === 'object') {
            options = args[1];
        }
        options = options || res.locals;

        doAnalytics(view, options);
        render.apply(res, arguments);
    };

    /**
     *  Wrapping res.json function and adding the analytics capabilities
     */
    res.json = function () {
        var options,
            args = Array.prototype.slice.call(arguments);
        if (args.length === 2 && typeof args[1] === 'object') {
            options = args[1];
        } else {
            options = args[0] || res.locals || {};
        }

        doAnalytics(options.viewName || '', options);
        json.apply(res, arguments);
    };

    /**
     *  Wrapping res.redirect function and adding the analytics capabilities
     */
    res.redirect = function () {
        // skipping client side tracking for redirected requests
        doAnalytics('', { skipTracking: true });
        redirect.apply(res, arguments);
    };

    next();
}

/**
 * Initialize and cache config
 */
function _init(params, callback) {

    if (fptiService && analyticsModuleConfig && fptiServiceConfig) {
        return callback();
    } else {
        modConfig(module, function (err, config) {
            analyticsModuleConfig = config.get('analytics-paypal');
            extend(true, analyticsModuleConfig, params);
            fptiServiceConfig = config.get('services:analytics-paypal');
            fptiService = servicecore.create('analytics', fptiServiceConfig);
            return callback();
        });
    }

}

function _callAnalytics(req, res, params, next) {
    async.series([
            function init(cb) {
                _init(params, cb);
            }
        ],
        function (errors, result) {
            return _analytics(req, res, next);
        });
}

module.exports = function nodeAnalytics(options) {
    options = options || {};

    fptiService = null;
    analyticsModuleConfig = null;
    fptiServiceConfig = null;

    buznameRegistry = BuznameRegistry(options.buznameBasePath);

    return function analytics(req, res, next) {
            return _callAnalytics(req, res, options, next);
        };
};

module.exports.serverTracking = function serverTracking(data, callback) {
    async.series([
        function (cb) {
            _init(null, cb);
        }
    ],
    function () {
        if (!data) {
            return;
        }
        fptiService.serverTracking(data, function (e, body) {
            //Ideally should do nothing, this is only one way request
            //Ideally don't pass callback
            callback && callback();
        });
    });

};
