'use strict';

/**
 * Site Catalyst tracking model
 */

var analyticsHelper = require('../utils/analytics-helper'),
    SiteCatalystModel;

module.exports = SiteCatalystModel = function SiteCatalystModel(options) {
    options = options || {};
    this.jsFile = options.jsFile;
    this.suiteVar = options.suiteVar || 'paypalglobal'; //'paypalglobal' or 'devpaypalglobal'
    this.data = {};
    this.additionalData = {};

    //page technology
    this.set('s.prop71', 'Nodejs');
};

SiteCatalystModel.prototype = {
    set : function (key, value) {
        if (key && typeof value !== 'undefined') {
            this.data[key] = value;
        }
    },
    setAdditionalData : function (key, value) {
        if (key && typeof value !== 'undefined') {
            this.additionalData[key] = value;
        }
    },
    /**
     *  Populate the site catalyst data from buzname data
     */
    setBuznames : function (buzdata, pagename) {
        var flowEvent,
            flowgatename,
            flowname,
            templateName;
        if (buzdata) {
            templateName = buzdata.getTemplateName();
            //template name
            this.set('s.prop1', templateName);

            //page name
            this.set('s.pageName', buzdata.get('pagename') || templateName);
            this.set('s.eVar31', buzdata.get('pagename') || templateName);

            //page name + page version
            this.set('s.eVar25', buzdata.get('pagename2') || templateName);
            this.set('s.prop25', buzdata.get('pagename2') || templateName);

            //feature or site section
            this.set('s.channel', buzdata.get('feature'));

            //old page name
            this.set('s.prop51', buzdata.get('oldpagename'));

            //site hierarchy
            this.set('s.hier1', buzdata.get('hier1'));

            //user logged in
            this.set('s.prop35', buzdata.get('inout'));

            //page version
            this.set('s.prop37', buzdata.get('version'));

            //country of page
            this.set('s.prop30', buzdata.get('country'));

            //sub feature
            this.set('s.prop31', buzdata.get('subfeature1'));

            flowgatename = buzdata.get('flowgatename');
            flowname = buzdata.get('flowname');

            //flow gate name
            this.set('s.eVar2', flowgatename);

            if (flowgatename) {
                flowEvent = analyticsHelper.getFlowEvent(flowgatename);

                this.set('s.event', flowEvent.scEventName);

                if (flowEvent.isTransactionFlow) {
                    this.set('s.eVar18', flowname);
                } else if (flowEvent.isSignupFlow) {
                    this.set('s.eVar8', flowname);
                } else {
                    this.set('s.eVar6', flowname);
                }
            }
        } else {
            //template name
            this.set('s.prop1', pagename);
        }
    },
    setUser : function (user) {
        var tag,
            tags;

        if (user) {
            this.set('s.prop6', user.encryptedAccountNumber);    //encryted account id or payer id

            this.set('s.prop7', analyticsHelper.convertAccountType(user.userGroup, user.youthAccount));    //account type

            tags = user.accountTags || [];
            if (tags.length > 0) {
                for (var tKey in tags) {
                    tag = tags[tKey];
                    if (tag.name === 'IS_VERIFIED') {
                        this.set('s.prop8', (tag.value === 'VERIFIED') ? 'verified' : 'unverified');    //account verified
                    } else if (tag.name === 'RESTRICTED') {
                        this.set('s.prop9', (tag.value === 'RSTRCTD') ? 'restricted' : 'unrestricted');    //account restricted
                    }
                }
            }

            if (user.country) {
                this.set('s.prop10', user.country.countryCode || user.country);    //legal country
            }

        }
    },
    setCommons: function (req, locality) {
        if (req) {
            //CAL correlation Id
            this.set('s.prop40', req.correlationId);

            //page load start time
            this.set('s.prop20', req.pageStartTime);
        }
        if (locality) {
            //page display language
            this.set('s.prop50', locality.locale);
        }
    },
    addError: function (fieldId, errorMsg, errorCode) {

        //page or form error message
        this.set('s.prop14', errorMsg);

        //field which caused error
        this.set('s.prop15', fieldId);

        //error code
        this.set('s.prop29', errorCode);
    },
    setBusinessType : function (businessType) {
        this.set('s.eVar39', businessType);    //business type
    },
    /**
     * return the object equivalent of key and value.
     * if value is null fetch it from data cache
     */
    get : function (key, value) {
        var prop = {
                prop : key,
                value : value ? value : this.data[key]
            };
        return prop;
    },
    /**
     *  Return the data required for full page site catalyst tracking
     */
    getData : function () {
        var key,
            dataMap = {},
            propVars = [];

        //construct consolidatd dataMap, preserving original maps
        for (key in this.data) {
            dataMap[key] = this.data[key];
        }
        for (key in this.additionalData) {
            dataMap[key] = this.additionalData[key];
        }
        //construct page data
        for (key in dataMap) {
            propVars.push(this.get(key, dataMap[key]));
        }

        return {
            jsFile : this.jsFile,
            suiteVar : this.suiteVar,
            propVars: propVars
        };
    }
};
