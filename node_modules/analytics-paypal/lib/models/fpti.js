'use strict';

/**
 * FPTI client and server side tracking model
 */

var querystring = require('querystring'),
    analyticsHelper = require('../utils/analytics-helper'),
    FptiModel;

module.exports = FptiModel = function FptiModel(options) {
    options = options || {};
    this.varName = options.varName || 'pta';
    this.jsUrl = options.jsUrl;
    this.jsFullUrl = options.jsFullUrl;
    this.serverUrl = options.serverUrl;
    this.data = {};
    this.additionalData = {};
    this.additionalServerData = {};

    //page technology
    this.set('pgtf', 'Nodejs');
    //source 'ci' for client and 'si' for server
    this.set('s', 'ci');
};

FptiModel.prototype = {
    set: function (key, value) {
        if (key && typeof value !== 'undefined') {
            this.data[key] = value;
        }
    },
    setAdditionalData: function (key, value) {
        if (key && typeof value !== 'undefined') {
            this.additionalData[key] = value;
        }
    },
    setAdditionalServerSideData: function (key, value) {
        if (key && typeof value !== 'undefined') {
            this.additionalServerData[key] = value;
        }
    },
    setPxpTags: function (exp_id, trtmnt_id) {
        var pxp_tags = this.get('pxp_tags') || [];
        if (exp_id && trtmnt_id) {
            pxp_tags.push({
                exp_id: exp_id,
                trtmnt_id: trtmnt_id
            });
        }
        this.set('pxp_tags', pxp_tags);
    },
    setServiceError: function (errObj) {
        var int_error = this.get('int_error') || [];
        int_error.push(errObj);

        this.set('int_error', int_error);
    },
    clearAdditionalServerSideData: function () {
        this.additionalServerData = {};
    },
    /**
     *  Populate the fpti data from buzname data
     */
    setBuznames: function (buzdata, pagename, pageQualifier) {
        var flowEvent,
            flowgatename,
            templateName;

        if (buzdata) {
            templateName = buzdata.getTemplateName();
            //template name
            this.set('tmpl', templateName);

            //page grp
            this.set('pgrp', buzdata.get('pagename') || templateName);

            //page name
            this.set('page', buzdata.get('pagename2') || templateName);

            //page qualifier
            this.set('qual', buzdata.get('qualifier'));

            //user logged in
            this.set('lgin', buzdata.get('inout'));

            //page version
            this.set('vers', buzdata.get('version'));

            //site hierarchy
            this.set('shir', buzdata.get('hier1'));

            //country of page
            this.set('ccpg', buzdata.get('country'));

            flowgatename = buzdata.get('flowgatename');
            //flow gate name
            this.set('fltp', flowgatename);

            //flow name
            this.set('flnm', buzdata.get('flowname'));

            if (flowgatename) {
                flowEvent = analyticsHelper.getFlowEvent(flowgatename);

                //page goal
                this.set('goal', flowEvent.fptiGoal);
            }
        } else {
            //template name
            this.set('tmpl', pagename);

            //page grp
            this.set('pgrp', pagename);

            //page name
            this.set('page', pagename);

            //page qualifier
            this.set('qual', pageQualifier);
        }
    },
    setUser: function (user) {
        var tag,
            tags;

        if (user) {
            this.set('cust', user.encryptedAccountNumber);    //encryted account id or payer id

            this.set('acnt', analyticsHelper.convertAccountType(user.userGroup, user.youthAccount));    //account type

            tags = user.accountTags || [];
            if (tags.length > 0) {
                for (var tKey in tags) {
                    tag = tags[tKey];
                    if (tag.name === 'IS_VERIFIED') {
                        this.set('aver', (tag.value === 'VERIFIED') ? 'verified' : 'unverified');    //account verified
                    } else if (tag.name === 'RESTRICTED') {
                        this.set('rstr', (tag.value === 'RSTRCTD') ? 'restricted' : 'unrestricted');    //account restricted
                    }
                }
            }

            if (user.country) {
                this.set('cnac', user.country.countryCode || user.country);    //legal country
            }
        }
    },
    setCommons: function (req, locality) {
        if (req) {

            if (req.headers) {
                //user agent header
                this.set('ua', req.headers['user-agent']);

                this.set('accept_charset', req.headers['accept-charset'] || req.headers.accept);
                this.set('accept_lang', req.headers['accept-language']);
                this.set('host_header', req.headers.host);
                this.set('referrer', req.headers.referer);
            }

            if (req.cookies) {
                this.set('tsrce', req.cookies.tsrce || req.appName);
            }

            //web, mobile, email, tablet
            var deviceInfo = req.deviceInfo || req.session && req.session.wurfl,
                channel = 'web';
            if (deviceInfo) {
                if (deviceInfo.isTablet || deviceInfo.isWireless || deviceInfo.isMobile) {
                    channel = 'mobile';
                }
            }
            this.set('channel', channel);


            this.set('ip_address', req.headers.pp_remote_addr || req.ip);

            //CAL correlation Id
            this.set('calc', req.correlationId);

            //For client server correlation.
            this.set('csci', req.uuid);

            //page load start time
            this.set('pgst', req.pageStartTime);

            //session id
            this.set('fpti', req.sessionID);

            //visitorId getting from decrypting cookie
            this.set('vid', req.visitorId);

            //tealeaf id or rlogid
            this.set('teal', req.rlogId);

            //component name
            this.set('comp', req.appName);
        }

        if (locality) {
            //page display language
            this.set('rsta', locality.locale);
        }
    },
    /**
    * Let add errors in the tracking data
    */
    addError: function (fieldId, errorMsg, errorCode) {
        //page or form error message
        var wholeMsg = this.get('erpg') || '';
        if (wholeMsg) {
            wholeMsg += ',';
        }
        this.set('erpg', wholeMsg + errorMsg);

        //field which caused error
        var allFields = this.get('erfd') || '';
        if (allFields) {
            allFields += ',';
        }
        this.set('erfd', allFields + fieldId);

        //error code
        var allErrCodes = this.get('eccd') || '';
        if (allErrCodes) {
            allErrCodes += ',';
        }
        this.set('eccd', allErrCodes + errorCode);
    },
    setBusinessType: function (businessType) {
        this.set('bztp', businessType);    //business type
    },
    setMerchantType: function (merchantType) {
        this.set('mbtp', merchantType);    //merchant type
    },
    setPaymentFlowId: function (paymentFlowId) {
        this.set('pfid', paymentFlowId);    //encryted payment flow id
    },
    get: function (key) {
        return this.data[key];
    },
    /**
     *  Return the data required for full page FPTI tracking
     */
    getData: function () {
        var data = {
                'pgrp': this.get('pgrp'),      //page group
                'page': this.get('page'),      //page name
                'qual': this.get('qual'),      //page qualifier
                'tmpl': this.get('tmpl'),      //template name (.dust file fully qualified name)
                'pgst': this.get('pgst'),      //page load start time
                'lgin': this.get('lgin'),      //user logged in
                'vers': this.get('vers'),      //page version from buzname
                'calc': this.get('calc'),      //CAL correlation Id
                'rsta': this.get('rsta'),      //entity display language (page) en_US, fr_FR ...
                'pgtf': this.get('pgtf'),      //page technology flag
                's'   : this.get('s'),         //source 'ci' for client
                'ccpg': this.get('ccpg'),      //country of page
                'csci': this.get('csci'),      //client-server correlation
                'comp': this.get('comp'),      //component name
                'tsrce': this.get('tsrce'),    //previous app name

                'goal': this.get('goal'),      //page goal
                'fltp': this.get('fltp'),      //flow type
                'flnm': this.get('flnm'),      //flow name

                'erpg': this.get('erpg'),      //page error message
                'erfd': this.get('erfd'),      //field on page that caused the error
                'eccd': this.get('eccd'),      //error code

                'cust': this.get('cust'),      //encryted customer id or payer id
                'acnt': this.get('acnt'),      //account type
                'aver': this.get('aver'),      //account verified
                'rstr': this.get('rstr'),      //account restricted
                'pfid': this.get('pfid'),      //encryted payment flow id
                'bztp': this.get('bztp'),      //business type selected
                'mbtp': this.get('mbtp')       //merchant business type
            };
        for (var key in this.additionalData) {
            data[key] = this.additionalData[key];
        }
        data = querystring.stringify(data);
        return {
            name: this.varName,
            jsURL: this.jsUrl,
            jsFullUrl: this.jsFullUrl,
            serverURL: this.serverUrl,
            dataString: data
        };
    },
    /**
     *  Return the data required for server side FPTI tracking
     */
    getServerData: function () {

        var data = {
            events: {
                actor: {
                    tracking_visitor_id: this.get('vid'),
                    tracking_visit_id: this.get('fpti')
                },
                channel: this.get('channel'),
                tracking_event: this.get('pgst'),
                http_params: {
                    accept_charset: this.get('accept_charset'),
                    accept_lang: this.get('accept_lang'),
                    host_header: this.get('host_header'),
                    user_agent: this.get('ua'),
                    referrer: this.get('referrer'),
                    ip_address: this.get('ip_address')
                },
                event_params: {
                }
            }
        };

        // Merge the additional server side FPTI data into event_params
        var self = this;
        Object.keys(this.additionalServerData).forEach(function (e) {
            if (!data.events.event_params[e]) {
                data.events.event_params[e] = self.additionalServerData[e];
            }
        });

        //returning JSON payload
        return data;
    },
    getDefaultServerData: function (req) {
        var user = req.user || {},
            account = user.accountVO || {},
            experimentation = req.experimentation || {},
            ts = req.ts || {},
            deviceInfo = req.deviceInfo || {},
            headers = req.headers || {},
            epoch_ts = Date.now(),
            defaultServerData,
            int_error,
            pxp_tags;

        defaultServerData = {
            'cal_correlation_id': req.correlationId,
            'comp': this.get('comp'),
            'tsrce': this.get('tsrce'),
            'experimentation_guid': experimentation.guid,
            'uuid': req.uuid,
            'user_session_guid': ts.vt,
            'user_guid': ts.vr,
            'encr_customer_id': account.encryptedAccountNumber,
            'buyer_id': account.encryptedAccountNumber,
            'buyer_ip': this.get('ip_address'),
            'framework_call_type': 'si',
            'enrich': 'n',
            'http_response_code': req.res && req.res.statusCode || 200,
            'device_type': deviceInfo.device_type,
            'device_name': deviceInfo.model,
            'browser_type': deviceInfo.browser_type,
            'browser_version': deviceInfo.browserVersion,
            'client_os': deviceInfo.client_os,
            'is_cookied_user': (req.cookies && req.cookies.login_email || '') ? 1 : 0,
            'timestamp_serverside_request': req.pageStartTime || epoch_ts,
            'timestamp_serverside_response': epoch_ts,
            'server_epoch_timestamp': epoch_ts
        };

        int_error = this.get('int_error');
        if (int_error) {
            defaultServerData.int_error = int_error;
        }

        pxp_tags = this.get('pxp_tags');
        if (pxp_tags) {
            defaultServerData.pxp_tags = pxp_tags;
        }

        return defaultServerData;
    }
};
