/*global describe:false, it:false, before:false*/
'use strict';

var cdb = require('../index'),
    assert = require('assert'),
    properties = require('properties');


describe('cdb', function () {


    describe('US.cdb', function () {

        var actual;

        before(function (done) {
            var config;

            config = {
                path: true,
                comments: '#',
                separators: '='
            };

            properties.parse('./test/resources/US_cdbdump.txt', config, function (err, results) {
                if (err) {
                    done(err);
                    return;
                }

                actual = results;
                done();
            });
        });


        it('should dump all values', function (next) {
            var reader;

            reader = cdb.createReader('./test/resources/US.cdb');
            reader.load(function (err, data) {
                assert(!err);
                assert(data);
                assert.equal(Object.keys(data).length, Object.keys(actual).length);

                // TODO: Assert the values match.
                next();
            });
        });

    });


    describe('testdb.cdb', function () {


        describe('demand-load data', function () {

            var reader;


            before(function () {
                reader = cdb.createReader('./test/resources/testdb.cdb');
            });


            describe('find', function () {

                it('should read a key', function (next) {
                    //var start = process.hrtime();
                    reader.find('zoom', function (err, value) {
                        //console.log(process.hrtime(start));
                        assert.ok(!err);
                        assert.ok(value);
                        assert.equal(value, 'Hey, I just met you');
                        next();
                    });

                });

                it('should read the same key a second time', function (next) {
                    //var start = process.hrtime();
                    reader.find('zoom', function (err, value) {
                        //console.dir(process.hrtime(start));
                        assert.ok(!err);
                        assert.ok(value);
                        assert.equal(value, 'Hey, I just met you');
                        next();
                    });

                });


                it('should read a key', function (next) {

                    reader.find('another', function (err, value) {
                        assert.ok(!err);
                        assert.ok(value);
                        assert.equal(value, 'and this is crazy');
                        next();
                    });

                });


                it('should read a key', function (next) {

                    reader.find('one', function (err, value) {
                        assert.ok(!err);
                        assert.ok(value);
                        assert.equal(value, 'but here\'s my number');
                        next();
                    });

                });


                it('should not read a missing key', function (next) {

                    reader.find('maybe', function (err, value) {
                        assert.ok(!err);
                        assert.ok(!value);
                        next();
                    });

                });


                it('should read a single value from a key with multiple values', function (next) {

                    reader.find('red', function (err, value) {
                        assert.ok(!err);
                        assert.ok(value);
                        assert.equal(value, 'so call me maybe');
                        next();
                    });

                });

            });


            describe('findAll', function () {
                var reader;

                before(function () {
                    reader = cdb.createReader('./test/resources/testdb.cdb');
                });

                it('should read all values for a key with multiple values', function (next) {

                    reader.findAll('red', function (err, values) {
                        assert.ok(!err);
                        assert.ok(values);
                        assert.equal(values.length, 2);
                        assert.equal(values[0], 'so call me maybe');
                        assert.equal(values[1], 'this is part two');
                        next();
                    });

                });
            });

        });


        describe('preload data', function () {

            var reader;

            before(function () {
                reader = cdb.createReader('./test/resources/testdb.cdb');
            });


            it('should load all data', function (next) {
                //var start = process.hrtime();
                reader.load(function () {
                    //console.log(process.hrtime(start));
                    next();
                });
            });


            describe('find', function () {


                it('should read a key', function (next) {

                    reader.find('zoom', function (err, value) {
                        assert.ok(!err);
                        assert.ok(value);
                        assert.equal(value, 'Hey, I just met you');
                        next();
                    });

                });


                it('should not read a missing key', function (next) {

                    reader.find('maybe', function (err, value) {
                        assert.ok(!err);
                        assert.ok(!value);
                        next();
                    });

                });


                it('should read a single value from a key with multiple values', function (next) {

                    reader.find('red', function (err, value) {
                        assert.ok(!err);
                        assert.ok(value);
                        assert.equal(value, 'so call me maybe');
                        next();
                    });

                });

            });


            describe('findAll', function () {

                it('should read all values for a key with multiple values', function (next) {

                    reader.findAll('red', function (err, values) {
                        assert.ok(!err);
                        assert.ok(values);
                        assert.equal(values.length, 2);
                        assert.equal(values[0], 'so call me maybe');
                        assert.equal(values[1], 'this is part two');
                        next();
                    });

                });

            });

        });


    });

    describe('SHARE.cdb', function () {

        // __cdb_charset
        // shareserver_name
        // shareserver_name_2
        // shareserver_port_2
        // key_bytes
        // encrypted_share_len
        // secret_salt
        // shareserver_port
        // min_pass_len
        // total_shares
        // process_path
        // min_shares

        describe('demand-load data', function () {

            var reader = cdb.createReader('./test/resources/SHARE.cdb');

            it('should dump all records', function (next) {
                reader.dump(function (err, records) {
                    assert(!err);
                    assert.ok(records);
                    assert.equal(Object.keys(records).length, 12);
                    next();
                });
            });

            it('should read the __cdb_charset', function (next) {
                reader.find('__cdb_charset', function (err, record) {
                    assert.ok(!err);
                    assert.equal(record, 'US-ASCII');
                    next();
                });
            });

            it('should read the secret_salt', function (next) {
                reader.find('secret_salt', function (err, record) {
                    assert.ok(!err);
                    assert.equal(record, '18');
                    next();
                });
            });

            it('should read the min_pass_len', function (next) {
                reader.find('min_pass_len', function (err, record) {
                    assert.ok(!err);
                    assert.equal(record, '7');
                    next();
                });
            });

            it('should read the process_path', function (next) {
                reader.find('process_path', function (err, record) {
                    assert.ok(!err);
                    assert.equal(record, 'protected');
                    next();
                });
            });

        });


        describe('pre-load data', function () {

            var reader = cdb.createReader('./test/resources/SHARE.cdb');

            it('should load SHARE.cdb', function (next) {
                reader.load(next);
            });

            it('should dump all records', function (next) {
                reader.dump(function (err, records) {
                    assert(!err);
                    assert.ok(records);
                    assert.equal(Object.keys(records).length, 12);
                    next();
                });
            });

            it('should read the __cdb_charset', function (next) {
                reader.find('__cdb_charset', function (err, record) {
                    assert.ok(!err);
                    assert.equal(record, 'US-ASCII');
                    next();
                });
            });

            it('should read the secret_salt', function (next) {
                reader.find('secret_salt', function (err, record) {
                    assert.ok(!err);
                    assert.equal(record, '18');
                    next();
                });
            });

            it('should read the min_pass_len', function (next) {
                reader.find('min_pass_len', function (err, record) {
                    assert.ok(!err);
                    assert.equal(record, '7');
                    next();
                });
            });

            it('should read the process_path', function (next) {
                reader.find('process_path', function (err, record) {
                    assert.ok(!err);
                    assert.equal(record, 'protected');
                    next();
                });
            });

        });


    });




});