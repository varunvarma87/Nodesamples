'use strict';

var nconf = require('nconf'),
    assert = require('assert'),
    should = require('should'),
    utils = require('./fixtures/utils'),
    modConfig = require('../');

describe('config test with nconf override', function () {
    var fixtures = utils.APP2;

    describe('async', function () {

        before(function () {
            nconf.overrides({
                describe: 'nconf config',
                demand: true,
                default: 'some-value'
            });
        });

        after(function () {
            nconf.reset();
        });

        beforeEach(function () {
            process.env.NODE_ENV = '';
            modConfig.cache.clear();
        });

        it('No config', function (done) {
            modConfig(module, function (error, config) {
                if (error) {
                    console.log(error);
                }
                assert(!error);
                assert(!config.get('services:pxpservice'));
                assert(config.get('describe') === 'nconf config');
                assert(config.get('demand') === true);

                done();
            });
        });

        it('default mode', function (done) {
            modConfig(fixtures, function (error, config) {
                assert(!error);
                var svcsettings = config.get('services:pxpservice');
                should.equal('pxpsvc.vip', svcsettings.hostname);
                assert(config.get('describe') === 'fixture config');
                assert(config.get('demand') === true);
                done();
            });
        });

        it('test mode', function (done) {
            process.env.NODE_ENV = 'test';
            modConfig(fixtures, function (error, config) {
                assert(!error);
                var svcsettings = config.get('services:pxpservice');
                should.equal('test.vip.paypal.com', svcsettings.hostname);
                should.equal(false, config.get('services:servicecore:rejectUnauthorized'));
                assert(config.get('describe'));
                assert(config.get('describe') === 'fixture config');
                assert(config.get('demand') === true);
                done();
            });
        });

        it('qa mode', function (done) {
            process.env.NODE_ENV = 'staging';
            modConfig(fixtures, function (error, config) {
                assert(!error);
                var cfg = config.get('services:pxpservice');
                should.equal('test.qa.paypal.com', cfg.hostname);
                should.equal('8000', cfg.port);
                assert(config.get('describe'));
                assert(config.get('describe') === 'qa fixture config');
                assert(config.get('demand') === true);
                done();
            });
        });

        it('production mode', function (done) {
            process.env.NODE_ENV = 'production';
            modConfig(fixtures, function (error, config) {
                assert(!error);
                var svcsettings = config.get('services:pxpservice');
                should.equal('pxpsvc.vip', svcsettings.hostname);
                should.equal(false, config.get('services:servicecore:rejectUnauthorized'));
                assert(config.get('describe'));
                assert(config.get('describe') === 'fixture config');
                assert(config.get('demand') === true);
                done();
            });
        });

    });

    describe('sync', function () {

        before(function () {
            nconf.overrides({
                describe: 'nconf config',
                demand: true,
                default: 'some-value'
            });
        });

        after(function () {
            nconf.reset();
        });

        beforeEach(function () {
            process.env.NODE_ENV = '';
            modConfig.cache.clear();
        });

        it('No config', function (done) {
            var config = modConfig(module);
            assert(config);
            assert(!config.get('services:pxpservice'));
            assert(config.get('describe') === 'nconf config');
            assert(config.get('demand') === true);

            done();
        });

        it('default mode', function (done) {
            var config = modConfig(fixtures);
            assert(config);
            var svcsettings = config.get('services:pxpservice');
            should.equal('pxpsvc.vip', svcsettings.hostname);
            assert(config.get('describe'));
            assert(config.get('describe') === 'fixture config');
            assert(config.get('demand') === true);
            done();
        });

        it('test mode', function (done) {
            process.env.NODE_ENV = 'test';
            var config = modConfig(fixtures);
            assert(config);
            var svcsettings = config.get('services:pxpservice');
            should.equal('test.vip.paypal.com', svcsettings.hostname);
            should.equal(false, config.get('services:servicecore:rejectUnauthorized'));
            assert(config.get('describe'));
            assert(config.get('describe') === 'fixture config');
            assert(config.get('demand') === true);
            done();
        });

        it('qa mode', function (done) {
            process.env.NODE_ENV = 'staging';
            var config = modConfig(fixtures);
            assert(config);
            var cfg = config.get('services:pxpservice');
            should.equal('test.qa.paypal.com', cfg.hostname);
            should.equal('8000', cfg.port);
            assert(config.get('describe'));
            assert(config.get('describe') === 'qa fixture config');
            assert(config.get('demand') === true);
            done();
        });

        it('production mode', function (done) {
            process.env.NODE_ENV = 'production';
            var config = modConfig(fixtures);
            assert(config);
            var svcsettings = config.get('services:pxpservice');
            should.equal('pxpsvc.vip', svcsettings.hostname);
            should.equal(false, config.get('services:servicecore:rejectUnauthorized'));
            assert(config.get('describe'));
            assert(config.get('describe') === 'fixture config');
            assert(config.get('demand') === true);
            done();
        });

    });
});