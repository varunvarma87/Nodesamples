'use strict';

var async = require('async'),
    assert = require('assert'),
    should = require('should'),
    utils = require('./fixtures/utils'),
    modConfig = require('../');

describe('app config override test', function () {
    var fixtures = utils.APP3_MODULEA;
    var originalProcessDir;

    before(function () {
        var fixtureDir = utils.APP3;
        originalProcessDir = process.cwd();
        process.chdir(fixtureDir);
        require.main.filename = fixtureDir;
    });

    after(function () {
        process.chdir(originalProcessDir);
    });

    describe('async', function () {
        beforeEach(function () {
            process.env.NODE_ENV = '';
            modConfig.cache.clear();
        });

        it('default mode', function (done) {
            modConfig(fixtures, function (error, config) {
                if (error) {
                    console.log(error);
                }
                assert(!error);
                var svcsettings = config.get('services:pxpservice');
                assert(svcsettings);
                should.equal('pxpsvc.vip', svcsettings.hostname);
                assert(config.get('moduleA:foo') === 'fooValue');
                assert(config.get('app:requestURI'));
                done();
            });
        });

        it('test mode', function (done) {
            process.env.NODE_ENV = 'test';
            modConfig(fixtures, function (error, config) {
                if (error) {
                    console.log(error);
                }
                assert(!error);
                var svcsettings = config.get('services:pxpservice');
                assert(svcsettings);
                should.equal('somesessionservice.qa.paypal.com', svcsettings.hostname);
                should.equal(false, config.get('services:servicecore:rejectUnauthorized'));
                done();
            });
        });

        it('qa mode', function (done) {
            process.env.NODE_ENV = 'staging';
            modConfig(fixtures, function (error, config) {
                if (error) {
                    console.log(error);
                }
                assert(!error);
                var svcsettings = config.get('services:pxpservice');
                assert(svcsettings);
                should.equal('test.qa.paypal.com', svcsettings.hostname);
                should.equal(false, config.get('services:servicecore:rejectUnauthorized'));
                done();
            });
        });

        it('production mode', function (done) {
            process.env.NODE_ENV = 'production';
            modConfig(fixtures, function (error, config) {
                if (error) {
                    console.log(error);
                }
                assert(!error);
                var svcsettings = config.get('services:pxpservice');
                assert(svcsettings);
                should.equal('pxpsvc.vip', svcsettings.hostname);
                should.equal(true, config.get('services:servicecore:rejectUnauthorized'));

                done();
            });
        });

        it('perf test - load modConfig 50 times', function (done) {
            async.times(50, function (n, next) {
                modConfig(fixtures, function (error, config) {
                    if (error) {
                        console.log(error);
                    }
                    assert(!error);
                    var svcsettings = config.get('services:pxpservice');
                    assert(svcsettings);
                    should.equal('pxpsvc.vip', svcsettings.hostname);
                    assert(config.get('moduleA:foo') === 'fooValue');
                    assert(config.get('app:requestURI'));
                    next();
                });
            }, function () {
                done();
            });
        });

        it('perf test - cache and load modConfig 50 times', function (done) {
            async.series([
                function (next) {
                    modConfig(fixtures, function (error, config) {
                        if (error) {
                            console.log(error);
                        }
                        assert(!error);
                        var svcsettings = config.get('services:pxpservice');
                        assert(svcsettings);
                        should.equal('pxpsvc.vip', svcsettings.hostname);
                        assert(config.get('moduleA:foo') === 'fooValue');
                        assert(config.get('app:requestURI'));
                        next();
                    });
                },
                function (next) {
                    async.times(50, function (n, cb) {
                        modConfig(fixtures, function (error, config) {
                            if (error) {
                                console.log(error);
                            }
                            assert(!error);
                            var svcsettings = config.get('services:pxpservice');
                            assert(svcsettings);
                            should.equal('pxpsvc.vip', svcsettings.hostname);
                            assert(config.get('moduleA:foo') === 'fooValue');
                            assert(config.get('app:requestURI'));
                            cb();
                        });
                    }, function () {
                        next();
                    });
                }
            ],
            function () {
                done();
            });
        });
    });

    describe('sync', function () {
        beforeEach(function () {
            process.env.NODE_ENV = '';
            modConfig.cache.clear();
        });

        it('default mode', function (done) {
            var config = modConfig(fixtures);
            assert(config);
            var svcsettings = config.get('services:pxpservice');
            assert(svcsettings);
            should.equal('pxpsvc.vip', svcsettings.hostname);
            assert(config.get('moduleA:foo') === 'fooValue');
            assert(config.get('app:requestURI'));
            done();
        });

        it('test mode', function (done) {
            process.env.NODE_ENV = 'test';
            var config = modConfig(fixtures);
            assert(config);
            var svcsettings = config.get('services:pxpservice');
            assert(svcsettings);
            should.equal('somesessionservice.qa.paypal.com', svcsettings.hostname);
            should.equal(false, config.get('services:servicecore:rejectUnauthorized'));
            done();
        });

        it('qa mode', function (done) {
            process.env.NODE_ENV = 'staging';
            var config = modConfig(fixtures);
            assert(config);
            var svcsettings = config.get('services:pxpservice');
            assert(svcsettings);
            should.equal('test.qa.paypal.com', svcsettings.hostname);
            should.equal(false, config.get('services:servicecore:rejectUnauthorized'));
            done();
        });

        it('production mode', function (done) {
            process.env.NODE_ENV = 'production';
            var config = modConfig(fixtures);
            assert(config);
            var svcsettings = config.get('services:pxpservice');
            assert(svcsettings);
            should.equal('pxpsvc.vip', svcsettings.hostname);
            should.equal(true, config.get('services:servicecore:rejectUnauthorized'));

            done();
        });

        it('perf test - load modConfig 50 times', function (done) {
            async.times(50, function (n, next) {
                var config = modConfig(fixtures);
                assert(config);
                var svcsettings = config.get('services:pxpservice');
                assert(svcsettings);
                should.equal('pxpsvc.vip', svcsettings.hostname);
                assert(config.get('moduleA:foo') === 'fooValue');
                assert(config.get('app:requestURI'));
                next();
            }, function () {
                done();
            });
        });

        it('perf test - cache and load modConfig 50 times', function (done) {
            async.series([
                function (next) {
                    var config = modConfig(fixtures);
                    assert(config);
                    var svcsettings = config.get('services:pxpservice');
                    assert(svcsettings);
                    should.equal('pxpsvc.vip', svcsettings.hostname);
                    assert(config.get('moduleA:foo') === 'fooValue');
                    assert(config.get('app:requestURI'));
                    next();
                },
                function (next) {
                    async.times(50, function (n, cb) {
                        var config = modConfig(fixtures);
                        assert(config);
                        var svcsettings = config.get('services:pxpservice');
                        assert(svcsettings);
                        should.equal('pxpsvc.vip', svcsettings.hostname);
                        assert(config.get('moduleA:foo') === 'fooValue');
                        assert(config.get('app:requestURI'));
                        cb();
                    }, function () {
                        next();
                    });
                }
            ],
            function () {
                done();
            });
        });
    });
});