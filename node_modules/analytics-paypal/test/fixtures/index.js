'use strict';

var assert = require('assert'),
    cal = require('cal'),
    path = require('path'),
    http = require('http'),
    kraken = require('kraken-js'),
    analytics = require('../../index'),
    ppcommons = require('ppcommons'),
    servicecore = require('servicecore');

var wcServer,
    app,
    appConfig,
    options;

process.chdir(__dirname);
require.main.filename = __dirname;

app = {
    configure: function (config, callback) {
        servicecore.configuration = config.get('services');
        cal.setDefaultWriteStream('console');
        cal.defaults.formatter = cal.formatter.console;
        process.chdir(__dirname);
        appConfig = config;
        callback(null, config);
    },
    requestBeforeRoute : function (server) {
        server.use(ppcommons());
        server.use(servicecore());
        if (options.isOverride) {
            server.use(analytics(appConfig.get('analytics')));
        } else {
            server.use(analytics());
        }
    }
};

module.exports = {
    start: function (params, next) {
        options = params || {};
        kraken.create(app).listen(function (err, server) {
            if (err) {
                console.log(err);
            }
            assert(!err);
            wcServer = server;
            next();
        });
    },
    stop: function (next) {
        wcServer.close(next);
    },
    getConfig: function (key) {
        return appConfig.get(key);
    },
    inject: function (path, callback) {
        var req = http.request({ method: 'GET', port: 8011, path: path, headers: {'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36'} }, function (res) {
            var data = [];

            res.on('data', function (chunk) {
                data.push(chunk);
            });

            res.on('end', function () {
                var body = Buffer.concat(data).toString('utf8');
                if (res.statusCode !== 200) {
                    callback(new Error(body));
                    return;
                }
                callback(null, body);
            });
        });
        req.on('error', callback);
        req.end();
    }
};
