'use strict';

if (require.main.filename !== __filename) {
    return;
}

var Benchmark = require('benchmark'),
    assert = require('assert'),
    Crypto = require('../lib/ppcrypto');

var configuration = {
    encryptionAlgorithm: 'desx',
    macAlgorithm: 'sha1',
    encryptionKey: new Buffer('1h1P/y6F/kg6OlM7oeTms2Yr6Lw=', 'base64'),
    macKey: new Buffer('SF4HNI/A1U3xPww2eylPqJNQIvU=', 'base64')
};

var seal = new Benchmark.Suite('sealAndEncode');

seal.add('sealAndEncode', {
    defer: true,
    fn: function (deferred) {

        var ppcrypto = new Crypto(configuration);
        ppcrypto.sealAndEncode(new Buffer("Hello World"), function (data) {
            assert.strictEqual(data, "EeID2labT1Xskqv5sMSXtAGUMDzrt1eljVgdzU5PTlCwKloaAodwdQDqfzW");
            deferred.resolve();
        });

    }
});

seal.on('cycle', function (event) {
    console.log(String(event.target));
});

seal.run({ 'async': true });

var unseal = new Benchmark.Suite('decodeAndUnseal');

unseal.add('decodeAndUnseal', {
    defer: true,
    fn: function (deferred) {

        var ppcrypto = new Crypto(configuration);
        ppcrypto.decodeAndUnseal(new Buffer("EeID2labT1Xskqv5sMSXtAGUMDzrt1eljVgdzU5PTlCwKloaAodwdQDqfzW"), function (data) {
            assert.strictEqual(data.toString(), "Hello World");
            deferred.resolve();
        });

    }
});

unseal.on('cycle', function (event) {
    console.log(String(event.target));
});

unseal.run({ 'async': true });