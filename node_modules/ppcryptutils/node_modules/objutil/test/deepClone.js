/*global describe:false, it:false, before:false, after:false*/
'use strict';

var objutil = require('../index'),
    util = require('util'),
    assert = require('assert');


describe('deepClone', function () {


    function MyObject() {
        this._foo = 'foo';
    }

    MyObject.prototype = {
        get foo () {
            return this._foo;
        },

        print: function () {
            return 'Hello, ' + this._foo;
        }
    };


    function ChildObject() {
        ChildObject.super_.apply(this, arguments);
        this._bar = 'bar';
    }

    util.inherits(ChildObject, MyObject);

    ChildObject.prototype.__defineGetter__('bar', function () {
        return this._bar;
    });

    ChildObject.prototype.print = function () {
        return 'Goodbye, ' + this._foo;
    };



    it('should handle primitives', function () {
        var orig, clone;

        orig = 'foobar';
        clone = objutil.deepClone(orig);
        assert.strictEqual(orig, clone);

        orig = 13;
        clone = objutil.deepClone(orig);
        assert.strictEqual(orig, clone);

        orig = 3.14159;
        clone = objutil.deepClone(orig);
        assert.strictEqual(orig, clone);

        orig = true;
        clone = objutil.deepClone(orig);
        assert.strictEqual(orig, clone);

        orig = false;
        clone = objutil.deepClone(orig);
        assert.strictEqual(orig, clone);
    });


    it('should handle null', function () {
        var orig, clone;

        orig = null;
        clone = objutil.deepClone(orig);

        assert.strictEqual(orig, clone);
    });


    it('should handle undefined', function () {
        var orig, clone;

        orig = undefined;
        clone = objutil.deepClone(orig);

        assert.strictEqual(orig, clone);
    });


    it('should copy primitive data structures', function () {
        var orig, clone;

        orig = { a: 'a', b : 2, c: true };
        clone = objutil.deepClone(orig);

        assert(clone);
        assert(clone !== orig);
        assert.strictEqual(clone.a, 'a');
        assert.strictEqual(clone.b, 2);
        assert.strictEqual(clone.c, true);
    });


    it('should copy primitive arrays', function () {
        var orig, clone;

        orig = [ 'a', 2, true ];
        clone = objutil.deepClone(orig);

        assert(Array.isArray(clone));
        assert(clone !== orig);
        assert.equal(clone.length, 3);
        assert.strictEqual(clone[0], 'a');
        assert.strictEqual(clone[1], 2);
        assert.strictEqual(clone[2], true);
    });


    it('should handle object references', function () {
        var orig, child, arr, clone;

        child = { foo: 'foo' };
        arr = [ 'a', 2, child ];
        orig = { child: child, arr: arr, last: 'last' };
        clone = objutil.deepClone(orig);

        assert(clone);
        assert(clone !== orig);

        assert.strictEqual(clone.child.foo, child.foo);
        assert(clone.child !== orig.child);
        assert(clone.child !== child);

        assert(Array.isArray(clone.arr));
        assert(clone.arr !== orig.arr);
        assert(clone.arr !== arr);
        assert(clone.arr[2] !== child);
        assert.strictEqual(clone.arr[2].foo, child.foo);

        assert.strictEqual(clone.last, 'last');
    });


    it('should handle object references in arrays', function () {
        var orig, child, arr, clone;

        child = { foo: 'foo' };
        arr = [ 'a', 2, true ];
        orig = [ child, arr, 'last' ];
        clone = objutil.deepClone(orig);

        assert(Array.isArray(clone));
        assert.strictEqual(clone.length, 3);
        assert(clone !== orig);

        assert(clone[0] !== orig[0]);
        assert(clone[0] !== child);
        assert.strictEqual(clone[0].foo, child.foo);

        assert(Array.isArray(clone[1]));
        assert.strictEqual(clone[1].length, 3);
        assert.strictEqual(clone[1][1], 2);
        assert(clone[1] !== orig[1]);
        assert(clone[1] !== arr);

        assert.strictEqual(clone[2], 'last');
    });


    it('should handle constructor functions', function () {
        var obj = new MyObject();
        var clone = objutil.deepClone(obj);
        assert(clone instanceof MyObject);
        assert.strictEqual(obj.constructor.name, clone.constructor.name);
        assert.strictEqual(clone.print(), 'Hello, foo');
        assert.strictEqual(clone.foo, 'foo');
    });


    it('should handle subclasses', function () {
        var obj = new ChildObject();
        var clone = objutil.deepClone(obj);
        assert(clone instanceof ChildObject);
        assert(clone instanceof MyObject);
        assert.strictEqual(obj.constructor.name, clone.constructor.name);
        assert.strictEqual(clone.print(), 'Goodbye, foo');
        assert.strictEqual(clone.print(), obj.print());
        assert.strictEqual(clone.foo, 'foo');
        assert.strictEqual(clone.foo, obj.foo);
        assert.strictEqual(clone.bar, 'bar');
        assert.strictEqual(clone.bar, clone.bar);
    });

});