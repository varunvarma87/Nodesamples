'use strict';

var cal = require('cal'),
    nconf = require('nconf'),
    assert = require('assert'),
    request = require('supertest'),
    express = require('express'),
    cookieParser = require('cookie-parser'),
    bodyParser = require('body-parser'),
    http = require('http'),
    utils = require('../lib/utils'),
    servicecore = require('servicecore'),
    cookiemiddleware = require('../lib/index');

cal.setDefaultWriteStream('console');
cal.defaults.formatter = cal.formatter.console;

describe('Cookie Service Middleware', function () {

    var app = express(),
        server = http.createServer(app),
        cookies = 's_pers=test-a; upct=test-b; navlns=test-c; login_email=cdayanand-merchant@paypal.com; ts=vreXpYrS=1468751974&vteXpYrS=1374082997&vr=bar&vt=ed9ecf6913f0a491e544f404ffd8d199';

    before(function (done) {
        //Set 'topo' entries
        servicecore.configuration = {
            'servicecore': {
                rejectUnauthorized: false
            },
            'keebler-paypal': {
                protocol: 'http:',
                hostname: 'stage2dev328.qa.paypal.com',
                port: '12764',
                basepath: '/v1/cookieserv'
            }
        };

        //Cookie parse inbound for /checkin test
        app.use(cookieParser());

        //Set appname
        app.use(function (req, res, next) {
            req.appName = 'demo';
            next();
        });

        //Dummy service endpoint
        app.post('/v1/cookieserv/checkin', bodyParser(), function (req, res) {
            req.body.cookieData.forEach(function (cookie) {
                if (cookie.name === 'test_cookie') {
                    cookie.context = 's=CLIENT,e=0,cv=1';
                }
                else {
                    cookie.context = 's=SERVER,e=0,cv=1';
                }
            });
            res.json(req.body);
        });

        //Dummy service endpoint
        app.post('/v1/cookieserv/checkout', bodyParser(), function (req, res) {
            //Send back the x-pp-s cookie.
            var cookiedata = [
            ];

            //Basically if it contains the test_cookie, send it back since it is 'client side'
            if (req.body.cookieData.length === 6) {
                cookiedata.push({
                    name: 'test_cookie',
                    value: 'test',
                    httpOnly: true,
                    path: '/'
                });

                //Delete the server side cookie that was sent.
                cookiedata.push({
                    name: 's_pers',
                    value: '',
                    path: '/'
                });


                cookiedata.push({
                    name: 'x-pp-s',
                    value: '1',
                    type: 'PLAIN',
                    'max-Age': 0,
                    domain: 'paypal.com',
                    path: '/',
                    secure: true,
                    httpOnly: true
                });

            }

            res.json({
                cookieData: cookiedata
            });
        });

        //Test middleware : responds with the cookies that came back in /checkin /checkout.
        app.get('/test1', cookiemiddleware(), function (req, res) {
            //Send back the cookies that the middleware allowed.
            res.json(req.cookies);
        });

        //Test middleware with additonal outbound cookies.
        app.get('/test2', cookiemiddleware(), function (req, res) {
            //Set an outbound dummy cookie so we can determine if it is unset on the way out.
            res.cookie('test_cookie', 'test', { httpOnly: true, expires: new Date(Date.now() + 900000)});
            //Modify one of the /checkin cookies
            res.cookie('s_pers', 'test-b');
            //Send back the cookies that the middleware allowed.
            res.json(req.cookies);
        });

        app.get('/test3', cookiemiddleware(), function (req, res) {
            res.clearCookie('test_cookie');
            res.send(200);
        });

        server.listen(3000, done);
    });

    after(function () {
        server.close();
    });

    it('should set/unset cookies from service.', function (next) {

        request(app).
            get('/test1').
            set('Cookie', cookies).
            end(function (err, res) {
                assert(!err, err ? err.message : 'error');
                assert(res.statusCode === 200);
                assert(!!res.body);

                //Should have processed 5 cookies.
                assert(Object.keys(res.body).length === 5);

                var setcookies = res.headers['set-cookie'];

                //Should contain cookies being set.
                assert(setcookies);

                next();
            });

    });

    it('should include cookies set during request.', function (next) {

        request(app).
            get('/test2').
            set('Cookie', cookies).
            end(function (err, res) {
                assert(!err, err ? err.message : 'error');
                assert(res.statusCode === 200);
                assert(!!res.body);

                //Should have processed 5 cookies.
                assert(Object.keys(res.body).length === 5);

                var setcookies = res.headers['set-cookie'];

                assert.strictEqual(setcookies.length, 3);

                next();
            });

    });


    it('should clear cookie.', function (next) {

        request(app).
            get('/test3').
            set('Cookie', 'test_cookie=foobar').
            end(function (err, res) {
                next();
            });

    });

});