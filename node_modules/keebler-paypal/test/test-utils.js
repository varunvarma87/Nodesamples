'use strict';

var assert = require('assert'),
    utils = require('../lib/utils');

describe('Cookie Service Middleware', function () {

    var rawcookies = 's_pers=test-a; upct=test-b; navlns=test-c; login_email=cdayanand-merchant@paypal.com; ts=vreXpYrS=1468751974&vteXpYrS=1374082997&vr=bar&vt=ed9ecf6913f0a491e544f404ffd8d199',
        objcookies = [
            { name: 's_pers', value: 'test-a', httpOnly: true, domain: 'paypal.com', path: '/' },
            { name: 'upct', value: 'test-b', httpOnly: true, domain: 'paypal.com', path: '/' },
            { name: 'navlns', value: 'test-c', httpOnly: true, domain: 'paypal.com', path: '/' },
            { name: 'login_email', value: 'cdayanand-merchant@paypal.com', httpOnly: true, domain: 'paypal.com', path: '/' },
            { name: 'ts', value: 'vreXpYrS=1468751974&vteXpYrS=1374082997&vr=bar&vt=ed9ecf6913f0a491e544f404ffd8d199', httpOnly: true, domain: 'paypal.com', path: '/', secure: true }
        ],
        response = {
            headersSent: false,
            trailers: [],
            cookies: ['ts=vreXpYrS=1468751974&vteXpYrS=1374082997&vr=bar&vt=ed9ecf6913f0a491e544f404ffd8d199; httpOnly; domain=paypal.com; path=/; secure'],
            'get': function () {
                return this.cookies;
            },
            cookie: function (name, value, options) {
                options.name = name;
                options.value = value;
                this.cookies.push(utils.cookiesToString(options));
            },
            clearCookie: function (name, domain) {
                this.cookies.push(name + '=' + '; domain=' + domain);
            },
            addTrailers: function (header) {
                var cookies = header['set-cookie'];

                if (cookies instanceof Array) {
                    cookies.forEach(function (cookie) {
                        this.trailers.push(cookie);
                    }.bind(this));
                }
                else {
                    this.trailers.push(cookies);
                }
            },
            removeHeader: function (name) {

            }
        },
        request = {
            cookies: {
                s_pers: 'test-a'
            }
        };

    it('should convert array of cookie object to string array.', function (next) {

        //Send two
        var arr = utils.cookiesToString(objcookies.slice(3, objcookies.length));

        //We only need to test one.
        assert(arr[1] === 'ts=vreXpYrS=1468751974&vteXpYrS=1374082997&vr=bar&vt=ed9ecf6913f0a491e544f404ffd8d199; httpOnly; domain=paypal.com; path=/; secure');

        next();

    });

    it('should convert single cookie object to string', function (next) {

        //Send single object
        var str = utils.cookiesToString(objcookies[4]);

        assert(str === 'ts=vreXpYrS=1468751974&vteXpYrS=1374082997&vr=bar&vt=ed9ecf6913f0a491e544f404ffd8d199; httpOnly; domain=paypal.com; path=/; secure');

        next();

    });

    it('should convert array of cookie object to string when length = 1.', function (next) {

        //Send array of 1 object
        var str = utils.cookiesToString(objcookies.slice(4));

        assert(str === 'ts=vreXpYrS=1468751974&vteXpYrS=1374082997&vr=bar&vt=ed9ecf6913f0a491e544f404ffd8d199; httpOnly; domain=paypal.com; path=/; secure');

        next();

    });

    it('should parse cookies from request', function (next) {

        var arr = utils.parseRequestCookies(request);

        assert(arr[0].name = 's_pers');
        assert(arr[0].value === 'test-a');

        next();

    });

    it('should parse outbound cookies on response', function (next) {

        var arr = utils.parseResponseCookies(response);

        assert(arr.ts);
        assert(arr.ts.value === 'vreXpYrS=1468751974&vteXpYrS=1374082997&vr=bar&vt=ed9ecf6913f0a491e544f404ffd8d199');

        next();
    });

    it('should set cookies', function (next) {

        utils.setCookies(response, objcookies);

        //These values aren't exactly right because this is just a mock response object we're working with.
        assert(response.cookies[1] === 's_pers=test-a; domain=paypal.com; path=/; httpOnly; signed=undefined');

        next();

    });

    it('should clear cookies', function (next) {

        utils.clearCookies(response, objcookies);

        assert(response.cookies[6] === 's_pers=; domain=/');

        next();

    });

    it('should set cookies as trailer when response headers are sent', function (next) {

        response.headerSent = true;

        utils.setCookies(response, [
            { name: 's_pers', value: 'test-a', httpOnly: true, domain: 'paypal.com', path: '/' }
        ]);

        //These values aren't exactly right because this is just a mock response object we're working with.
        assert(response.trailers[0] === 's_pers=test-a; httpOnly; domain=paypal.com; path=/');

        next();

    });

    it('should clear cookies as trailer when response headers are sent', function (next) {

        response.headerSent = true;

        utils.clearCookies(response, objcookies);

        //These values aren't exactly right because this is just a mock response object we're working with.
        assert(response.trailers[1] === 's_pers=null; httpOnly; domain=paypal.com; path=/');

        next();

    });

});