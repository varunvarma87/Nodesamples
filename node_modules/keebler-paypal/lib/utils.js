'use strict';

var deployEnv = require('environment-paypal'),
    tryRequire = require('try-require');

var cal = tryRequire('cal'),
    calEvent,
    CAL_TRANSACTION_TYPE = 'KEEBLER';

function calStatusEvent(status, name, msg) {
    if (cal) {
        calEvent = cal.createEvent(CAL_TRANSACTION_TYPE, name);
        calEvent.status = status || cal.Status.SUCCESS;
        calEvent.addData(msg);
        calEvent.complete();
    }
}

function calErrorEvent(name, msg) {
    calStatusEvent(cal.Status.ERROR, name, msg);
}

/**
 * Parse cookies on request.
 * @param req
 * @returns an array of cookies.
 */
function parseRequestCookies (req) {

    var cookies = [];

    //We only parse regular cookies here since signedCookies are express specific.
    if (req.cookies) {
        Object.keys(req.cookies).forEach(function (name) {
            cookies.push({ name: name, value: req.cookies[name] });
        });
    }
    if (req.signedCookies) {
        Object.keys(req.signedCookies).forEach(function (name) {
            cookies.push({ name: name, value: req.signedCookies[name] });
        });
    }

    return cookies;
}

/**
 * Parse cookies intended to be set on the response.
 * @param res
 * @returns {*} a map of cookies.
 */
function parseResponseCookies (res) {

    var cookies = {};

    var setCookies = res.get('set-cookie');

    if (!setCookies) {
        return cookies;
    }

    if (!(setCookies instanceof Array)) {
        setCookies = [setCookies];
    }

    setCookies.forEach(function (rawcookie) {

        if (rawcookie) {
            var cookie = _parseRawCookie(rawcookie);

            //Flag this
            cookie.modified = true;

            cookies[cookie.name] = cookie;
        }

    });

    return cookies;
}

/**
 * Clears the specified cookie(s). If the head is already written, they are sent as trailers.
 * @param res
 * @param cookies
 */
function clearCookies (res, cookies) {
    if (!cookies) {
        cookies = [];
    }
    if (!(cookies instanceof Array)) {
        cookies = [cookies];
    }

    if (res.headersSent || res.headerSent) {
        var setcookies = [];
        cookies.forEach(function (cookie) {
            cookie.value = null;
            setcookies.push(_cookieToString(cookie));
        });
        if (setcookies.length) {
            res.addTrailers({
                'set-cookie': setcookies
            });
        }
    }
    else {
        res.removeHeader('set-cookie');
        cookies.forEach(function (cookie) {
            res.clearCookie(cookie.name, cookie.path);
        });
    }
}

/**
 * Sets the specified cookie(s). If the head is already written, they are sent as trailers.
 * @param res
 * @param cookies
 */
function setCookies (res, cookies, secure) {
    if (!(cookies instanceof Array)) {
        cookies = [cookies];
    }

    if (res.headersSent || res.headerSent) {
        res.addTrailers({
            'set-cookie': cookiesToString(cookies)
        });
    }
    else {
        cookies.forEach(function (cookie) {
            var options = {
                domain: cookie.domain,
                path: cookie.path,
                httpOnly: !!cookie.httpOnly,
                signed: cookie.signed
            };
            if (secure) {
                options.secure = !!cookie.secure;
            }
            //This will have been modified by connect's cookie parser.
            if (cookie['max-Age']) {
                options.maxAge = cookie['max-Age'] * 1000;
            }
            else if (cookie.expires) {
                options.expires = new Date(cookie.expires);
            }
            res.cookie(cookie.name, cookie.value, options);
        });
    }
}

/**
 * Convert the specified cookies to strings.
 * @param cookies
 * @returns {Array}
 */
function cookiesToString (cookies) {
    var cookieStrings = [];

    if (!(cookies instanceof Array)) {
        cookies = [cookies];
    }

    cookies.forEach(function (cookie) {
        cookieStrings.push(_cookieToString(cookie));
    });

    return cookieStrings.length === 1 ? cookieStrings[0] : cookieStrings;
}

/**
 * Converts a cookie to a string.
 * @param cookie
 * @returns {String}
 */
function _cookieToString (cookie) {
    var cookieString = cookie.name + '=' + cookie.value + '; ';

    Object.keys(cookie).forEach(function (key) {
        var value = cookie[key];

        if (key === 'httpOnly' || key === 'secure') {
            if (value) {
                cookieString += key + '; ';
            }
        }
        else if (key !== 'name' && key !== 'value') {
            cookieString += key + '=' + value + '; ';
        }
    });

    cookieString = cookieString.trim();

    return cookieString.substring(0, cookieString.length - 1);
}

/**
 * Parses a rawcookie string.
 * @param rawcookie
 * @returns {Object} representing a cookie.
 */
function _parseRawCookie (rawcookie) {

    var pairs = rawcookie.split(/[;] */);

    var name = pairs[0].substr(0, pairs[0].indexOf('=')).trim();

    var value = pairs[0].substr(pairs[0].indexOf('=') + 1, pairs[0].length).trim();

    var cookie = {};

    cookie.name = name;

    try {
        cookie.value = decodeURIComponent(value);
    }
    catch (e) {
        cookie.value = value;
    }

    _parseCookieOptions(cookie, pairs);

    return cookie;
}

/**
 * Parse cookie options out of pairs of options.
 * @param cookie
 * @param pairs
 */
function _parseCookieOptions (cookie, pairs) {

    if (pairs.length < 2) {
        return cookie;
    }

    for (var i = 1; i < pairs.length; i++) {
        var pair = pairs[i].substr(0, 1).toLowerCase() + pairs[i].substr(1, pairs[i].length);

        var eq_idx = pair.indexOf('=');

        if (eq_idx > 0) {
            var key = pair.substr(0, eq_idx).trim();
            var val = pair.substr(++eq_idx, pair.length).trim();

            // quoted values
            if ('"' === val[0]) {
                val = val.slice(1, -1);
            }

            //Convert dates
            if (key === 'expires') {
                cookie[key] = new Date(val).toGMTString();
            }
            else if (key === 'max-Age' || key === 'maxAge') {
                cookie.maxAge = String(val);
            }
            else {
                try {
                    cookie[key] = decodeURIComponent(val);
                }
                catch (e) {
                    cookie[key] = val;
                }
            }
        }
        else {
            cookie[pair] = !!pair;
        }
    }

    return cookie;
}

function getCookieNames(req) {
    var cookieNames = [];

    //We only parse regular cookies here since signedCookies are express specific.
    if (req.cookies) {
        Object.keys(req.cookies).forEach(function (name) {
            cookieNames.push(name);
        });
    }
    if (req.signedCookies) {
        Object.keys(req.signedCookies).forEach(function (name) {
            cookieNames.push(name);
        });
    }

    return cookieNames.join(',');
}

function getKeeblerCookiesName(cookiesData) {
    var cookieNames = [];

    if (cookiesData) {
        cookiesData.forEach(function (cookieData) {
            if (cookieData.name) {
                cookieNames.push(cookieData.name);
            }
        });
    }

    return cookieNames.join(',');
}

exports = module.exports = {
    parseRequestCookies: parseRequestCookies,
    parseResponseCookies: parseResponseCookies,
    cookiesToString: cookiesToString,
    clearCookies: clearCookies,
    setCookies: setCookies,
    getCookieNames: getCookieNames,
    getKeeblerCookiesName: getKeeblerCookiesName,
    calStatusEvent: calStatusEvent,
    calErrorEvent: calErrorEvent
};
