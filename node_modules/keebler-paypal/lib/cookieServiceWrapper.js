'use strict';

var assert = require('assert'),
    servicecore = require('servicecore'),
    utils = require('./utils'),
    deployEnv = require('environment-paypal');

function cookieDebugLog(req) {
    if (deployEnv.isNotLive() && deployEnv.isNotSandbox()) {
        var data = {
            cookies: req.cookies,
            signedCookies: req.signedCookies
        };
        utils.calStatusEvent(0, 'cookies_debug', data);
    }
}

module.exports = function (config, transport) {
    return {
        /**
         * Calls the cookies service and passes all cookies on request.
         * @param req
         * @param callback
         */
        checkin: function (req, callback) {
            assert(req && !(req instanceof Function), 'Request can not be null.');
            assert(req.appName, 'req.appName can not be null');

            //Transient storage for response cookies
            req.keebler = [];

            var cookieData = utils.parseRequestCookies(req);

            var requestBody = {
                'userAgent': String(req.get('user-agent')),
                'referer': 'paypal.com',
                'accept': 'application/json',
                'cookieData': cookieData
            };

            cookieDebugLog(req);

            transport({
                method: 'POST',
                path: 'checkin',
                qs: {
                    appname: req.appName
                },
                headers: {
                    'content-type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            }, function (error, response) {
                if (!error && response && response.statusCode === 200) {
                    req.keebler = response.body.cookieData;
                }
                else {
                    utils.calErrorEvent('checkin', {error: error && error.message || error, statusCode: response && response.statusCode});
                }
                callback.apply(null, arguments);
            });
        },

        /**
         * Calls the cookies service and passes all cookies intended to be set on response.
         * @param res
         * @param callback
         */
        checkout: function (req, res, callback) {
            assert(req, 'Request can not be null.');
            assert(req.appName, 'req.appName can not be null');
            assert(res && !(res instanceof Function), 'Response can not be null.');

            //These cookies being set
            var cookies = utils.parseResponseCookies(res);

            //Add keebler cookies
            req.keebler.forEach(function (cookie) {
                if (cookies[cookie.name]) {
                    cookies[cookie.name].context = cookie.context;
                    cookies[cookie.name].modified = true;
                }
                else {
                    cookies[cookie.name] = cookie;
                }
            });

            //Cookie array being sent, containing service specific data
            var cookieData = [];

            //Final cookieData
            Object.keys(cookies).forEach(function (name) {
                cookieData.push(cookies[name]);
            });

            var requestBody = {
                'userAgent': String(req.get('user-agent')),
                'referer': 'paypal.com',
                'accept': 'application/json',
                'cookieData': cookieData
            };

            transport({
                method: 'POST',
                path: 'checkout',
                qs: {
                    appname: req.appName
                },
                headers: {
                    'content-type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            }, function (error, response) {
                if (error || response && response.statusCode !== 200) {
                    utils.calErrorEvent('checkout', {error: error && error.message || error, statusCode: response && response.statusCode});
                }
                callback.apply(null, arguments);
            });
        }

    };
};
