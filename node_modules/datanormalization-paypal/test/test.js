/*global describe:false, it:false, before:false, beforeEach:false, after:false, afterEach:false*/
'use strict';

var datanormalization = require('../index'),
    servicecore = require('servicecore'),
    vault = require('vault'),
    path = require('path'),
    nconf = require('nconf'),
    assert = require('assert');

servicecore.register('datanormalization-paypal', datanormalization);

nconf.file({ file: './test/config.json' });

describe("Testing DataNormalization", function () {

	before(function (next) {
        this.timeout(5000);

        process.env.SHARE_PWD = 'aardvark';

        var options = {
            dir:        path.join(process.cwd() + '/node_modules', 'testkeystore')
        };

        vault.create(options, function (err, pkg) {
            nconf.set('services:servicecore:sessions', pkg.getClientSessions());

            var credentials = pkg.getClientCredentials();

            Object.getOwnPropertyNames(credentials).forEach(function (key)  {
                nconf.set('services:servicecore:' + key, credentials[key]);
            });

            servicecore.configuration = nconf.get('services');

            next();
        });
    });

	/* The following are auto-generated empty payload and empty test methods for you to get started: */
	
	it("do_address_normalization", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		datanormalizationClient = servicecore.create("datanormalization-paypal");
		
		datanormalizationClient.do_address_normalization(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("do_address_normalization_async", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		datanormalizationClient = servicecore.create("datanormalization-paypal");
		
		datanormalizationClient.do_address_normalization_async(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("lookup_address", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		datanormalizationClient = servicecore.create("datanormalization-paypal");
		
		datanormalizationClient.lookup_address(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
});