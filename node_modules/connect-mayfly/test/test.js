var path = require('path'),
    assert = require('assert'),
    session = require('express-session'),
    nconf = require('nconf'),
    cal = require('cal'),
    MayflyStore = require('../index')(session),
    EventEmitter = require('events').EventEmitter;

cal.setDefaultWriteStream('console');
cal.defaults.formatter = cal.formatter.console;

nconf.use('memory');
nconf.set("mayfly", {
    "host" : 'msmaster.qa.paypal.com',
    "port" : 10368
});

var useCases = [
    {
        title: 'connect-mayfly, no shared session',
        config: {
            lifetime : 120
        }
    },
    {
        title: 'connect-mayfly, with shared session',
        config: {
            lifetime : 120,
            sharedSession: true
        }
    },
    {
        title: 'connect-mayfly, with crypto',
        config: {
            lifetime : 120,
            crypto: true
        }
    }
];

function testSuite(config) {
    describe(config.title, function () {
        var mayflyConfig = config.config;

        var store = new MayflyStore(mayflyConfig);

        var sessionKey = 's_key_' + Date.now();

        it('should set a value', function (next) {
            store.set(sessionKey, { cookie: { maxAge: 2000 }, name: 'mayfly' }, function (err, data) {
                assert.ok(!err, '#set() got an error');
                assert.ok(data, '#set() is not ok');
                next();
            });
        });


        it('should get a value', function (next) {
            store.get(sessionKey, function (err, data) {
                assert.ok(!err, '#get() got an error');
                assert.deepEqual({ maxAge: 2000 }, data.cookie);
                assert.equal('mayfly', data.name);
                assert.equal(true, data._isNewSession);
                assert.deepEqual({}, data._shared);
                next();
            });
        });

        it('should set a value - 2nd time', function (next) {
            store.set(sessionKey, { cookie: { maxAge: 2000 }, name: 'newMayflyValue' }, function (err, data) {
                assert.ok(!err, '#set() got an error');
                assert.ok(data, '#set() is not ok');
                next();
            });
        });

        it('should get a value - 2nd time', function (next) {
            store.get(sessionKey, function (err, data) {
                assert.ok(!err, '#get() got an error');
                assert.deepEqual({ maxAge: 2000 }, data.cookie);
                assert.equal('newMayflyValue', data.name);
                assert.equal(false, data._isNewSession);
                assert.deepEqual({}, data._shared);
                next();
            });
        });


        it('should get a nil value', function (next) {
            store.get('akeythatdoesntexist', function (err, data) {
                assert.ok(!err, '#get() got an error');
                assert.deepEqual({ path: '/', _expires: null, originalMaxAge: null, httpOnly: true }, data.cookie);
                assert.deepEqual({}, data._shared);
                next();
            });
        });


        it('should destroy a session', function (next) {
            store.destroy(sessionKey, function (err, ok) {
                assert.ok(!err, '#destroy() got an error');
                assert.ok(ok, '#destroy() is not ok');
                next();
            });
        });
    });
}

useCases.forEach(testSuite);

describe('connect-mayfly with _isNewSession = false', function () {
    var mayflyConfig = {
        lifetime : 120
    };

    var store = new MayflyStore(mayflyConfig);

    it('should set a value', function (next) {
        store.set('session_test', { cookie: { maxAge: 200 }, name: 'mayfly1' }, function (err, data) {
            assert.ok(!err, '#set() got an error');
            assert.ok(data, '#set() is not ok');
            store.set('session_test', { cookie: { maxAge: 2000 }, name: 'mayfly2' }, function (err, data) {
                assert.ok(!err, '#set() got an error');
                assert.ok(data, '#set() is not ok');
                next();
            });
        });
    });


    it('should get a value', function (next) {
        store.get('session_test', function (err, data) {
            assert.ok(!err, '#get() got an error');
            assert.deepEqual({ maxAge: 2000 }, data.cookie);
            assert.equal('mayfly2', data.name);
            assert.equal(false, data._isNewSession);
            assert.deepEqual({}, data._shared);
            next();
        });
    });

    it('should destroy a session', function (next) {
        store.destroy('session_test', function (err, ok) {
            assert.ok(!err, '#destroy() got an error');
            assert.ok(ok, '#destroy() is not ok');
            next();
        });
    });
});


describe('using CAL middleware', function () {

    var mayflyConfig = {
        lifetime : 120,
        crypto : true
    };

    before(function (next) {
        cal.middleware({'threadId': 12345})(new EventEmitter(), new EventEmitter(), next);
    });


    var store = new MayflyStore(mayflyConfig);

    it('should set a value', function (next) {
        store.set('session_test', { cookie: { maxAge: 2000 }, name: 'mayfly' }, function (err, data) {
            assert.ok(!err, '#set() got an error');
            assert.ok(data, '#set() is not ok');
            next();
        });
    });


    it('should get a value', function (next) {
        store.get('session_test', function (err, data) {
            assert.ok(!err, '#get() got an error');
            assert.deepEqual({ maxAge: 2000 }, data.cookie);
            assert.equal('mayfly', data.name);
            assert.equal(true, data._isNewSession);
            assert.deepEqual({}, data._shared);
            next();
        });
    });


    it('should get a nil value', function (next) {
        store.get('akeythatdoesntexist', function (err, data) {
            assert.ok(!err, '#get() got an error');
            assert.deepEqual({ path: '/', _expires: null, originalMaxAge: null, httpOnly: true }, data.cookie);
            assert.deepEqual({}, data._shared);
            next();
        });
    });


    it('should destroy a session', function (next) {
        store.destroy('session_test', function (err, ok) {
            assert.ok(!err, '#destroy() got an error');
            assert.ok(ok, '#destroy() is not ok');
            next();
        });
    });
});
