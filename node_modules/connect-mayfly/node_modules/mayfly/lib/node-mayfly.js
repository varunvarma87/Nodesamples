'use strict';

/*eslint no-underscore-dangle:0, handle-callback-err:0 */

var util = require('util'),
    VOBin = require('vobin'),
    events = require('events'),
    CONS = require('./constants'),
    mayflyConfig = require('./mayfly-config'),
    mayflyCrypto = require('./mayfly-crypto'),
    mayflyOperation = require('./mayfly-operation');

var VODeserializer = VOBin.Deserializer,
    OperationType = CONS.OperationType;

/**
 * config
 *   {
 *      appName: '',    //default 'NodeMayflyClient'
 *      namespace : '',  //default 'NodeMayfly'
 *      lifetime : 30,    //default 5 hrs in sec
 *      crypto : false|true //Use data encryption
 *   }
 */

function Mayfly(config) {
    this.init(config);
}

util.inherits(Mayfly, events.EventEmitter);

var proto = Mayfly.prototype;

proto.init = function (config) {
    this._config = mayflyConfig(config);
};

/**
 * Creates a new mayfly record.
 *  @param - key [required]
 *  @param - payload [required]
 *  @param - callback function to be called on success
 */
proto.create = function (key, payload, callback) {
    var config = this._config;
    if (config.useCrypto) {
        mayflyCrypto.encrypt(config, payload, function (err, encryptedPayLoad) {
            mayflyOperation.doOperation(config, OperationType.Create, key, encryptedPayLoad, callback);
        });
    } else {
        mayflyOperation.doOperation(config, OperationType.Create, key, payload, callback);
    }
};

/**
 * Read/Get operation on a mayfly record.
 *  @param - key [required]
 *  @param - callback function to be called on success
 */
proto.read = function (key, callback) {
    var config = this._config;
    mayflyOperation.doOperation(config, OperationType.Get, key, null, function (err, response) {
        if (response.data && config.useCrypto) {
            mayflyCrypto.decrypt(config, response.data, function (err1, plainPayLoad) {
                response.data = plainPayLoad;
                callback(null, response);
            });
        } else {
            callback(err, response);
        }
    });
};


/**
 * Read/Get operation on a mayfly record to read as VO.
 *  @param - key [required]
 *  @param - callback function to be called on success
 */
proto.readVO = function (key, callback) {
    var config = this._config;
    mayflyOperation.doOperation(config, OperationType.Get, key, null, function (err, response) {
        if (response.rawData) {
            var deserialized = VODeserializer.deserialize(response.rawData);
            response.data = deserialized;
            callback(null, response);
        } else {
            callback(err, response);
        }
    });
};

/**
 * Update operation on an existing mayfly record.
 *  @param - key [required]
 *  @param - payload [required]
 *  @param - callback function to be called on success
 */
proto.update = function (key, payload, callback) {
    var config = this._config;
    if (config.useCrypto) {
        mayflyCrypto.encrypt(config, payload, function (err, encryptedPayLoad) {
            mayflyOperation.doOperation(config, OperationType.Update, key, encryptedPayLoad, callback);
        });
    } else {
        mayflyOperation.doOperation(config, OperationType.Update, key, payload, callback);
    }
};

/**
 * Set operation on a mayfly record.
 *  @param - key - required
 *  @param - payload [required]
 *  @param - callback function to be called on success
 */
proto.set = function (key, payload, callback) {
    var config = this._config;
    if (config.useCrypto) {
        mayflyCrypto.encrypt(config, payload, function (err, encryptedPayLoad) {
            mayflyOperation.doOperation(config, OperationType.Set, key, encryptedPayLoad, callback);
        });
    } else {
        mayflyOperation.doOperation(config, OperationType.Set, key, payload, callback);
    }
};

/**
 * Delete operation on a mayfly record.
 *  @param - key - required
 *  @param - callback function to be called on success
 */
proto.destroy = function (key, callback) {
    var config = this._config;
    mayflyOperation.doOperation(config, OperationType.Destroy, key, null, callback);
};

module.exports = Mayfly;
