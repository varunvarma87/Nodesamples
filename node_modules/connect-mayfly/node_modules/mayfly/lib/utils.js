'use strict';

var tryRequire = require('try-require');

var cal = tryRequire('cal'),
    calEvent,
    CAL_TRANSACTION_TYPE = 'MAYFLY';

function calConnectTxn(hostport) {
    var calTxn;
    if (cal) {
        calTxn = cal.createTransaction('CONNECT', hostport);
    }
    return calTxn;
}

function calStatusEvent(status, name, msg) {
    if (cal) {
        calEvent = cal.createEvent(CAL_TRANSACTION_TYPE, name);
        calEvent.status = status || cal.Status.SUCCESS;
        calEvent.addData(msg);
        calEvent.complete();
    }
}

function calErrorEvent(name, msg) {
    calStatusEvent(cal.Status.ERROR, name, msg);
}

/**
 * Mayfly Affinity (aks, Mayfly Continuous Availability) uses the hash (ELFHash) to decide which as primary, 2nd, 3rd etc host to
 * access given a key.
 *
 * DO NOT CHANGE BEFORE SYNC UP WITH C++ MAYFLY TEAM
 * C++ Mayfly Affinity also use the same hash function for the Mayfly Affinity project. Consistency of the hash function
 * between C++, Java and Nodejs Mayfly client is critical.
 *
 * using >>> 0 to convert all the bitwise results into unsigned 32bit equivalent
 */
function affinityHash(input) {
    var hash = 0,
        x = 0,
        i;
    for (i = 0; i < input.length; i++) {
        hash = +((hash << 4) >>> 0) + (+input.charCodeAt(i));

        if ((x = (hash & 0xF0000000) >>> 0) !== 0) {
            hash = (hash ^ ((x >>> 24) >>> 0)) >>> 0;
        }
        hash = (hash & ~x) >>> 0;
    }

    return hash;
}


module.exports = {
    calStatusEvent: calStatusEvent,
    calErrorEvent: calErrorEvent,
    calConnectTxn: calConnectTxn,
    affinityHash: affinityHash
};
