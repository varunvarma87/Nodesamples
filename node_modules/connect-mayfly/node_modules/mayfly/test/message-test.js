'use strict';

var cal = require('cal'),
    nconf = require('nconf'),
    assert = require('assert'),
    CONFIG = require('./config.json'),
    mayflyConfig = require('../lib/mayfly-config'),
    mayflyMsg = require('../lib/mayfly-message'),
    mayflyOperation = require('../lib/mayfly-operation'),
    CONS = require('../lib/constants');

var OperationType = CONS.OperationType,
    CONSTANTS = CONS.CONSTANTS;

cal.setDefaultWriteStream('console');
cal.defaults.formatter = cal.formatter.console;


nconf.use('memory');

describe('mayflyHeader', function () {
    before(function (done) {
        nconf.set("mayfly", {
                "host": CONFIG.IP,
                "port": CONFIG.PORT
            });
        done();
    });


    it('header', function (next) {
        var config = mayflyConfig(),
            msgSize = 10,
            mayflyHeader,
            connection = mayflyOperation.getConnection(config, 0);

        connection.on('connect', function () {
            try {
                mayflyHeader = mayflyMsg.getMayflyHeader(msgSize, 10, 10, connection);
            } catch (err) {
                connection.destroy();
                return;
            }

            it('size should be 40 bytes', function () {
                assert.ok(mayflyHeader.length === 40);
            });
            it('magic code should be 0xDEEFCAFE', function () {
                assert.ok(mayflyHeader.readUInt32BE(0) === 0xDEEFCAFE);
            });
            it('msgSize should be ' + msgSize, function () {
                assert.ok(mayflyHeader.readUInt32BE(4) === msgSize);
            });
        });
        next();
    });
});


describe('operationMessage', function () {

    var testData;

    beforeEach(function () {

        testData = {
            config: mayflyConfig(),
            localIP: new Buffer([127, 0, 0, 1]),
            localPort: 12345,
            key: "recordkey1",
            payload: "test payload data",
            version: 1
        };
    });

    it('size should be 100 bytes', function (next) {

        var operationMsg = mayflyMsg.getOperationMsg(testData.config, OperationType.Set, testData.key, testData.payload, testData.version, testData.localIP);

        assert.equal(operationMsg.length, 100);

        next();
    });

    it('contains provided lifetime header for Set operation', function (next) {

        var operationMsg = mayflyMsg.getOperationMsg(testData.config, OperationType.Set, testData.key, testData.payload, testData.version, testData.localIP);
        var lifetime = operationMsg.readUInt32BE(29);

        assert.equal(lifetime, testData.config.lifetime);

        next();
    });

    it('contains provided lifetime header for Create operation', function (next) {

        var operationMsg = mayflyMsg.getOperationMsg(testData.config, OperationType.Create, testData.key, testData.payload, testData.version, testData.localIP);
        var lifetime = operationMsg.readUInt32BE(29);

        assert.equal(lifetime, testData.config.lifetime);

        next();
    });

    it('contains no-lifetime-header for Get operation', function (next) {

        var operationMsg = mayflyMsg.getOperationMsg(testData.config, OperationType.Get, testData.key, testData.payload, testData.version, testData.localIP);
        var lifetime = operationMsg.readUInt32BE(29);

        assert.equal(lifetime, CONSTANTS.noLifeTimeUpdate);

        next();
    });
});
