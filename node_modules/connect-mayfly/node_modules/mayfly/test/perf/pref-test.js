'use strict';

var cal = require('cal'),
    async = require('async'),
    assert = require('assert'),
    heapdump = require('heapdump'),
    Mayfly = require('../../index'),
    CONFIG = require('../config.json');

var isHeapdumpEnabled = false,
    LOAD_FACTOR = 100;

cal.setDefaultWriteStream('console');

//var IP = 'localhost',
//    PORT = 22;

describe('Pref', function () {
    describe('mayfly Requests', function () {
        var config,
            mayfly;

        before(function (done) {

            config = {
                crypto: false,
                host: CONFIG.IP,
                port: CONFIG.PORT
            };
            mayfly = new Mayfly(config);
            setTimeout(function () {
                done();
            }, 1000);

        });

        it('Set', function (next) {
            this.timeout(600000);
            var payloadData = (new Array(2000).join("5"));
            async.timesSeries(5, function (n, cb) {
                async.times(LOAD_FACTOR, function (n1, cb1) {
                    var key = "test_key_" + n + n1;
                    mayfly.set(key, payloadData, function (error, response) {
                        assert.ok(!error, "Error obj wasn't expected");
                        assert.ok(response.version >= 0);
                        cb1();
                    });
                }, function () {
                    cb();
                });
            }, function () {
                if (isHeapdumpEnabled) {
                    heapdump.writeSnapshot();
                }
                setTimeout(function () {
                    if (isHeapdumpEnabled) {
                        heapdump.writeSnapshot();
                    }
                    next();
                }, 5000);
            });
        });

    });

    describe('mayfly Requests with crypto', function () {
        var config, mayfly;

        before(function (done) {
            config = {
                crypto: true,
                host: CONFIG.IP,
                port: CONFIG.PORT,
                cryptKey: '53JweuLU+BimDBPnrFqvNYscm/I=',
                macKey: '0Qcilz3zZxz0U+TomnvGZ1AuXpg='
            };
            mayfly = new Mayfly(config);
            done();
        });

        it('Set', function (next) {
            this.timeout(600000);
            var payloadData = (new Array(2000).join("5"));
            if (isHeapdumpEnabled) {
                heapdump.writeSnapshot();
            }
            async.timesSeries(5, function (n, cb) {
                async.times(LOAD_FACTOR, function (n1, cb1) {
                    var key = "test_key_" + n + n1;
                    mayfly.set(key, payloadData, function (error, response) {
                        assert.ok(!error, "Error obj wasn't expected");
                        assert.ok(response.version);
                        mayfly.read(key, function (error1, response1) {
                            assert.ok(!error1, "Error obj wasn't expected");
                            assert.ok(response1.version >= 0);
                            assert.equal(response1.data, payloadData, "Read issue");
                            cb1();
                        });
                    });
                }, function () {
                    cb();
                });
            }, function () {
                if (isHeapdumpEnabled) {
                    heapdump.writeSnapshot();
                }
                setTimeout(function () {
                    if (isHeapdumpEnabled) {
                        heapdump.writeSnapshot();
                    }
                    next();
                }, 5000);
            });
        });
    });
});
