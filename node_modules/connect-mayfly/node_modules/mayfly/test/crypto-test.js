'use strict';

var async = require('async'),
    nconf = require('nconf'),
    assert = require('assert'),
    CONFIG = require('./config.json'),
    mayflyConfig = require('../lib/mayfly-config'),
    mayflyCrypto = require('../lib/mayfly-crypto');

nconf.use('memory');

describe('Crypto', function () {
    before(function (done) {

        nconf.set("mayfly", {
                "host": null,
                "port": null,
                "ipport": CONFIG.IPPORT,
                "cryptKey": '53JweuLU+BimDBPnrFqvNYscm/I=',
                "macKey": '0Qcilz3zZxz0U+TomnvGZ1AuXpg='
            });
        done();
    });

    it('original data should be equal to decryptedData: parallel', function (next) {
        var config = mayflyConfig({crypto: true});

        async.times(10, function (n, cb) {
            var data = 'Some random data ' + Date.now() + '_' + n;

            mayflyCrypto.encrypt(config, data, function (err, encryptedData) {
                assert.ok(!err);
                mayflyCrypto.decrypt(config, encryptedData, function (err1, decryptedData) {
                    assert.ok(!err1);
                    assert.equal(data, decryptedData);
                    cb();
                });
            });
        }, function () {
            next();
        });

    });

    it('original data should be equal to decryptedData: series', function (next) {
        var config = mayflyConfig({crypto: true});

        async.timesSeries(10, function (n, cb) {
            var data = 'Some random data ' + Date.now() + '_' + n;

            mayflyCrypto.encrypt(config, data, function (err, encryptedData) {
                assert.ok(!err);
                mayflyCrypto.decrypt(config, encryptedData, function (err1, decryptedData) {
                    assert.ok(!err1);
                    assert.equal(data, decryptedData);
                    cb();
                });
            });
        }, function () {
            next();
        });

    });

});

describe('Incorrect Crypto', function () {
    before(function (done) {
        process.env.DEPLOY_ENV = 'staging';

        nconf.set("mayfly", {
                "host": null,
                "port": null,
                "ipport": CONFIG.IPPORT,
                "cryptKey": 'vault:encrypted_mayflysession_crypt_key',
                "macKey": 'vault:encrypted_mayflysession_mac_key'
            });
        done();
    });

    after(function (done) {
        delete process.env.DEPLOY_ENV;
        nconf.set("mayfly", {
                "cryptKey": '53JweuLU+BimDBPnrFqvNYscm/I=',
                "macKey": '0Qcilz3zZxz0U+TomnvGZ1AuXpg='
            });
        done();
    });

    it('should throw error', function (next) {

        assert.throws(
            function () {
                mayflyConfig({crypto: true});
            }
        );
        next();

    });

});

