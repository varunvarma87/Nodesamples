'use strict';

var cal = require('cal'),
    nconf = require('nconf'),
    assert = require('assert'),
    Mayfly = require('../index'),
    CONFIG = require('./config.json'),
    mayflyConfig = require('../lib/mayfly-config'),
    mayflyCrypto = require('../lib/mayfly-crypto');

cal.setDefaultWriteStream('console');
cal.defaults.formatter = cal.formatter.console;

nconf.use('memory');

describe('Sanity Checks', function () {
    before(function (done) {
        nconf.set("mayfly", {
                "host": null,
                "port": null,
                "ipport": CONFIG.IPPORT_1
            });
        done();
    });

    var config = {
            crypto: false
        };

    it('ipport', function (next) {

        assert.throws(
            function () {
                var mayfly = new Mayfly(config);
                assert.ok(mayfly);
            }
        );

        next();
    });
});

describe('Sanity Checks: bad ipport', function () {
    before(function (done) {
        nconf.set("mayfly", {
                "host": null,
                "port": null,
                "ipport": CONFIG.IPPORT_BAD
            });
        done();
    });

    it('ipport', function (next) {

        assert.doesNotThrow(
            function () {
                var mayfly = new Mayfly();
                assert.ok(mayfly);
            }
        );

        next();
    });
});

describe('mayfly Requests', function () {
    var config,
        mayfly;

    before(function (done) {
        nconf.set("mayfly", {
                "host": null,
                "port": null,
                "ipport": CONFIG.IPPORT
            });

        config = {
            crypto: false
        };
        mayfly = new Mayfly(config);
        done();
    });

    it('Create', function (next) {
        var key = "test_key" + Date.now(),
            payloadData = (new Array(200).join("1"));

        mayfly.create(key, payloadData, function (error, response) {
            assert.ok(!error, "Error obj wasn't expected");
            assert.equal(response.version, 1, "Create issue");
            next();
        });
    });

    it('Update', function (next) {
        var key = "test_key" + Date.now(),
            payloadData = (new Array(200).join("2"));

        mayfly.create(key, payloadData, function (error, response) {
            assert.ok(!error, "Error obj wasn't expected");
            assert.equal(response.version, 1, "Create issue");
            payloadData += payloadData;
            mayfly.update(key, payloadData, function (error1, response1) {
                assert.ok(!error1, "Error obj wasn't expected");
                assert.equal(response1.version, 2, "Update issue");
                next();
            });
        });
    });

    it('Set', function (next) {
        var key = "test_key" + Date.now(),
            payloadData = (new Array(200).join("5"));

        mayfly.set(key, payloadData, function (error, response) {
            assert.ok(!error, "Error obj wasn't expected");
            assert.equal(response.version, 1, "set issue");
            next();
        });
    });

    it('Create & Read', function (next) {
        var key = "test_key" + Date.now(),
            payloadData = (new Array(200).join("3"));

        mayfly.create(key, payloadData, function (error, response) {
            assert.ok(!error, "Error obj wasn't expected");
            assert.equal(response.version, 1, "Create issue");

            mayfly.read(key, function (error1, response1) {
                assert.ok(!error1, "Error obj wasn't expected");
                assert.equal(response1.version, 1, "Read issue");
                assert.equal(response1.data, payloadData, "Read issue");
                next();
            });
        });
    });

    it('Set & Read', function (next) {
        var key = "test_key" + Date.now(),
            payloadData = (new Array(200).join("3"));

        mayfly.set(key, payloadData, function (error, response) {
            assert.ok(!error, "Error obj wasn't expected");
            assert.equal(response.version, 1, "Create issue");

            mayfly.read(key, function (error1, response1) {
                assert.ok(!error1, "Error obj wasn't expected");
                assert.equal(response1.version, 1, "Read issue");
                assert.equal(response1.data, payloadData, "Read issue");
                next();
            });
        });
    });

    it('Create & Destroy', function (next) {
        var key = "test_key" + Date.now(),
            payloadData = (new Array(200).join("4"));

        mayfly.create(key, payloadData, function (error, response) {
            assert.ok(!error, "Error obj wasn't expected");
            assert.equal(response.version, 1, "Create issue");

            mayfly.destroy(key, function (error1, response1) {
                assert.ok(!error1, "Error obj wasn't expected");
                assert.equal(response1.version, 1, "Delete issue");
                mayfly.read(key, function (error2, response2) {
                    assert.ok(!error2, "Error obj wasn't expected");
                    assert.equal(response2.version, 0, "Read issue");
                    assert.ok(!response2.data, "Read issue");
                    next();
                });
            });
        });
    });
});

describe('mayfly Requests with crypto', function () {
    var config, mayfly;

    before(function (done) {
        nconf.set("mayfly", {
                "host": CONFIG.IP,
                "port": CONFIG.PORT,
                "ipport": CONFIG.IPPORT,
                "cryptKey": '53JweuLU+BimDBPnrFqvNYscm/I=',
                "macKey": '0Qcilz3zZxz0U+TomnvGZ1AuXpg='
            });
        config = {
            crypto: true
        };
        mayfly = new Mayfly(config);
        done();
    });

    it('Create', function (next) {
        var key = "test_key" + Date.now(),
            payloadData = (new Array(200).join("1"));

        mayfly.create(key, payloadData, function (error, response) {
            assert.ok(!error, "Error obj wasn't expected");
            assert.equal(response.version, 1, "Create issue");
            next();
        });
    });

    it('Create & Update', function (next) {
        var key = "create_n_update" + Date.now(),
            payloadData = (new Array(200).join("2"));

        mayfly.create(key, payloadData, function (error, response) {
            assert.ok(!error, "Error obj wasn't expected");
            assert.equal(response.version, 1, "Create issue");
            payloadData += payloadData;
            mayfly.update(key, payloadData, function (error1, response1) {
                assert.ok(!error1, "Error obj wasn't expected");
                assert.equal(response1.version, 2, "Update issue");
                next();
            });
        });
    });

    it('Set', function (next) {
        var key = "test_key" + Date.now(),
            payloadData = (new Array(200).join("5"));

        mayfly.set(key, payloadData, function (error, response) {
            assert.ok(!error, "Error obj wasn't expected");
            assert.equal(response.version, 1, "set issue");
            next();
        });
    });

    it('Create & Read', function (next) {
        var key = "create_n_read" + Date.now(),
            payloadData = (new Array(200).join("3"));

        mayfly.create(key, payloadData, function (error, response) {
            assert.ok(!error, "Error obj wasn't expected");
            assert.equal(response.version, 1, "Create issue");

            mayfly.read(key, function (error1, response1) {
                assert.ok(!error1, "Error obj wasn't expected");
                assert.equal(response1.version, 1, "Read issue");
                assert.equal(response1.data, payloadData, "Read issue");
                next();
            });
        });
    });

    it('Set & Read', function (next) {
        var key = "set_n_read" + Date.now(),
            payloadData = (new Array(200).join("3"));

        mayfly.set(key, payloadData, function (error, response) {
            assert.ok(!error, "Error obj wasn't expected");
            assert.equal(response.version, 1, "Create issue");

            mayfly.read(key, function (error1, response1) {
                assert.ok(!error1, "Error obj wasn't expected");
                assert.equal(response1.version, 1, "Read issue");
                assert.equal(response1.data, payloadData, "Read issue");
                next();
            });
        });
    });

    it('Create & Destroy', function (next) {
        var key = "create_n_destroy" + Date.now(),
            payloadData = (new Array(200).join("4"));

        mayfly.create(key, payloadData, function (error, response) {
            assert.ok(!error, "Error obj wasn't expected");
            assert.equal(response.version, 1, "Create issue");

            mayfly.destroy(key, function (error1, response1) {
                assert.ok(!error1, "Error obj wasn't expected");
                assert.equal(response1.version, 1, "Delete issue");
                mayfly.read(key, function (error2, response2) {
                    assert.ok(!error2, "Error obj wasn't expected");
                    assert.equal(response2.version, 0, "Read issue");
                    assert.ok(!response2.data, "Read issue");
                    next();
                });
            });
        });
    });
});

describe('mayfly Requests read VO', function () {
    var config, mayfly;

    before(function (done) {
        nconf.set("mayfly", {
                "host": CONFIG.IP,
                "port": CONFIG.PORT,
                "ipport": null,
                "cryptKey": '53JweuLU+BimDBPnrFqvNYscm/I=',
                "macKey": '0Qcilz3zZxz0U+TomnvGZ1AuXpg='
            });
        config = {
            appName: "claimscollectionserv",
            namespace: "claimscollectionserv.decision",
            crypto: true
        };
        mayfly = new Mayfly(config);
        done();
    });

    it('Read', function (next) {
        var key = "authflowresult-2003563199999557717";

        mayfly.readVO(key, function (error, response) {
            assert.ok(!error, "Error obj wasn't expected");
            assert.equal(response.namespace, 'claimscollectionserv.decision');
            assert.equal(response.key, key);
            next();
        });

    });
});

describe('appName upgrade', function () {
    var configA,
        configB,
        mayflyA,
        mayflyB;

    before(function (done) {
        nconf.set("mayfly", {
                "host": null,
                "port": null,
                "ipport": CONFIG.IPPORT
            });

        configA = {
            appName: 'OldAppName',
            crypto: false
        };
        configB = {
            appName: 'NewAppName',
            crypto: false
        };
        mayflyA = new Mayfly(configA);
        mayflyB = new Mayfly(configB);
        done();
    });

    it('Set & Read', function (next) {
        var key = "set_n_read" + Date.now(),
            payloadData = (new Array(200).join("3"));

        mayflyA.set(key, payloadData, function (error, response) {
            assert.ok(!error, "Error obj wasn't expected");
            assert.equal(response.version, 1, "Create issue");

            mayflyB.read(key, function (error1, response1) {
                assert.ok(!error1, "Error obj wasn't expected");
                assert.equal(response1.version, 1, "Read issue");
                assert.equal(response1.data, payloadData, "Read issue");
                next();
            });
        });
    });

});



describe('mayfly Requests: Error cases', function () {
    before(function (done) {
        nconf.set("mayfly", {
                "host": CONFIG.IP,
                "port": CONFIG.PORT,
                "ipport": CONFIG.IPPORT
            });
        done();
    });

    it('Invalid lifetime', function (next) {

        var config = {
            lifetime: 359200
        };
        try {
            var mayfly = new Mayfly(config);
            assert.ok(mayfly);
        } catch (err) {
            assert.ok(err, "Invalid lifetime: Error obj expected");
            next();
        }
    });

});

function genLargePayload() {
    var payloadData = (new Array(204801).join("-")),
        cipher = require('crypto').createCipher("aes-128-cbc", "password");

    // Encrypt the payload to make it very random and defeat the gzip
    // to ensure we test payload larger than Mayfly allows
    var encryptedData = cipher.update(payloadData, 'utf8', 'base64');
    encryptedData += cipher.final('base64');
    return encryptedData;
}

describe('mayfly Requests: Error cases', function () {
    before(function (done) {
        nconf.set("mayfly", {
                "host": CONFIG.IP,
                "port": CONFIG.PORT,
                "ipport": CONFIG.IPPORT
            });
        done();
    });

    it('Bad zlib payload', function (next) {
        var cryptoConfig = mayflyConfig({crypto: true}),
            nonCryptoConfig = mayflyConfig({crypto: false});

        var plainData = "Random garbage that is not gzip";

        try {
            // First encrypt plain text
            mayflyCrypto.encrypt(cryptoConfig, new Buffer(plainData), function (data) {
                // Then try to decrypt what should be encrypted and gzipped payload.
                mayflyCrypto.decrypt(nonCryptoConfig, data, function (error, response) {
                    assert.ok(!!error, "Expect no error");
                    assert.equal(response, null, "Null expected on non-gzip payload");
                    next();
                });
            });
        } catch (err) {
            assert.ok(err, "zlib payload, mayfly create: Error obj expected");
            next();
        }
    });

    it('Invalid large payload', function (next) {
        var mayfly = new Mayfly();
        var key = "test_key" + Date.now(),
            payloadData = genLargePayload();

        try {
            mayfly.create(key, payloadData, function (error, response) {
                assert.ok(error, "Invalid payload: Larger than allowed of 204800");
                assert.ok(!!response, "Create issue");
                next();
            });
        } catch (err) {
            assert.ok(err, "Invalid payload, mayfly create: Error obj expected");
            next();
        }
    });


    it('No Callback', function (next) {
        var mayfly = new Mayfly();
        var key = "test_key" + Date.now(),
            payloadData = (new Array(20481).join("-"));
        //With No callback, this won't do anything except cal logging
        mayfly.set(key, payloadData);

        //Checking if this key is used for the 1st time
        mayfly.set(key, payloadData, function (error, response) {
            assert.ok(!error, "No Callback, 2nd create: Error obj wasn't expected");
            assert.equal(response.version, 1, "version should be 1");
            next();
        });
    });


});

describe('mayfly Connection Error: No Server', function () {
    before(function (done) {
        nconf.set("mayfly", {
                "host": CONFIG.IP,
                "port": 8999,
                "ipport": null
            });
        done();
    });
    var config = {
            crypto: false
        };

    it('No Server listening', function (next) {
        var mayfly = new Mayfly(config);
        var key = "test_key" + Date.now(),
            payloadData = (new Array(8999).join("-"));
        try {
            mayfly.create(key, payloadData, function (error, response) {
                assert.ok(error, "No Server listening: Error obj expected");
                assert.ok(!!response, "Create issue");
                next();
            });
        } catch (err) {
            assert.ok(err, "No Server listening, mayfly.create: Error obj expected");
            next();
        }
    });

});

describe('mayfly Connection Error: Timeout', function () {
    before(function (done) {
        nconf.set("mayfly", {
                "host": CONFIG.IP,
                "port": CONFIG.PORT,
                "ipport": null
            });
        done();
    });
    var config = {
            crypto: false,
            noRetries: 2,
            timeout: 4,        //setting timeout 1 ms
            connectTimeout: 1
        };

    it('timeout', function (next) {
        var mayfly = new Mayfly(config);
        var key = "test_key" + Date.now(),
            payloadData = (new Array(89999).join("-"));
        try {
            mayfly.set(key, payloadData, function (error, response) {
                assert.ok(!!error, "Timeout: Error obj expected");
                assert.ok(!!response, "set issue");
                next();
            });
        } catch (err) {
            assert.ok(err, "Timeout, mayfly set: Error obj expected");
            next();
        }
    });

});


describe('invalid Host', function () {
    before(function (done) {
        nconf.set("mayfly", {
                "host": 'nostage.qa.paypal.com',
                "port": CONFIG.PORT,
                "ipport": null
            });
        done();
    });
    var config = {
            crypto: false,
            noRetries: 1,
            connectTimeout: 10
        };

    it('should handle invalid host properly mayfly read', function (next) {
        var mayfly = new Mayfly(config);
        var key = "test_key" + Date.now();
        mayfly.read(key, function (error, response) {
            assert.ok(!!error, "Error: getaddrinfo ENOTFOUND");
            assert.ok(!!response, "read issue");
            next();
        });
    });


    it('should handle invalid host properly mayfly set', function (next) {
        var mayfly = new Mayfly(config);
        var key = "test_key" + Date.now(),
            payloadData = (new Array(89999).join("-"));
        mayfly.set(key, payloadData, function (error, response) {
            assert.ok(!!error, "Error: getaddrinfo ENOTFOUND");
            assert.ok(!!response, "set issue");
            next();
        });
    });
});
