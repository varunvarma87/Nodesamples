'use strict';

var Mayfly = require('../index'),
    cal = require('cal'),
    testConfig = require('../test/config'),
    metrics = require('metrics');

cal.setDefaultWriteStream('console');
cal.defaults.formatter = cal.formatter.silent;

//creating a new instance of mayfly client, optional config
var num_clients = 1,
    tests = [],
    msgCounter = 0,
    iKey, small_str, large_str;

var config = {
    crypto: true,
    host : testConfig.IP,
    port : testConfig.PORT
};

var startTime = process.hrtime();

function getNanoTime() {
    var diff = process.hrtime(startTime);
    return diff[0] * 1e9 + diff[1];
}

function lpad(input, len, chr) {
    var str = input.toString();
    chr = chr || " ";

    while (str.length < len) {
        str = chr + str;
    }
    return str;
}

function Test(args) {
    this.args = args;

    this.callback = null;
    this.clients = [];
    this.clients_ready = 0;
    this.commands_sent = 0;
    this.commands_completed = 0;

    this.command_latency = new metrics.Histogram();
}

Test.prototype.run = function (callback) {
    var i;

    this.callback = callback;

    for (i = 0; i < num_clients ; i++) {
        this.new_client(i);
    }
};

Test.prototype.new_client = function (id) {
    var new_client;

    new_client = new Mayfly(config);
    this.clients[id] = new_client;
    this.on_clients_ready();
};

Test.prototype.on_clients_ready = function () {
    process.stdout.write(lpad(this.args.descr, 13) + ", " + lpad(this.args.pipeline, 5) + "/" + this.clients_ready + " ");

    this.test_start = Date.now();
    this.fill_pipeline();
};


Test.prototype.fill_pipeline = function () {


    while (this.commands_sent < this.args.pipeline) {
        this.commands_sent++;
        this.send_next();
    }
    if (this.commands_completed === this.commands_sent) {
        this.print_stats();
        this.stop_clients();
    }
};

Test.prototype.stop_clients = function () {
    var self = this;

    this.clients.forEach(function (client, pos) {
        if (pos === self.clients.length - 1) {
            self.callback();
        }
    });
};

Test.prototype.send_next = function () {
    var self = this,
        cur_client = this.commands_sent % this.clients.length,
        startTime = Date.now(),
        key;

    msgCounter++;

    if (this.args.genKey) {
        key = "benchmark_" + getNanoTime();
    } else {
        key = this.args.key;
    }

    if (this.args.data) {
        this.clients[cur_client][this.args.command](key, this.args.data, function (err, res) {
            if (err) {
                throw err;
            }
            self.commands_completed++;
            self.command_latency.update(Date.now() - startTime);
            self.fill_pipeline();
        });
    } else {
        this.clients[cur_client][this.args.command](this.args.key, function (err, res) {
            if (err) {
                throw err;
            }
            self.commands_completed++;
            self.command_latency.update(Date.now() - startTime);
            self.fill_pipeline();
        });
    }
};

Test.prototype.print_stats = function () {
    var obj = this.command_latency.printObj();
    var duration = Date.now() - this.test_start;

    console.log("min/max/avg/mean/p95/total: " +
        lpad(obj.min, 4) + "/" + lpad(obj.max, 4) + "/" + lpad(obj.mean.toFixed(2), 7) + "/" + lpad(obj.mean.toFixed(2), 7) + "/" + lpad(obj.p95.toFixed(2), 7) + "/" +
        lpad(duration, 6) + "ms, " + lpad((this.args.pipeline / (duration / 1000)).toFixed(2), 8) + " ops/sec");
};

small_str = "1234";
large_str = JSON.stringify(process.env) +
            JSON.stringify(require('../package.json')) +
            testConfig.IPPORT +
            (new Array(10480).join("-"));

iKey = "benchmark_" + Date.now();

tests.push(new Test({descr: "Create small payload", command: "set", genKey: true,  data: small_str, pipeline: 1}));
tests.push(new Test({descr: "Create small payload", command: "set", genKey: true,  data: small_str, pipeline: 10}));
tests.push(new Test({descr: "Create small payload", command: "set", genKey: true,  data: small_str, pipeline: 50}));
tests.push(new Test({descr: "Create small payload", command: "set", genKey: true, data: small_str, pipeline: 100}));
tests.push(new Test({descr: "Create small payload", command: "set", genKey: true, data: small_str, pipeline: 500}));


tests.push(new Test({descr: "Create large payload", command: "set", genKey: true, data: large_str, pipeline: 1}));
tests.push(new Test({descr: "Create large payload", command: "set", genKey: true, data: large_str, pipeline: 10}));
tests.push(new Test({descr: "Create large payload", command: "set", genKey: true, data: large_str, pipeline: 50}));
tests.push(new Test({descr: "Create large payload", command: "set", genKey: true, data: large_str, pipeline: 100}));
tests.push(new Test({descr: "Create large payload", command: "set", genKey: true, data: large_str, pipeline: 500}));


tests.push(new Test({descr: "Create small payload", command: "set", key: iKey, data: small_str, pipeline: 1}));

tests.push(new Test({descr: "Update small payload", command: "update", key: iKey, data: small_str, pipeline: 1}));
tests.push(new Test({descr: "Update small payload", command: "update", key: iKey, data: small_str, pipeline: 5}));
tests.push(new Test({descr: "Update small payload", command: "update", key: iKey, data: small_str, pipeline: 50}));
tests.push(new Test({descr: "Update small payload", command: "update", key: iKey, data: small_str, pipeline: 100}));
tests.push(new Test({descr: "Update small payload", command: "update", key: iKey, data: small_str, pipeline: 500}));


tests.push(new Test({descr: "Update large payload", command: "update", key: iKey, data: large_str, pipeline: 1}));
tests.push(new Test({descr: "Update large payload", command: "update", key: iKey, data: large_str, pipeline: 5}));
tests.push(new Test({descr: "Update large payload", command: "update", key: iKey, data: large_str, pipeline: 50}));
tests.push(new Test({descr: "Update large payload", command: "update", key: iKey, data: large_str, pipeline: 100}));
tests.push(new Test({descr: "Update large payload", command: "update", key: iKey, data: large_str, pipeline: 500}));

iKey = "benchmark_" + Date.now();
tests.push(new Test({descr: "Create small payload", command: "set", key: iKey, data: small_str, pipeline: 1}));

tests.push(new Test({descr: "Read small payload", command: "read", key: iKey, pipeline: 1}));
tests.push(new Test({descr: "Read small payload", command: "read", key: iKey, pipeline: 5}));
tests.push(new Test({descr: "Read small payload", command: "read", key: iKey, pipeline: 50}));
tests.push(new Test({descr: "Read small payload", command: "read", key: iKey, pipeline: 100}));
tests.push(new Test({descr: "Read small payload", command: "read", key: iKey, pipeline: 500}));


iKey = "benchmark_" + Date.now();
tests.push(new Test({descr: "Create large payload", command: "set", key: iKey, data: large_str, pipeline: 1}));

tests.push(new Test({descr: "Read large payload", command: "read", key: iKey, pipeline: 1}));
tests.push(new Test({descr: "Read large payload", command: "read", key: iKey, pipeline: 5}));
tests.push(new Test({descr: "Read large payload", command: "read", key: iKey, pipeline: 50}));
tests.push(new Test({descr: "Read large payload", command: "read", key: iKey, pipeline: 100}));
tests.push(new Test({descr: "Read large payload", command: "read", key: iKey, pipeline: 500}));


function next() {
    var test = tests.shift();
    if (test) {
        test.run(function () {
            next();
        });
    } else {
        console.log("Message Send: %s, Time look: %s", msgCounter, Date.now() - ss);

        process.exit(0);
    }
}
var ss = Date.now();
next();