"use strict";
var fs = require("fs"),
	libxmljs = require("libxmljs");

module.exports = function (grunt) {
	grunt.registerMultiTask('autorerun', 'grab any failed tests from the automation xunit files', function () {
		var files = this.filesSrc,
			options = this.options(),
			rerunTask = options.rerunTask,
			rerunSrc = options.rerunSrc,
			rerunDescription = options.description,
			ts = 0,
		//done = this.async(),
			latestFiles = [],
			failNames = [],
			failJSON = {
				"iterations": []
			},
			failNumber = 1,
			isLatest = function (element) {
				//get timestamp element of filename
				var _ts = Number(element.match(/[0-9]{13}/));
				if (_ts === ts) {
					latestFiles.push(element);
				} else if (_ts > ts) {
					latestFiles = [];
					ts = _ts;
					latestFiles.push(element);
				}
			};
		files.forEach(isLatest);
		//open each of the latest files and find failures
		latestFiles.forEach(function (file) {
			var _xml = fs.readFileSync(file),
				xmlDoc = libxmljs.parseXml(_xml),
				newXmlStr = "",
				fails = xmlDoc.find("./testcase[failure]"),
				suiteElement = xmlDoc.get("../testsuite"),
				testsAttr = Number(suiteElement.attr("tests").value()),
				failuresAttr = Number(suiteElement.attr("failures").value()),
				errorsAttr = Number(suiteElement.attr("errors").value()),
				changeFile = false,
			attrsObj = {};
			fails.forEach(function (fail) {
				var _failName = fail.attr('classname').value() + " " + fail.attr('name').value();
				//don't add any before all hook failures
				if (!(_failName.indexOf('"before all" hook') >= 0)) {
					changeFile = true;
					//remove test failure from orig xunit report
					fail.remove();
					//decrement suiteElement attrs tests/failures/errors
					(testsAttr > 0) ? testsAttr-- : null;
					(failuresAttr > 0) ? failuresAttr-- : null;
					(errorsAttr > 0) ? errorsAttr-- : null;
					//push failure to retry
					failNames.push(_failName);
				}
				attrsObj = {"tests": testsAttr, "failures": failuresAttr, "errors": errorsAttr};
				suiteElement.attr(attrsObj);
				newXmlStr = xmlDoc.toString();
				if (changeFile) {
					fs.writeFileSync(file, newXmlStr);
				}
			});
		});
		failNames.forEach(function (_failName) {
			var desc = rerunDescription + "-" + failNumber++;
			failJSON.iterations.push({"description": desc, "grep": _failName});
		});
		console.log("grunt:autorerun iterations: ", failJSON.iterations);
		grunt.config.set(rerunTask, {
			"src": rerunSrc,
			"options": {
				"iterations": failJSON.iterations
			}
		});
	});
}