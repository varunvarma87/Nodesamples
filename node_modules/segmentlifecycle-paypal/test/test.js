/*global describe:false, it:false, before:false, beforeEach:false, after:false, afterEach:false*/
'use strict';

var segmentlifecycle = require('../index'),
    servicecore = require('servicecore'),
    useraccesscontrol = require('useraccesscontrol-paypal'),
    vault = require('vault'),
    path = require('path'),
    nconf = require('nconf'),
    assert = require('assert');

servicecore.register('segmentlifecycle-paypal', segmentlifecycle);

nconf.file({ file: './test/config.json' });

describe("Testing SegmentLifecycle", function () {

    var updated_client_actor;

	before(function (next) {
        this.timeout(5000);

        process.env.SHARE_PWD = 'aardvark';

        var options = {
            dir:        path.join(process.cwd() + '/node_modules', 'testkeystore')
        };

        vault.create(options, function (err, pkg) {
            nconf.set('services:servicecore:sessions', pkg.getClientSessions());

            var credentials = pkg.getClientCredentials();

            Object.getOwnPropertyNames(credentials).forEach(function (key)  {
                nconf.set('services:servicecore:' + key, credentials[key]);
            });

            servicecore.configuration = nconf.get('services');

            next();
        });
    });

	it("Get actor from UserAccessControl in userauthserv", function (next) {
        this.timeout(5000);
        var authReqAlias = {
            claims: [
                {
                    type: 0,
                    value: "schandrappa-msb@paypal.com"
                },
                {
                    type: 1,
                    value: "11111111"
                }
            ]
        };
        var useraccesscontrolClient = servicecore.create('useraccesscontrol-paypal');
        useraccesscontrolClient.create_token(authReqAlias, function (error, result) {
            updated_client_actor = result.body.result.updated_client_actor;
            assert(!error && result.body);
            assert(updated_client_actor);
            next();
        });
    });

	it("set_segment", function (next) {
		this.timeout(5000);
		var payload = {
            _type: "Marketing::SetSegmentRequest",
            account_segment_input: {
                _type: "Marketing::SegmentInputVO",
                account_number: parseInt(updated_client_actor.actor_account_number),
                segment_payload: [
                    {
                        _type: "Marketing::SegmentPayload",
                        segment_type: "2",
                        segment_name: "HAWK_OPT_INOUT_ACTION",
                        segment_value: 1,
                        time_updated: "1234567890"
                    }
                ],
                segment_payload_new: [
                    {
                        _type: "Marketing::SegmentVO",
                        type: "2",
                        name: "HAWK_OPT_INOUT_ACTION",
                        value: 1,
                        time_updated: 1234567890
                    }
                ]
            }
        },
		segmentlifecycleClient = servicecore.create("segmentlifecycle-paypal");
		
		segmentlifecycleClient.set_segment(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
});