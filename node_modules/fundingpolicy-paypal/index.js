/*global require:true, exports:true, module:true, console:true */
'use strict';
var assert = require('assert'),
    serviceEndpoints = require('./ServiceEndpoints'),
    ServiceHelper = require('./ServiceHelper'),
    jsonschema = require('json-schema'),
    clone = require('clone'),
    xpaypalcontext = require('./xpaypalcontext');

exports = module.exports = function (config, transport) {

    var operations = {

            invoke: function (serviceName, account, params, callback) {

                var serviceEndpoint = serviceEndpoints[serviceName],
                    endPoint,
                    headers,
                    payload,
                    queryParams;

                if (serviceEndpoint.paramType === 'hybrid') {
                    endPoint = ServiceHelper.formatEndpoint(serviceEndpoint, params.inline);
                    payload = params.body;
                } else {
                    endPoint = ServiceHelper.formatEndpoint(serviceEndpoint, params);
                    payload = params;
                }

                if (typeof payload === 'function') {
                    payload = null;
                    callback = params;
                }

                headers = {};
                headers.accept = 'application/json';
                headers['content-type'] = 'application/json';
                headers['X-PAYPAL-SECURITY-CONTEXT'] = clone(xpaypalcontext['X-PAYPAL-SECURITY-CONTEXT']);
                ServiceHelper.populateHeaders(headers, account);
                if (serviceEndpoint.action === 'GET') {
                    transport({
                        headers: headers,
                        qs: payload,
                        path: endPoint,
                        method: serviceEndpoint.action
                    }, callback);
                } else {
                    transport({
                        headers: headers,
                        body: JSON.stringify(payload),
                        path: endPoint,
                        method: serviceEndpoint.action
                    }, callback);
                }
            },


            /*
             * Uses json-schema to validate a passed param object
             */
            validateSchema: function (params, schema) {
                var result = jsonschema.validate(params, schema);
                return result;
            }

        };

    Object.keys(serviceEndpoints).forEach(function (serviceName) {
        operations[serviceName] = function (account, params, callback) {
            return this.invoke(serviceName, account, params, callback);
        };
    });

   return operations;
};