/*global describe:true, require:true, it:true , console.:true*/
'use strict';

var assert = require('assert'),
    async = require('async'),
    nconf = require("nconf"),
    account = {
        accountNumber: '1469595336934870342',
        id: '342387'
    },
    should = require('should'),
    serviceCore = require('servicecore');

nconf.defaults({
    'padservice': {
        'protocol': 'https',
        'hostname': "stage2dev412.qa.paypal.com",
        'port': 14333,
        'rejectUnauthorized': false,
        'contextPath': '/',
        'transport': 'generic'
    }
});

serviceCore.register('padservice', require('../index'));
serviceCore.configuration = nconf.get();
var padServiceLib = serviceCore.create('padservice');

describe('PadServiceLib Tests', function () {

    it('should test a post call to enrollPAD ', function (done) {
        this.timeout(50000);
        var param_pad = {
            "set_default_payment_method": "On"
        };

        var addCallback = function(err,result){
            if(!err) {
                result.should.have.property('statusCode');
            }
            done();
        };
        var result = padServiceLib.invoke('enrollPAD',account, param_pad, addCallback);
    });

    it('should test a get call to getPADEnrollmentStatus ', function (done) {
        this.timeout(50000);

        var callback = function(err,result){
            if(!err) {
                result.should.have.property('statusCode');
            }
            done();
        };
        var result = padServiceLib.invoke('getPADEnrollmentStatus',account, callback);
    });

	it('should test a put call to updatePAD', function (done) {
		this.timeout(50000);

		var callback = function (err, result) {
			if (!err) {
				result.should.have.property('statusCode');
			}
			done();
		};
		var result = padServiceLib.invoke('updatePAD', account, callback);
	});

});



