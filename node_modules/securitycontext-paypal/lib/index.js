'use strict';

var contextify = require('./validation'),
    servicecore = require('servicecore'),
    utils = require('./utils');

/**
 * Sets up the middleware.
 * @type {exports}
 */
module.exports = function () {

    /**
     * security middleware. validates token, writes new cookie.
     * @param req
     * @param res
     * @param next
     */
    function middleware(req, res, next) {
        var securityContext, serializedToken;

        utils.debug('Security Context middleware.');

        //Setup the security context.
        contextify(req, res, function (error) {
            if (error) {
                next(error);
                return;
            }

            securityContext = req.securityContext;
            serializedToken = req.serializedToken;

            if (securityContext && serializedToken && securityContext.actor.auth_state === 'LOGGEDIN') {
                res.encryptedCookie('user_session', req.serializedToken, { secure: process.env.DEPLOY_ENV ? true : (req.protocol === 'https' ? true  : false), httpOnly: true, domain: resolveDomain(req) }, next);
                return;
            }

            next();
        });
    }

    return middleware;
};

/**
 * Resolves the proper domain to use for setting the cookie.
 * @param req
 * @returns {string}
 */
function resolveDomain(req) {
    var host, domain;

    if (process.env.DEPLOY_ENV) {
        return '.paypal.com';
    }

    host = req.get('host');
    domain = host.substr(0, host.indexOf(':') || host.length);

    return domain !== 'localhost' ? '.paypal.com' : domain;
}
