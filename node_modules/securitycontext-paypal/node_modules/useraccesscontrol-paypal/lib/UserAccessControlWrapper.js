'use strict';

var camelscore = require('camelscore');

exports = module.exports = function (config, transport) {
	
    return {
		/**
		 * evaluate_policies
		 * @param request
		 * @param callback
		 */
		evaluate_policies: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::EvaluatePoliciesRequest', request);
			
			transport({
		        service: 'User::UserAccessControl',
		        operation: 'evaluate_policies',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * create_token
		 * @param request
		 * @param callback
		 */
		create_token: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::CreateTokenRequest', request);
			
			transport({
		        service: 'User::UserAccessControl',
		        operation: 'create_token',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * upgrade_token
		 * @param request
		 * @param callback
		 */
		upgrade_token: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::UpgradeTokenRequest', request);
			
			transport({
		        service: 'User::UserAccessControl',
		        operation: 'upgrade_token',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * validate_token
		 * @param request
		 * @param callback
		 */
		validate_token: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::ValidateTokenRequest', request);
			
			transport({
		        service: 'User::UserAccessControl',
		        operation: 'validate_token',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * invalidate_token
		 * @param request
		 * @param callback
		 */
		invalidate_token: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::InvalidateTokenRequest', request);
			
			transport({
		        service: 'User::UserAccessControl',
		        operation: 'invalidate_token',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * generate_one_time_password
		 * @param request
		 * @param callback
		 */
		generate_one_time_password: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::GenerateOneTimePasswordRequest', request);
			
			transport({
		        service: 'User::UserAccessControl',
		        operation: 'generate_one_time_password',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * generate_temporary_pin
		 * @param request
		 * @param callback
		 */
		generate_temporary_pin: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::GenerateTemporaryPinRequest', request);
			
			transport({
		        service: 'User::UserAccessControl',
		        operation: 'generate_temporary_pin',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * load_properties
		 * @param request
		 * @param callback
		 */
		load_properties: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::LoadPropertiesRequest', request);
			
			transport({
		        service: 'User::UserAccessControl',
		        operation: 'load_properties',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * update_properties
		 * @param request
		 * @param callback
		 */
		update_properties: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::UpdatePropertiesRequest', request);
			
			transport({
		        service: 'User::UserAccessControl',
		        operation: 'update_properties',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		}
		
	};
};