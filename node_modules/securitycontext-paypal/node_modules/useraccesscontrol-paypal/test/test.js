/*global describe:false, it:false, before:false, beforeEach:false, after:false, afterEach:false*/
'use strict';

var useraccesscontrol = require('../lib/UserAccessControlWrapper'),
    servicecore = require('servicecore'),
    vault = require('vault'),
    path = require('path'),
    nconf = require('nconf'),
    assert = require('assert');

servicecore.register('useraccesscontrol-paypal', useraccesscontrol);

nconf.file({ file: './test/config.json' });

describe("Testing UserAccessControl in userauthserv", function () {

    before(function (next) {

        this.timeout(5000);

        process.env.SHARE_PWD = 'aardvark';

        var options = {
            dir:        path.join(process.cwd(), 'node_modules', 'testkeystore')
        };

        vault.create(options, function (err, pkg) {
            nconf.set('services:servicecore:sessions', pkg.getClientSessions());

            var credentials = pkg.getClientCredentials();

            Object.getOwnPropertyNames(credentials).forEach(function (key)  {
                nconf.set('services:servicecore:' + key, credentials[key]);
            });

            servicecore.configuration = nconf.get('services');

            next();
        });
    });

    it("invoke create_token given email", function (next) {
        this.timeout(5000);
        var authReqAlias = {
            claims: [
                {
                    type: 0,
                    value: "sparta@paypal.com"
                },
                {
                    type: 1,
                    value: "11111111"
                }
            ]
        };
        var useraccesscontrolClient = servicecore.create('useraccesscontrol-paypal');
        useraccesscontrolClient.create_token(authReqAlias, function (error, result) {
            assert(!error && result.body);
            assert(result.statusCode === 200);
            assert(result.body.result.result === "0");
            next();
        });
    });

    it("invoke create_token given phone", function (next) {
        this.timeout(5000);
        var authReqPhone = {
            claims: [
                {
                    type: 2,
                    value: "+1 7182811222"
                },
                {
                    type: 3,
                    value: "5647"
                }
            ]
        };
        var useraccesscontrolClient = servicecore.create('useraccesscontrol-paypal');
        useraccesscontrolClient.create_token(authReqPhone, function (error, result) {
            assert(!error && result.body);
            assert(result.statusCode === 200);
            assert(result.body.result.result === "0");
            next();
        });
    });

    /*it("should invoke", function (next) {
        this.timeout(5000);
        useraccesscontrol.evaluate_policies(payload, function (error, result) {
            assert(!error && result.body);
            next();
        });
    });

    it("should invoke", function (next) {
        this.timeout(5000);
        var payload = {
            timeout: 900,
            channel: "WEB",
            securityNamespace: [
                ""
            ],
            clientActor: {
                actorAuthType: validateTokenInput.updatedClientActor.actorAuthType,
                actorAccountNumber: validateTokenInput.updatedClientActor.actorAccountNumber,
                actorIpAddr: validateTokenInput.updatedClientActor.actorIpAddr,
                entryPoint: validateTokenInput.updatedClientActor.entryPoint,
                token: validateTokenInput.updatedClientActor.token,
                tokenType: validateTokenInput.updatedClientActor.tokenType,
            }
        };
        useraccesscontrol.validate_token(payload, function (error, result) {
            assert(!error && result.body);
            next();
        });
    });

    it("should invoke", function (next) {
        this.timeout(5000);
        useraccesscontrol.upgrade_token(payload, function (error, result) {
            assert(!error && result.body);
            next();
        });
    });

    it("should invoke", function (next) {
        this.timeout(5000);
        useraccesscontrol.invalidate_token(payload, function (error, result) {
            assert(!error && result.body);
            next();
        });
    });

    it("should invoke", function (next) {
        this.timeout(5000);
        useraccesscontrol.generate_one_time_password(payload, function (error, result) {
            assert(!error && result.body);
            next();
        });
    });

    it("should invoke", function (next) {
        this.timeout(5000);
        useraccesscontrol.generate_temporary_pin(payload, function (error, result) {
            assert(!error && result.body);
            next();
        });
    });

    it("should invoke", function (next) {
        this.timeout(5000);
        useraccesscontrol.load_properties(payload, function (error, result) {
            assert(!error && result.body);
            next();
        });
    });

    it("should invoke", function (next) {
        this.timeout(5000);
        useraccesscontrol.update_properties(payload, function (error, result) {
            assert(!error && result.body);
            next();
        });
    });*/
});
