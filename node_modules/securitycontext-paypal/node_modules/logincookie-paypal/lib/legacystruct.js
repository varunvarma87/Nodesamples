'use strict';

var Long = require('long');

/**
 * @see https://dev.paypal.com/wiki/Sparta/LoginSessionCookie
 * @param data
 * @constructor
 */
function LegacyStruct(data) {
    this._buffer = data || new Buffer(52);

    data || this._buffer.fill(0);

    this._accountNumber = undefined;
    this._passwordId = undefined;
    this._sessionNumber = undefined;
    this._sessionTime = undefined;
    this._authType = undefined;
    this._isPrimaryLogin = undefined;
    this._passwordNeedsValidate = undefined;
    this._flags = undefined;
    this._mfFlags = undefined;
    this._reservedMktgFlags1 = undefined;
    this._reservedMktgFlags2 = undefined;

    if (data) {
        this._accountNumber = readBignum(data, 0);
        this._passwordId = readBignum(data, 8);

        this._sessionNumber = data.readUInt32LE(16);
        this._sessionTime = data.readUInt32LE(20);

        this._isPrimaryLogin = !!data.readInt8(24);
        this._passwordNeedsValidate = !!data.readInt8(25);

        this._authType = data.readInt8(26);
        this._flags = data.readInt8(27);

        this._mfFlags = readBignum(data, 28);
        this._reservedMktgFlags1 = readBignum(data, 36);
        this._reservedMktgFlags2 = readBignum(data, 44);
    }
}

exports = module.exports = LegacyStruct;

LegacyStruct.prototype = {
    get buffer() {
        return this._buffer;
    },

    get accountNumber() {
        return this._accountNumber;
    },
    set accountNumber(value) {
        this._accountNumber = value;
        writeBignum(this._accountNumber, this._buffer, 0);
    },

    get passwordId() {
        return this._passwordId;
    },
    set passwordId(value) {
        this._passwordId = value;
        writeBignum(this._passwordId, this._buffer, 8);
    },

    get sessionNumber() {
        return this._sessionNumber;
    },
    set sessionNumber(value) {
        this._sessionNumber = value;
        this._buffer.writeUInt32LE(this._sessionNumber, 16);
    },

    get sessionTime() {
        return this._sessionTime;
    },
    set sessionTime(value) {
        this._sessionTime = value;
        this._buffer.writeUInt32LE(this._sessionTime, 20);
    },

    get isPrimaryLogin() {
        return this._isPrimaryLogin;
    },
    set isPrimaryLogin(value) {
        this._isPrimaryLogin = value;
        this._buffer.writeInt8(this._isPrimaryLogin ? 1 : 0, 24);
    },

    get passwordNeedsValidate() {
        return this._passwordNeedsValidate;
    },
    set passwordNeedsValidate(value) {
        this._passwordNeedsValidate = value;
        this._buffer.writeInt8(this._passwordNeedsValidate ? 1 : 0, 25);
    },

    get authType() {
        return this._authType;
    },
    set authType(value) {
        this._authType = value;
        this._buffer.writeInt8(this._authType, 26);
    },

    get flags() {
        return this._flags;
    },
    set flags(value) {
        this._flags = value || 0;
        this._buffer.writeInt8(this._flags, 27);
    },

    get mfFlags() {
        return this._mfFlags;
    },
    set mfFlags(value) {
        this._mfFlags = value || 0;
        writeBignum(this._mfFlags, this._buffer, 28);
    },

    get reservedMktgFlags1() {
        return this._reservedMktgFlags1;
    },
    set reservedMktgFlags1(value) {
        this._reservedMktgFlags1 = value || 0;
        writeBignum(this._reservedMktgFlags1, this._buffer, 36);
    },

    get reservedMktgFlags2() {
        return this._reservedMktgFlags2;
    },
    set reservedMktgFlags2(value) {
        this._reservedMktgFlags2 = value || 0;
        writeBignum(this._reservedMktgFlags2, this._buffer, 44);
    }
};

LegacyStruct.fromJSON = function (data) {
    var struct = new LegacyStruct();

    struct.accountNumber = data.account_number;
    struct.passwordId = data.login_id;
    struct.sessionNumber = data.session_number;
    struct.sessionTime = data.session_time;
    struct.authType = data.auth_type;
    struct.isPrimaryLogin = !!data.is_primary_login;
    struct.passwordNeedsValidate = !!data.password_needs_validate;

    return struct;
};

function readBignum(buffer, offset) {
    var ln = new Long(buffer.readUInt32LE(offset), buffer.readUInt32LE(offset + 4), true);
    return ln.toString();
}

function writeBignum(bigValue, targetBuffer, offset) {
    var ln = Long.fromString(String(bigValue));

    targetBuffer.writeUInt32LE(ln.getLowBitsUnsigned(), offset);
    targetBuffer.writeUInt32LE(ln.getHighBitsUnsigned(), offset + 4);
}
