'use strict';

var cal = require('cal'),
    async = require('async'),
    assert = require('assert'),
    ppcommons = require('commons-paypal'),
    servicecore = require('servicecore'),
    experimentation = require('../index'),
    analytics = require('analytics-paypal'),
    utils = require('./fixtures/utils'),
    testConfig = require('./fixtures/invalid.json');

var expConfig = {
    pg: 'nodejs_test'
};

cal.setDefaultWriteStream('console');

function middlewares(req, res, cb) {
    ppcommons()(req, res, function () {
        servicecore()(req, res, function () {
            cb();
        });
    });
}

describe('Experimentation with fallback to old service', function () {

    var req, res;

    before(function () {
        servicecore.configuration = testConfig.services;
    });

    beforeEach(function () {
        req = utils.injectRequest();
        res = utils.injectResponse();
    });

    it('As Middleware: no guid', function (next) {

        req.method = 'GET';
        req.headers.PP_REMOTE_ADDR = '127.0.0.1';

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            experimentation.middleware(expConfig)(req, res, function () {
                var exp = req.experimentation;

                if (exp && exp.getTreatments() && exp.getTreatments().length > 0) {
                    assert.ok(exp.guid);
                    assert.ok(exp.getTrackingTags());
                    assert.ok(exp.getTreatments());
                    assert.ok(typeof exp.hasTreatment('exptRefAppCtrl') === 'boolean');
                    assert.ok(typeof exp.hasTreatment(135) === 'boolean');
                    assert.ok(typeof exp.hasTreatment(10) === 'boolean');
                } else {
                    assert.ok(exp.getTrackingTags());
                    assert.ok(exp.getTreatments().length === 0);
                    assert.ok(exp.hasTreatment('exptRefAppCtrl') === false);
                    assert.ok(exp.hasTreatment(135) === false);
                    assert.ok(exp.hasTreatment(10) === false);
                }
                next();
            });
        });
    });

    it('As Middleware: with guid', function (next) {

        req.method = 'GET';

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            req.ts = {
                vr : '2ff8b1441230a1147de42264ffff35f4'
            };
            experimentation.middleware(expConfig)(req, res, function () {
                var exp = req.experimentation;
                if (exp && exp.getTreatments() && exp.getTreatments().length > 0) {
                    assert.ok(!exp.guid);
                    assert.ok(exp.getTrackingTags());
                    assert.ok(exp.getTreatments());
                    assert.ok(typeof exp.hasTreatment('exptRefAppCtrl') === 'boolean');
                    assert.ok(typeof exp.hasTreatment(135) === 'boolean');
                    assert.ok(typeof exp.hasTreatment(10) === 'boolean');
                } else {
                    assert.ok(exp.getTrackingTags());
                    assert.ok(exp.getTreatments().length === 0);
                    assert.ok(exp.hasTreatment('exptRefAppCtrl') === false);
                    assert.ok(exp.hasTreatment(135) === false);
                    assert.ok(exp.hasTreatment(10) === false);
                }
                next();
            });
        });
    });

});
