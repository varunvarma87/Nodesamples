'use strict';

var cal = require('cal'),
    async = require('async'),
    assert = require('assert'),
    ppcommons = require('commons-paypal'),
    servicecore = require('servicecore'),
    experimentation = require('../index'),
    analytics = require('analytics-paypal'),
    utils = require('./fixtures/utils'),
    testConfig = require('../config/test.json');

var expConfig = {
    pg: 'nodejs_test'
};

cal.setDefaultWriteStream('console');

function middlewares(req, res, cb) {
    ppcommons()(req, res, function () {
        servicecore()(req, res, function () {
            cb();
        });
    });
}

describe('Experimentation', function () {

    var req, res;

    before(function () {
        servicecore.configuration = testConfig.services;
    });

    beforeEach(function () {
        req = utils.injectRequest();
        res = utils.injectResponse();
    });

    it('As Middleware: no guid', function (next) {

        req.method = 'GET';
        req.headers.PP_REMOTE_ADDR = '127.0.0.1';

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            experimentation.middleware(expConfig)(req, res, function () {
                var exp = req.experimentation;

                if (exp && exp.getTreatments() && exp.getTreatments().length > 0) {
                    assert.ok(exp.guid);
                    assert.ok(exp.getTrackingTags());
                    assert.ok(exp.getTreatments());
                    assert.ok(typeof exp.hasTreatment('exptRefAppCtrl') === 'boolean');
                    assert.ok(typeof exp.hasTreatment(135) === 'boolean');
                    assert.ok(typeof exp.hasTreatment(10) === 'boolean');
                } else {
                    assert.ok(exp.getTrackingTags());
                    assert.ok(exp.getTreatments().length === 0);
                    assert.ok(exp.hasTreatment('exptRefAppCtrl') === false);
                    assert.ok(exp.hasTreatment(135) === false);
                    assert.ok(exp.hasTreatment(10) === false);
                }
                next();
            });
        });
    });

    it('As Middleware: Sandbox env', function (next) {
        var oldDeployEnv = process.env.DEPLOY_ENV;

        req.method = 'GET';
        req.headers.PP_REMOTE_ADDR = '127.0.0.1';

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            process.env.DEPLOY_ENV = 'sandbox';
            experimentation.middleware(expConfig)(req, res, function () {
                var exp = req.experimentation;
                assert.ok(exp);
                assert.ok(!exp.getTrackingTags());
                assert.ok(exp.getTreatments().length === 0);
                assert.ok(exp.hasTreatment('exptRefAppCtrl') === false);
                assert.ok(exp.hasTreatment(135) === false);
                assert.ok(exp.hasTreatment(10) === false);
                process.env.DEPLOY_ENV = oldDeployEnv;
                next();
            });
        });
    });

    it('As Middleware: with guid', function (next) {

        req.method = 'GET';

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            req.ts = {
                vr : '2ff8b1441230a1147de42264ffff35f4'
            };
            experimentation.middleware(expConfig)(req, res, function () {
                var exp = req.experimentation;
                if (exp && exp.getTreatments() && exp.getTreatments().length > 0) {
                    assert.ok(!exp.guid);
                    assert.ok(exp.getTrackingTags());
                    assert.ok(exp.getTreatments());
                    assert.ok(typeof exp.hasTreatment('exptRefAppCtrl') === 'boolean');
                    assert.ok(typeof exp.hasTreatment(135) === 'boolean');
                    assert.ok(typeof exp.hasTreatment(10) === 'boolean');
                } else {
                    assert.ok(exp.getTrackingTags());
                    assert.ok(exp.getTreatments().length === 0);
                    assert.ok(exp.hasTreatment('exptRefAppCtrl') === false);
                    assert.ok(exp.hasTreatment(135) === false);
                    assert.ok(exp.hasTreatment(10) === false);
                }
                next();
            });
        });
    });

    it('As Middleware: use session', function (next) {

        var config = {
            session : true,
            pg: expConfig.pg
        };

        req.method = 'GET';
        req.session = {};

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            req.ts = {
                vr : '2ff8b1441230a1147de42264ffff35f4'
            };
            experimentation.middleware(config)(req, res, function () {
                var exp = req.experimentation;
                if (exp && exp.getTreatments() && exp.getTreatments().length > 0) {
                    assert.ok(!exp.guid);
                    assert.ok(exp.getTrackingTags());
                    assert.ok(exp.getTreatments());
                    assert.ok(typeof exp.hasTreatment('exptRefAppCtrl') === 'boolean');
                    assert.ok(typeof exp.hasTreatment(135) === 'boolean');
                    assert.ok(typeof exp.hasTreatment(10) === 'boolean');
                    assert.ok(req.session.experimentation);
                    assert.ok(req.session.experimentationTimeStamp);
                } else {
                    assert.ok(exp.getTrackingTags());
                    assert.ok(exp.getTreatments().length === 0);
                    assert.ok(exp.hasTreatment('exptRefAppCtrl') === false);
                    assert.ok(exp.hasTreatment(135) === false);
                    assert.ok(exp.hasTreatment(10) === false);
                }
                next();
            });
        });
    });

    it('As Middleware: dev query override', function (next) {

        req.method = 'GET';
        req.query._guid = '2035bf8113f0a397a4d1e211fff8a187';

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            req.ts = {
                vr : '2ff8b1441230a1147de42264ffff35f4'
            };
            experimentation.middleware(expConfig)(req, res, function () {
                var exp = req.experimentation;
                if (exp && exp.getTreatments() && exp.getTreatments().length > 0) {
                    assert.ok(exp.getTrackingTags());
                    assert.ok(exp.getTreatments());
                    assert.ok(typeof exp.hasTreatment('treatment_nodeapp_3') === 'boolean');
                    assert.ok(typeof exp.hasTreatment(135) === 'boolean');
                    assert.ok(typeof exp.hasTreatment(10) === 'boolean');
                } else {
                    assert.ok(exp.getTrackingTags());
                    assert.ok(exp.getTreatments().length === 0);
                    assert.ok(exp.hasTreatment('exptRefAppCtrl') === false);
                    assert.ok(exp.hasTreatment(135) === false);
                    assert.ok(exp.hasTreatment(10) === false);
                }
                next();
            });
        });
    });

    it('As Middleware: disable experimentation with isMiddleware:false config', function (next) {

        var config = {
            isMiddleware: false,
            pg: expConfig.pg
        };

        var expFn = new experimentation(config);

        req.method = 'POST';
        req.session = {
            experimentation: {}
        };

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            req.ts = {
                vr : '2ff8b1441230a1147de42264ffff35f4'
            };

            expFn(req, res, function () {
                var exp = req.experimentation;
                assert.ok(!exp);
                next();
            });
        });
    });

    it('As Middleware: factors config', function (next) {

        var config = {
            pg: 'pxp:rest:automation:factor',
            factors: true
        };

        var expFn = new experimentation(config);

        req.method = 'POST';
        req.session = {
            experimentation: {}
        };

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            req.ts = {
                vr : '2ff8b1441230a1147de42264ffff35f4'
            };

            expFn(req, res, function () {
                var exp = req.experimentation;
                if (exp && exp.getAllTreatments() && exp.getAllTreatments().length > 0) {
                    assert.ok(exp.getTrackingTags());
                    assert.ok(exp.getAllTreatments());
                    assert.ok(typeof exp.hasTreatment('pxpGUIDFactor_Treatment') === 'boolean');
                    assert.ok(typeof exp.hasTreatment(797) === 'boolean');
                    assert.ok(exp.getFactor('fontfamily'));
                } else {
                    assert.ok(exp.getTrackingTags());
                    assert.ok(exp.getAllTreatments().length === 0);
                    assert.ok(exp.hasTreatment('pxpGUIDFactor_Treatment') === false);
                    assert.ok(exp.hasTreatment(797) === false);
                    assert.ok(!exp.getFactor('fontfamily'));
                }
                next();
            });
        });
    });

    it('From controller: guid', function (next) {

        req.method = 'GET';
        req.query._guid = '2035bf8113f0a397a4d1e211fff8a187';

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            req.ts = {
                vr : '2ff8b1441230a1147de42264ffff35f4'
            };
            experimentation.pxp(req, expConfig, function (error, exp) {
                if (!error) {
                    if (exp && exp.getTreatments() && exp.getTreatments().length > 0) {
                        assert.ok(exp.getTrackingTags());
                        assert.ok(exp.getTreatments() !== null);
                        assert.ok(typeof exp.hasTreatment('treatment_nodeapp_3') === 'boolean');
                        assert.ok(typeof exp.hasTreatment(135) === 'boolean');
                        assert.ok(typeof exp.hasTreatment(10) === 'boolean');
                    } else {
                        assert.ok(exp.getTrackingTags());
                        assert.ok(exp.getTreatments().length === 0);
                        assert.ok(exp.hasTreatment('exptRefAppCtrl') === false);
                        assert.ok(exp.hasTreatment(135) === false);
                        assert.ok(exp.hasTreatment(10) === false);
                    }
                } else {
                    console.log(error);
                }
                next();
            });
        });
    });

    it('From controller: with params', function (next) {

        req.method = 'GET';
        req.query._guid = '2035bf8113f0a397a4d1e211fff8a187';

        var params = {
                'pg' : 'pxp:dummy:pagename',
                'Ctx.AppOptStr' : 'hello',
                'Ctx.AppOptNo' : 100,
                'Ctx.AppOptBoolean' : true
            };

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            req.ts = {
                vr : '2ff8b1441230a1147de42264ffff35f4'
            };
            experimentation.pxp(req, params, function (error, exp) {
                if (!error) {
                    if (exp && exp.getTreatments() && exp.getTreatments().length > 0) {
                        assert.ok(exp.getTrackingTags());
                        assert.ok(exp.getTreatments());
                        assert.ok(exp.getTreatment('treatment_nodeapp_3'));
                        assert.ok(typeof exp.hasTreatment('treatment_nodeapp_3') === 'boolean');
                        assert.ok(typeof exp.hasTreatment(135) === 'boolean');
                        assert.ok(typeof exp.hasTreatment(10) === 'boolean');
                    } else {
                        assert.ok(exp.getTrackingTags());
                        assert.ok(exp.getTreatments().length === 0);
                        assert.ok(exp.hasTreatment('exptRefAppCtrl') === false);
                        assert.ok(exp.hasTreatment(135) === false);
                        assert.ok(exp.hasTreatment(10) === false);
                    }
                } else {
                    console.log(error);
                }
                next();
            });
        });
    });

    it('From controller: with factors', function (next) {

        req.method = 'GET';
        req.query._guid = '2035bf8113f0a397a4d1e211fff8a187';

        var params = {
            pg: 'pxp:rest:automation:factor',
            factors: true
        };

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            req.ts = {
                vr : '2ff8b1441230a1147de42264ffff35f4'
            };
            experimentation.pxp(req, params, function (error, exp) {
                if (!error) {
                    if (exp && exp.getAllTreatments() && exp.getAllTreatments().length > 0) {
                        assert.ok(exp.getTrackingTags());
                        assert.ok(exp.getAllTreatments());
                        assert.ok(typeof exp.hasTreatment('pxpGUIDFactor_Treatment') === 'boolean');
                        assert.ok(typeof exp.hasTreatment(797) === 'boolean');
                        assert.ok(exp.getFactor('fontfamily'));
                    } else {
                        assert.ok(exp.getTrackingTags());
                        assert.ok(exp.getAllTreatments().length === 0);
                        assert.ok(exp.hasTreatment('pxpGUIDFactor_Treatment') === false);
                        assert.ok(exp.hasTreatment(797) === false);
                        assert.ok(!exp.getFactor('fontfamily'));
                    }
                } else {
                    console.log(error);
                }
                next();
            });
        });
    });

    it('From controller: consistency test with iteration', function (next) {
        this.timeout(60000);

        req.method = 'GET';
        req.query._guid = '2035bf8113f0a397a4d1e211fff8a187';

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            req.ts = {
                vr : '2ff8b1441230a1147de42264ffff35f4'
            };
            async.series({
                first: function (callback) {
                    experimentation.pxp(req, expConfig, function (error, exp) {
                        if (!error) {
                            assert.ok(exp);
                            assert.ok(exp.getTreatments());
                            assert.ok(exp.getTrackingTags() !== null);
                        }
                        callback(error, exp && exp.getTrackingTags());
                    });
                },
                second: function (callback) {
                    experimentation.pxp(req, expConfig, function (error, exp) {
                        if (!error) {
                            assert.ok(exp);
                            assert.ok(exp.getTreatments());
                            assert.ok(exp.getTrackingTags() !== null);
                        }
                        callback(error, exp && exp.getTrackingTags());
                    });
                },
                third: function (callback) {
                    experimentation.pxp(req, expConfig, function (error, exp) {
                        if (!error) {
                            assert.ok(exp);
                            assert.ok(exp.getTreatments());
                            assert.ok(exp.getTrackingTags() !== null);
                        }
                        callback(error, exp && exp.getTrackingTags());
                    });
                },
                fourth: function (callback) {
                    experimentation.pxp(req, expConfig, function (error, exp) {
                        if (!error) {
                            assert.ok(exp);
                            assert.ok(exp.getTreatments());
                            assert.ok(exp.getTrackingTags() !== null);
                        }
                        callback(error, exp && exp.getTrackingTags());
                    });
                },
                fifth: function (callback) {
                    experimentation.pxp(req, expConfig, function (error, exp) {
                        if (!error) {
                            assert.ok(exp);
                            assert.ok(exp.getTreatments());
                            assert.ok(exp.getTrackingTags() !== null);
                        }
                        callback(error, exp && exp.getTrackingTags());
                    });
                }
            }, function (error, results) {
                assert.ok(!error);
                assert.ok(results.first === results.second);
                assert.ok(results.first === results.third);
                assert.ok(results.first === results.fourth);
                assert.ok(results.first === results.fifth);
                next();
            });
        });
    });

    it('Optout:', function (next) {

        var params = {
                treatmentControlName: '8ball_beta_gb_treatment',
                method: 'optout'
            };

        req.method = 'GET';
        req.user = {
            encryptedAccountNumber : 'JZE2F3QS9W2TC'
        };

        experimentation.optInOrOut(req, params, function (error, response) {
            assert(response);
            assert.ok(response.body);
            assert.ok(response.statusCode,  200);
            next();
        });
    });

    it('Optin:', function (next) {

        var params = {
                treatmentControlName: 'classic_changes_to_support_routing_users_to_8ball_treatment',
                method: 'optin'
            };
        req.method = 'GET';
        req.user = {
            encryptedAccountNumber : '6E5FPNU5ALLDS'
        };

        experimentation.optInOrOut(req, params, function (error, response) {
            assert(response);
            assert.ok(response.body);
            if (response.statusCode === 200) {
                assert.ok(!response.body.errors);
                assert.equal(response.statusCode,  200);
            } else {
                assert.ok(response.body.errors);
                assert.equal(response.statusCode,  400);
            }
            next();
        });
    });
});
