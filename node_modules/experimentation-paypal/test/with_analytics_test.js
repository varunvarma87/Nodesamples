/*global describe:false, it:false*/
'use strict';

var cal = require('cal'),
    async = require('async'),
    assert = require('assert'),
    ppcommons = require('commons-paypal'),
    servicecore = require('servicecore'),
    experimentation = require('../index'),
    analytics = require('analytics-paypal'),
    utils = require('./fixtures/utils'),
    testConfig = require('../config/test.json');

var expConfig = {
    pg: 'nodejs_test'
};

cal.setDefaultWriteStream('console');

function middlewares(req, res, cb) {
    ppcommons()(req, res, function () {
        servicecore()(req, res, function () {
            analytics()(req, res, function () {
                cb();
            });
        });
    });
}

describe('Experimentation With analytics', function () {

    var req, res;

    before(function () {
        servicecore.configuration = testConfig.services;
    });

    beforeEach(function () {
        req = utils.injectRequest();
        res = utils.injectResponse();
    });

    it('simple', function (next) {

        req.method = 'GET';
        req.session = {};
        req.app = {
            settings : {
                views : 'sample'
            }
        };

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            experimentation.middleware(expConfig)(req, res, function () {
                var exp = req.experimentation,
                    treatment,
                    treatments,
                    matchedIds = [];
                if (exp && exp.getTreatments() && exp.getTreatments().length > 0) {
                    assert.ok(exp.guid);
                    assert.ok(exp.getTrackingTags() !== null);
                    assert.ok(exp.getTreatments() !== null);
                    assert.ok(typeof exp.isTreatmentByName('exptRefAppCtrl') === 'boolean');
                    assert.ok(typeof exp.isTreatmentById(135) === 'boolean');
                    assert.ok(typeof exp.isTreatmentById(10) === 'boolean');

                    treatments = exp.getTreatments();
                    for (var i in treatments) {
                        treatment = treatments[i];
                        if (i % 3 === 0) {
                            matchedIds.push(treatment.treatment_id);
                        }
                    }
                    exp.trackTreatmentIds(matchedIds);
                    req.tracking && req.tracking.flushServerSide();
                } else {
                    assert.ok(exp.getTrackingTags());
                    assert.ok(exp.getTreatments().length === 0);
                    assert.ok(exp.isTreatmentByName('exptRefAppCtrl') === false);
                    assert.ok(exp.isTreatmentById(135) === false);
                    assert.ok(exp.isTreatmentById(10) === false);
                }
                setTimeout(function () {
                    next();
                }, 1000);
            });
        });
    });

    it('multiple seperate trackTreatmentIds', function (next) {

        req.method = 'GET';
        req.session = {};
        req.app = {
            settings : {
                views : 'sample'
            }
        };

        require.main.filename = __dirname;
        middlewares(req, res, function () {
            experimentation.middleware(expConfig)(req, res, function () {
                var exp = req.experimentation,
                    treatment,
                    treatments,
                    matchedIds = [];
                if (exp && exp.getTreatments() && exp.getTreatments().length > 0) {
                    assert.ok(exp.guid);
                    assert.ok(exp.getTrackingTags() !== null);
                    assert.ok(exp.getTreatments() !== null);
                    assert.ok(typeof exp.isTreatmentByName('exptRefAppCtrl') === 'boolean');
                    assert.ok(typeof exp.isTreatmentById(135) === 'boolean');
                    assert.ok(typeof exp.isTreatmentById(10) === 'boolean');

                    treatments = exp.getTreatments();
                    for (var i in treatments) {
                        treatment = treatments[i];
                        if (i % 3 === 0) {
                            exp.trackTreatmentIds(treatment.treatment_id);
                            matchedIds.push(treatment.treatment_id);
                        }
                    }
                    exp.trackTreatmentIds(matchedIds);
                    req.tracking && req.tracking.flushServerSide();
                } else {
                    assert.ok(exp.getTrackingTags());
                    assert.ok(exp.getTreatments().length === 0);
                    assert.ok(exp.isTreatmentByName('exptRefAppCtrl') === false);
                    assert.ok(exp.isTreatmentById(135) === false);
                    assert.ok(exp.isTreatmentById(10) === false);
                }
                setTimeout(function () {
                    next();
                }, 1000);
            });
        });
    });
});
