/*jslint proto: true */
'use strict';

var path = require('path'),
    //__ = require('underscore'),
    fs = require('graceful-fs'),
    tryRequire = require('try-require'),
    commonConfit = require('confit_mod/lib/common'),
    debug = require('debug')('modconfig:utils'),
    CONFIG_TOKEN = '||**||';

var nconfCheck = false,
    nconf;

function mergeWithNconf(output) {
    var outputTemp;
    if (!nconfCheck) {
        nconf = tryRequire('nconf');
        nconfCheck = true;
    }
    if (nconf && nconf.get()) {
        outputTemp = {};
        // Use nconf values as default, if available
        try {
            commonConfit.merge(nconf.get(), outputTemp);
            commonConfit.merge(output, outputTemp);
            output = outputTemp;
        } catch (e) {
            //No Op
        }
        //output = __.extend(outputTemp, nconf.get(), output);
    }
    return output;
}

function overRideConfig(confiter, appConfigRoot, configFileName) {
    var env = (process.env.NODE_ENV || 'development').toLowerCase();
    debug('env: ' + env);

    var mConf = path.resolve(appConfigRoot, configFileName);
    //Note:: fs.existsSync should go to confit
    if (fs.existsSync(mConf)) {
        debug('override config : ' + mConf);
        confiter.addOverride(mConf);
    }
    mConf = path.resolve(appConfigRoot, configFileName + '-' + env + '.json');

    if (fs.existsSync(mConf)) {
        debug('override config : ' + mConf);
        confiter.addOverride(mConf);
    }
}

function defaultConfig(confiter, moduleConfigRoot) {
    var env = (process.env.NODE_ENV || 'development').toLowerCase();
    debug('env: ' + env);

    var mConf = path.resolve(moduleConfigRoot, env + '.json');
    if (fs.existsSync(mConf)) {
        debug('addDefault config : ' + mConf);
        confiter.addDefault(mConf);
    }

    mConf = path.resolve(moduleConfigRoot, 'config.json');
    //Note:: fs.existsSync should go to confit
    if (fs.existsSync(mConf)) {
        debug('addDefault config : ' + mConf);
        confiter.addDefault(mConf);
    }
}

function _findModuleRoot(fpath) {
    var appRoot = process.cwd(),
        _fpath;

    var pkgPath = path.resolve(fpath, 'package.json');
    if (fs.existsSync(pkgPath)) {
        debug('_findModuleRoot ' + fpath);
        return fpath;
    }
    _fpath = path.dirname(fpath);
    if (_fpath === fpath || _fpath === '/' || _fpath === appRoot) {
        debug('_findModuleRoot for ' + fpath + ' : ' + appRoot);
        return appRoot;
    }
    fpath = _fpath;

    return _findModuleRoot(fpath);
}

function moduleRoot(moduleRef) {
    return _findModuleRoot(moduleRef.filename || moduleRef);
}

function moduleName(moduleRoot) {
    var modName;
    var pkgPath = tryRequire(path.resolve(moduleRoot, 'package.json'));
    if (pkgPath) {
        modName = pkgPath && pkgPath.name;
    }
    if (!modName) {
        modName = moduleRoot.split(path.sep).pop();
    }
    return modName;
}

module.exports = {
    moduleRoot: moduleRoot,
    moduleName: moduleName,
    defaultConfig: defaultConfig,
    overRideConfig: overRideConfig,
    mergeWithNconf: mergeWithNconf,
    CONFIG_TOKEN: CONFIG_TOKEN
};
