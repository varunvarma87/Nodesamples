'use strict';

var deployEnv = require('environment-paypal');

function addAnalyticsDataFromController(req, treatmentIds) {
    var tracking = req.tracking,
        experimentation = req.experimentation;
    if (!tracking || !experimentation) {
        return;
    }
    if (!req._expCache) {
        req._expCache = {
            expTreatmentIds: [],
            qt: [],
            qc: [],
            uqt: [],
            uqc: [],
            ot: [],
            os: [],
            xe: [],
            xt: [],
            t: []
        };
    }

    var trackingTags = experimentation.getTrackingTags(),
        treatments = experimentation.getTreatments(),
        qualTreatmentIds = req._expCache.expTreatmentIds,
        treatment,
        experimentId,
        treatmentId,
        treatmentName,
        qTags,
        xe, xt,
        qt, qc,
        ot, os;

    if (trackingTags) {
        qTags = trackingTags.split(';');
        if (qTags) {
            qTags.forEach(function (tag) {
                var qTag;
                if (tag && tag.indexOf('=') !== -1) {
                    qTag = tag.split('=');
                    if (qTag && qTag.length === 2 &&
                        qTag[1] && req._expCache[qTag[0]] &&
                        req._expCache[qTag[0]].indexOf(qTag[1]) === -1) {
                        req._expCache[qTag[0]].push(qTag[1]);
                    }
                }
            });
        }
    }

    if (Array.isArray(treatmentIds)) {
        qualTreatmentIds = qualTreatmentIds.concat(treatmentIds);
    } else {
        qualTreatmentIds.push(treatmentIds);
    }

    var xeArray = req._expCache.xe,
        xtArray = req._expCache.xt,
        tArray = req._expCache.t;

    for (var m in treatments) {
        treatment = treatments[m];
        experimentId = treatment.experiment_id;
        treatmentId = treatment.treatment_id;
        treatmentName = treatment.treatment_name;

        if (qualTreatmentIds.indexOf(treatmentId) !== -1) {
            if (xeArray.indexOf(experimentId) === -1) {
                xeArray.push(experimentId);
            }
            if (xtArray.indexOf(treatmentId) === -1) {
                xtArray.push(treatmentId);
            }
            if (tArray.indexOf(treatmentName) === -1) {
                tArray.push(treatmentName);
            }
        }
    }
    xe = xeArray.join(',');
    xt = xtArray.join(',');

    var prop52 = '|' + tArray.join(',');

    //siteCatalyst related data
    tracking.addData('pxtid', 's.prop52', prop52);

    qt = req._expCache.qt.join(',');
    qc = req._expCache.qc.join(',');

    if (req._expCache.uqt.length > 0) {
        qt += ',' + req._expCache.uqt.join(',');
    }
    if (req._expCache.uqc.length > 0) {
        qc += ',' + req._expCache.uqc.join(',');
    }
    if (req._expCache.ot.length > 0) {
        ot = req._expCache.ot.join(',');
        tracking.addData('ot', '', ot);
    }
    if (req._expCache.os.length > 0) {
        os = req._expCache.os.join(',');
        tracking.addData('os', '', os);
    }

    //FPTI related data
    tracking.addData('xe', '', xe);
    tracking.addData('xt', '', xt);
    tracking.addData('qt', '', qt);
    tracking.addData('qc', '', qc);

    //Preserving the XE,XT,QE,QT tags in request. Can be used to add FPTI tracking data from the application controller if it's required.
    req.experimentation.pxpTracking = {
        'xe' : xe,
        'xt' : xt,
        'qt' : qt,
        'qc' : qc
    };

}

/**
 * Add experimentation data to req.experimentation
 */
function experimentationJSON(req, exResJSON) {
    var treatments,
        treatment,
        i;

    exResJSON = exResJSON || {};

    req.experimentation = {
        getRawData : function () {
            return exResJSON;
        },
        getTrackingTags: function () {
            return exResJSON.tracking_tags;
        },
        getTreatments: function () {
            //deprecated: getAllTreatments() instead
            return this.getAllTreatments();
        },
        getAllTreatments : function () {
            return exResJSON.treatments || [];
        },
        _getTreatmentLookup: function () {
            if (!this._treatmentLookup) {
                var lookup = this._treatmentLookup = {};

                var treatments = exResJSON.treatments;
                if (treatments) {
                    for (var i = 0, len = treatments.length; i < len; i++) {
                        var treatment = treatments[i];
                        lookup[treatment.treatment_name] = treatment;
                        lookup[treatment.treatment_id] = treatment;
                    }
                }
            }

            return this._treatmentLookup;
        },
        _getTreatmentsByFactorLookup: function () {
            if (!this._treatmentsByFactorLookup) {
                var lookup = this._treatmentsByFactorLookup = {};

                var treatments = exResJSON.treatments;
                if (treatments) {
                    for (var i = 0, len = treatments.length; i < len; i++) {
                        var treatment = treatments[i];
                        var factors = treatment.factors;
                        if (factors) {
                            for (var j = 0, len2 = factors.length; j < len2; j++) {
                                var factor = factors[j];
                                var factorNameTreatments = lookup[factor.name] || (lookup[factor.name] = []);
                                factorNameTreatments.push(treatment);
                            }
                        }
                    }
                }
            }

            return this._treatmentsByFactorLookup;
        },
        _getFactorLookup: function () {
            if (!this._factorLookup) {
                var lookup = this._factorLookup = {};

                var treatments = exResJSON.treatments;
                if (treatments) {
                    for (var i = 0, len = treatments.length; i < len; i++) {
                        var treatment = treatments[i];
                        var factors = treatment.factors;
                        if (factors) {
                            for (var j = 0, len2 = factors.length; j < len2; j++) {
                                var factor = factors[j];
                                lookup[factor.name] = factor;
                            }
                        }
                    }
                }
            }

            return this._factorLookup;
        },
        getTreatment : function (treatmentNameOrId) {
            var lookup = this._getTreatmentLookup();
            var treatment = lookup[treatmentNameOrId];
            if (treatment) {
                this.trackTreatmentIds(treatment.treatment_id);
            }
            return treatment;
        },
        hasTreatment : function (treatmentNameOrId) {
            var lookup = this._getTreatmentLookup();
            var treatment = lookup[treatmentNameOrId];
            if (treatment) {
                this.trackTreatmentIds(treatment.treatment_id);
            }
            return !!treatment;
        },
        hasTreatmentsWithFactor : function (factorNameOrId) {
            var lookup = this._getTreatmentsByFactorLookup();
            var treatments = lookup[factorNameOrId];
            return treatments !== undefined && treatments.length !== 0;
        },
        getTreatmentsWithFactor : function (factorNameOrId) {
            var lookup = this._getTreatmentsByFactorLookup();
            return lookup[factorNameOrId] || [];
        },
        getFactor : function (factorNameOrId) {
            var lookup = this._getFactorLookup();
            return lookup[factorNameOrId];
        },
        isTreatmentByName : function (treatmentName) {
            //deprecated: use hasTreatment() instead
            return this.hasTreatment(treatmentName);
        },
        isTreatmentById: function (treatmentId) {
            //deprecated: use hasTreatment() instead
            return this.hasTreatment(treatmentId);
        },
        trackTreatmentIds: function (treatmentIds) {
            addAnalyticsDataFromController(req, treatmentIds);
        }
    };

    // Adding guid for no guid in request case
    if (exResJSON.guid) {
        req.experimentation.guid = exResJSON.guid;
    }

}

exports = module.exports = experimentationJSON;
