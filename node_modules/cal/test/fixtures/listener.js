'use strict';
var debug = require('debug')('cal:queue:test');

function txKey(eventArgs) {
    return [
        eventArgs.messageClass,
        eventArgs.threadId,
        eventArgs.eventId,
        eventArgs.parentEventId !== undefined ? eventArgs.parentEventId :
                        eventArgs.parent && eventArgs.parent.eventId || 0,
        eventArgs.type,
        eventArgs.name
    ].join(':');
}

function completed(logger, status) {
    if (status) {
        var eventArgs = status.eventArgs;
        var key = txKey(eventArgs);
        logger.emit(key);
    }
}

module.exports.waitForCompleted = function (name, logger, message, callback) {
    var args = message._getEventArgs();
    args.name = name;
    args.messageClass = 'T';
    var key = txKey(args);

    debug('wait for ', key);
    if (!logger._onCompleted) {
        logger._onCompleted = true;
        completed(logger);
    }

    logger.once(key, callback);
};

module.exports.waitForMessage = function (logger, message, callback) {
    var args = message._getEventArgs();
    var key = txKey(args);

    debug('wait for ', key);
    if (!logger._onCompleted) {
        logger._onCompleted = true;
        completed(logger);
    }

    logger.once(key, callback);
};
