'use strict';
// require('longjohn');
var assert = require('assert'),
    cal = require('../lib'),
    Config = require('./fixtures/config'),
    MessageClass = require('../lib/constants').MessageClass,
    EventEmitter = require('events').EventEmitter;


var useCases = [
    {
        title: 'cal: console, console',
        stream: 'console',
        writeStream: process.stdout,
        formatter: cal.formatter.console
    },
    {
        title: 'cal: console, silent',
        stream: 'console',
        writeStream: process.stdout,
        formatter: cal.formatter.silent
    },
    {
        title: 'cal: console, pretty',
        stream: 'console',
        writeStream: process.stdout,
        formatter: cal.formatter.pretty
    },
    {
        title: 'cal: console, JSON',
        stream: 'console',
        writeStream: process.stdout,
        formatter: cal.formatter.JSON
    }
];

useCases.forEach(createDescribe);

function createDescribe(config) {

    describe(config.title, function () {

        before(function (next) {
            cal.setDefaultWriteStream(config.stream, {
                environment: config.environment,
                poolname: Config.calPool,
                writeStream: config.writeStream
            });
            cal.defaults.formatter = config.formatter;

            cal.once('error', function (err) {
                throw err;
            });
            setTimeout(next, 1000);
        });

        after(function (next) {
            this.timeout(10000);
            cal.stop(function () {
                setTimeout(next, 3000);
            });
        });

        beforeEach(function (next) {
            cal.middleware({'threadId': 0xab})(new EventEmitter(), new EventEmitter(), next);
        });

        describe('event', function () {

            it('should write a message', function () {
                var event = cal.createEvent('type', 'name');
                event.addData('foo', 'bar');
                event.complete();
            });

            it('should write a string messages', function () {
                var event = cal.createEvent('type', 'name');
                event.addData('foo');
                event.addData('bar');
                event.addData('foobar');
                event.addData('foo', 'bar');
                event.complete();
            });

            it('should write a warning message', function () {
                var event = cal.createEvent('type', 'name', 4);
                event.addData('foo', 'bar');
                event.complete();
            });

            it('should write a error message', function () {
                var event = cal.createEvent('type', 'name', 2);
                event.addData('foo', 'bar');
                event.complete();
            });

            it('should write a fatal message', function () {
                var event = cal.createEvent('type', 'name', 1);
                event.addData('foo', 'bar');
                event.complete();
            });

            it('should write a exception message', function () {
                var event = cal.createEvent('type', 'name', 3);
                event.addData('foo', 'bar');
                event.complete();
            });

            it('should serialize and write JSON message', function () {
                var event = cal.createEvent('type', 'name');
                var sampleJSON = {
                    foo: 'bar',
                    obj: {
                        a: 'a',
                        b: 'b',
                        c: 'c'
                    },
                    array: [
                        'item1',
                        'item2',
                        'item3'
                    ]
                };
                event.addData(sampleJSON);
                event.complete();
            });

            it('should write Error object in message', function () {
                var event = cal.createEvent('type', 'name', 2);
                event.addData('error', new Error('some error'));
                event.complete();
            });

        });

        describe('heartbeat', function () {

            it('should write a message', function () {
                var heartbeat = cal.createHeartbeat('type', 'name');
                heartbeat.addData('foo', 'bar');
                heartbeat.complete();
            });

        });

        describe('transaction', function () {

            it('should record an atomic transaction', function (next) {
                cal.createTransaction('type', 'name', '1.STATUS', function (err, transaction) {
                    assert.ok(!err, err && err.stack);

                    transaction.correlationId = 0;
                    transaction.addData('foo', 'bar');

                    // Transaction is ATOMIC unless flush is called.
                    assert.strictEqual(transaction.messageClass, MessageClass.ATOMIC);

                    setTimeout(function () {
                        transaction.complete();
                        // No flush, so should still be atomic
                        assert.strictEqual(transaction.messageClass, MessageClass.ATOMIC);
                        next();
                    }, 20);
                });
            });
        });
    });
}
