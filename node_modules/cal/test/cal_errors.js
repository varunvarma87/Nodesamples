'use strict';

var cal = require('../lib'),
    async = require('async'),
    nconf = require('nconf'),
    heapdump = require('heapdump'),
    Config = require('./fixtures/config'),
    EventEmitter = require('events').EventEmitter,
    CalTestUtils = require('./fixtures/caltestutils'),
    calMockServer = require('./fixtures/mockcalserver');

var caltestutils = new CalTestUtils(cal, null, calMockServer),
    TIMEOUT = 3 * CalTestUtils.TIMEOUT,
    TIMEOUT_NEXT = 1.4 * CalTestUtils.TIMEOUT,
    shouldWriteDumps = !!process.env.NODE_HEAPDUMP;

describe('CAL Errors', function () {

    var calLoadTest = function (n, callback) {
        if (n % 20 === 0) {
            setTimeout(function () {
                calMockServer.dropConnection();
            }, Math.min(n * 100, TIMEOUT));
        }
        async.parallel([
            function (cb) {
                cal.middleware()(new EventEmitter(), new EventEmitter(), function () {
                    caltestutils.tranLoadx(10, 'load__load1', 'simple', function () {
                        cb();
                    });
                });
            },
            function (cb) {
                cal.middleware()(new EventEmitter(), new EventEmitter(), function () {
                    caltestutils.tranLoadx(20, 'load__load2', 'simple', function () {
                        cb();
                    });
                });
            },
            function (cb) {
                cal.middleware()(new EventEmitter(), new EventEmitter(), function () {
                    caltestutils.tranLoadx(30, 'load__load3', 'simple', function () {
                        cb();
                    });
                });
            },
            function (cb) {
                cal.middleware()(new EventEmitter(), new EventEmitter(), function () {
                    caltestutils.tranLoadx(40, 'load__load4', 'simple', function () {
                        cb();
                    });
                });
            },
            function (cb) {
                cal.middleware()(new EventEmitter(), new EventEmitter(), function () {
                    caltestutils.tranLoadx(50, 'load__load5', 'simple', function () {
                        cb();
                    });
                });
            }
        ], function () {
            callback();
        });

    };

    before(function () {
        nconf.clear();
        nconf.reset();
        cal.queue.options = {};
    });

    after(function (next) {
        this.timeout(10000);
        setTimeout(function () {
            cal.stop(function () {
                cal.removeAllListeners('error');
                next();
            });
        }, 3000);
    });

    afterEach(function (next) {
        setTimeout(function () {
            if (shouldWriteDumps) {
                heapdump.writeSnapshot();
            }
            next();
        }, 1000);
    });



    it('No CAL Host should handle ECONNREFUSED properly', function (next) {
        this.timeout(TIMEOUT);

        cal.setDefaultWriteStream('cal', {
            poolname: Config.calPool,
            host: Config.noCALHost,
            port: Config.port
        });
        cal.defaults.formatter = cal.formatter.cal;

        async.times(300, calLoadTest,
        function () {
            setTimeout(function () {
                next();
            }, TIMEOUT_NEXT);
        });

    });

    it('no CAL Server Host should handle ECONNREFUSED properly', function (next) {
        this.timeout(TIMEOUT);

        cal.setDefaultWriteStream('cal', {
            poolname: Config.calPool,
            host: Config.noCALServerHost,
            port: Config.port
        });
        cal.defaults.formatter = cal.formatter.cal;

        async.times(300, calLoadTest,
        function () {
            setTimeout(function () {
                next();
            }, TIMEOUT_NEXT);
        });

    });

    it('unreachable CAL Host should handle socket timeouts properly', function (next) {
        this.timeout(TIMEOUT);

        cal.setDefaultWriteStream('cal', {
            poolname: Config.calPool,
            host: Config.unreachableCALHost,
            port: Config.port
        });
        cal.defaults.formatter = cal.formatter.cal;

        async.times(300, calLoadTest,
        function () {
            setTimeout(function () {
                next();
            }, TIMEOUT_NEXT);
        });

    });

    it('invalid CAL Server Port should handle EPIPE properly', function (next) {
        this.timeout(TIMEOUT);

        cal.setDefaultWriteStream('cal', {
            poolname: Config.calPool,
            host: Config.ppStageHost,
            port: 80
        });
        cal.defaults.formatter = cal.formatter.cal;

        async.times(300, calLoadTest,
        function () {
            setTimeout(function () {
                next();
            }, TIMEOUT_NEXT);
        });

    });

    it('unstable CAL Server should handle errors properly', function (next) {
        this.timeout(TIMEOUT);

        cal.setDefaultWriteStream('cal', {
            poolname: Config.calPool,
            environment: '',
            host: '127.0.0.1',
            port: 1120
        });
        cal.defaults.formatter = cal.formatter.cal;

        calMockServer.listen(1120, function () {
            async.times(300, calLoadTest,
            function () {
                setTimeout(function () {
                    calMockServer.clearLocalCache();
                    calMockServer.stopServer();
                    next();
                }, TIMEOUT_NEXT);
            });
        });

    });
});
