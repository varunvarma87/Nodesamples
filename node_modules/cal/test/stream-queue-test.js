'use strict';

var events = require('events');

var assert = require('assert');

var StreamQueue = require('../lib/stream-queue');

describe(__filename, function () {

    var stream;

    after(function (next) {
        this.timeout(10000);
        if (stream && stream.close) {
            stream.close(function () {
                setTimeout(next, 1000);
            });
        } else {
            setTimeout(next, 1000);
        }
    });

    it('should detect changes in options when re-creating the stream', function (done) {
        this.timeout(12000);

        var mockStream = new events.EventEmitter();
        mockStream.write = function write() {
            this._written = this._written || 0;
            this._written++;
            // mock unresponsive
        };
        mockStream.end = function end() {
            this._ended = true;
        };
        var lastOptions;
        stream = new StreamQueue({
            writer: {
                createWriteStream: function createWriteStream(options) {
                    lastOptions = options;
                    return mockStream;
                }
            },
            formatter: {
                format: function format() {

                }
            }
        });

        var msg = {
            type: 'Debug',
            name: 'inventbuy:cmn:utils',
            status: '0',
            data: 'logMsg: CAL TX success: mongo connected, conn str: mongodb://www.host.com:27017/helloworld?maxPoolSize=10',
            messageClass: 'E',
            timestamp: Date.now(),
            threadId: 1,
            eventId: 1,
            parentEventId: 1,
            loglevel: 'debug',
            logger: 'inventbuy:cmn:utils'
        };

        stream._write(msg);

        // now change options
        stream.options.writerOptions = stream.options.writerOptions || {};
        stream.options.writerOptions.host = 'some.host';

        stream._write(msg);
        assert.ok(lastOptions);
        assert.ok(!lastOptions.host);

        setTimeout(function verify() {
            assert.equal(1, mockStream._ended);
            assert.equal(2, mockStream._written);
            assert.ok(lastOptions);
            assert.equal('some.host', lastOptions.host);
            done();
        }, 11000);
    });

});
