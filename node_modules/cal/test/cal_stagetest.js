'use strict';

var cal = require('../lib'),
    heapdump = require('heapdump'),
    Config = require('./fixtures/config'),
    CalTestUtils = require('./fixtures/caltestutils'),
    EventEmitter = require('events').EventEmitter;

var caltestutils = new CalTestUtils(cal),
    TIMEOUT = 3 * CalTestUtils.TIMEOUT,
    LOOP_CNT = CalTestUtils.LOOP_CNT,
    totalTxns = 0,
    shouldWriteDumps = !!process.env.NODE_HEAPDUMP;


describe('http request structure', function () {

    before(function (next) {
        totalTxns = 0;
        cal.setDefaultWriteStream('cal', {
            poolname: Config.calPool,
            environment: Config.environment,
            host: Config.ppStageHost,
            port: Config.port
        });
        cal.defaults.formatter = cal.formatter.cal;
        if (shouldWriteDumps) {
            heapdump.writeSnapshot();
        }
        setTimeout(next, 1000);
    });

    beforeEach(function (next) {
        cal.middleware()(new EventEmitter(), new EventEmitter(), next);
    });

    afterEach(function () {
        if (shouldWriteDumps) {
            heapdump.writeSnapshot();
        }
    });

    after(function (next) {
        this.timeout(TIMEOUT);
        setTimeout(function () {
            console.log('total stage txns:', totalTxns);
            cal.stop(function () {
                cal.removeAllListeners('error');
                if (shouldWriteDumps) {
                    heapdump.writeSnapshot();
                }
                next();
            });
        }, 5000);
    });

    it('should record a URL transaction with some events and Async transaction', function (next) {
        this.timeout(TIMEOUT);
        totalTxns++;
        caltestutils.tranx(100, null, function () {
            setTimeout(function () {
                next();
            }, 500);
        });
    });

    it('should record a URL transaction with buffering', function (next) {
        this.timeout(TIMEOUT);
        totalTxns++;
        caltestutils.tranx(200, 'new_name', function () {
            setTimeout(function () {
                next();
            }, 500);
        });
    });

    it('should record a URL transaction with tons of events without buffering', function (next) {
        this.timeout(TIMEOUT);
        totalTxns++;
        cal.middleware()(new EventEmitter(), new EventEmitter(), function () {
            caltestutils.tranLoadx(300, null, 'simple', function () {
                setTimeout(function () {
                    next();
                }, 500);
            });
        });
    });

    it('should record a URL transaction with tons of events with buffering', function (next) {
        this.timeout(TIMEOUT);
        totalTxns++;
        cal.middleware()(new EventEmitter(), new EventEmitter(), function () {
            caltestutils.tranLoadx(301, 'load__load', 'simple', function () {
                setTimeout(function () {
                    next();
                }, 500);
            });
        });
    });

    it('should record few URL transactions in series|buffering|different threadIds ', function (next) {
        this.timeout(TIMEOUT);
        totalTxns += LOOP_CNT;
        var identifier = 'series|buffering|different threadId';
        caltestutils.looper('timesSeries', true, true, identifier, next);
    });

    it('should record few URL transactions in series|buffering|same threadId', function (next) {
        this.timeout(TIMEOUT);
        totalTxns += LOOP_CNT;
        var identifier = 'series|buffering|same threadId';
        caltestutils.looper('timesSeries', false, true, identifier, next);
    });

    it('should record few URL transactions in series|no buffering|different threadIds', function (next) {
        this.timeout(TIMEOUT);
        totalTxns += LOOP_CNT;
        var identifier = 'series|no buffering|different threadIds';
        caltestutils.looper('timesSeries', true, false, identifier, next);
    });

    it('should record few URL transactions in series|no buffering|same threadId', function (next) {
        this.timeout(TIMEOUT);
        totalTxns += LOOP_CNT;
        var identifier = 'series|no buffering|same threadId';
        caltestutils.looper('timesSeries', false, false, identifier, next);
    });

    it('should record few URL transactions in parallel|buffering|different threadId', function (next) {
        this.timeout(TIMEOUT);
        totalTxns += LOOP_CNT;
        var identifier = 'parallel|buffering|different threadId';
        caltestutils.looper('times', true, true, identifier, next);
    });

    it('should record few URL transactions in parallel|no buffering|different threadId', function (next) {
        this.timeout(TIMEOUT);
        totalTxns += LOOP_CNT;
        var identifier = 'parallel|no buffering|different threadId';
        caltestutils.looper('times', true, false, identifier, next);
    });

    it('should record few URL transactions in series|buffering|high load|different threadIds ', function (next) {
        this.timeout(TIMEOUT);
        totalTxns += LOOP_CNT;
        var identifier = 'series|buffering|high load|different threadId';
        caltestutils.loadLooper('timesSeries', true, true, identifier, next);
    });

    it('should record few URL transactions in series|buffering|high load|same threadId', function (next) {
        this.timeout(TIMEOUT);
        totalTxns += LOOP_CNT;
        var identifier = 'series|buffering|high load|same threadId';
        caltestutils.loadLooper('timesSeries', false, true, identifier, next);
    });

    it('should record few URL transactions in series|no buffering|high load|different threadIds', function (next) {
        this.timeout(TIMEOUT);
        totalTxns += LOOP_CNT;
        var identifier = 'series|no buffering|high load|different threadIds';
        caltestutils.loadLooper('timesSeries', true, false, identifier, next);
    });

    it('should record few URL transactions in series|no buffering|high load|same threadId', function (next) {
        this.timeout(TIMEOUT);
        totalTxns += LOOP_CNT;
        var identifier = 'series|no buffering|high load|same threadId';
        caltestutils.loadLooper('timesSeries', false, false, identifier, next);
    });

    it('should record few URL transactions in parallel|buffering|high load|different threadId', function (next) {
        this.timeout(TIMEOUT);
        totalTxns += LOOP_CNT;
        var identifier = 'parallel|buffering|high load|different threadId';
        caltestutils.loadLooper('times', true, true, identifier, next);
    });

    it('should record few URL transactions in parallel|no buffering|high load|different threadId', function (next) {
        this.timeout(TIMEOUT);
        totalTxns += LOOP_CNT;
        var identifier = 'parallel|no buffering|high load|different threadId';
        caltestutils.loadLooper('times', true, false, identifier, next);
    });

});
