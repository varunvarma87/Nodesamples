'use strict';

var assert = require('assert');
var Buffer = require('../lib/calbuffer').Buffer;

function createMockEvent(events, eventId, parentId, name, messageClass) {
    var calEvt = {
        args: {
            eventId: eventId,
            parentEventId: parentId,
            name: name,
            messageClass: messageClass
        },

        emit: function (eventName, args) {
            events.push(args);
        }
    };
    calEvt.instance = calEvt;
    calEvt.name = name;
    return calEvt;
}

function tryAssert(func, done, delay) {
    delay = delay || 200;
    setTimeout(function () {
        try {
            func();
            done();
        }
        catch (err) {
            done(err);
        }
    }, delay);
}

describe('Buffer Dom tests', function () {
    it('root events', function (done) {
        var events = [];
        var buffer = new Buffer();
        buffer.push(createMockEvent(events, 1, 0, 'evt 1'));
        buffer.push(createMockEvent(events, 2, 0, 'evt 2'));
        buffer.push(createMockEvent(events, 3, 0, 'evt 3'));
        buffer.push(createMockEvent(events, 4, 0, 'evt 4'));

        buffer.flushAll();

        tryAssert(function () {
            assert.equal(4, events.length);
            assert.equal('evt 1', events[0].name);
            assert.equal('evt 2', events[1].name);
            assert.equal('evt 3', events[2].name);
            assert.equal('evt 4', events[3].name);
        }, done);
    });

    it('root events with delay', function (done) {
        var events = {
            _events: [],
            _times: [],
            push: function (evt) {
                this._events.push(evt);
                this._times.push(Date.now());
            }
        };
        var buffer = new Buffer(undefined, 100);
        buffer.push(createMockEvent(events, 1, 0, 'evt 1'));
        buffer.push(createMockEvent(events, 2, 0, 'evt 2'));
        buffer.push(createMockEvent(events, 3, 0, 'evt 3'));
        buffer.push(createMockEvent(events, 4, 0, 'evt 4'));

        var st = Date.now();
        buffer.flushAll();

        tryAssert(function () {
            var times = events._times;
            events = events._events;
            assert.equal(4, events.length);
            assert.equal('evt 1', events[0].name);
            assert.equal('evt 2', events[1].name);
            assert.equal('evt 3', events[2].name);
            assert.equal('evt 4', events[3].name);
            assert.equal(4, times.length);
            assert.ok(times[0] - st >= 100);
            assert.ok(times[1] - st >= 100);
            assert.ok(times[2] - st >= 100);
            assert.ok(times[3] - st >= 100);
        }, done);
    });

    it('root events should still be recoded thanks to flush delay', function (done) {
        var events = [];
        var buffer = new Buffer(undefined, 200);
        buffer.push(createMockEvent(events, 1, 0, 'evt 1'));
        buffer.push(createMockEvent(events, 2, 0, 'evt 2'));
        buffer.flushAll();
        setTimeout(function () {
            buffer.push(createMockEvent(events, 3, 0, 'evt 3'));
            buffer.push(createMockEvent(events, 4, 0, 'evt 4'));
        }, 100);

        tryAssert(function () {
            assert.equal(4, events.length);
            assert.equal('evt 1', events[0].name);
            assert.equal('evt 2', events[1].name);
            assert.equal('evt 3', events[2].name);
            assert.equal('evt 4', events[3].name);
        }, done, 400);
    });

    it('delayed root events should not be recoded thanks to no flush delay', function (done) {
        var events = [];
        var buffer = new Buffer(undefined);
        buffer.push(createMockEvent(events, 1, 0, 'evt 1'));
        buffer.push(createMockEvent(events, 2, 0, 'evt 2'));
        buffer.flushAll();
        setTimeout(function () {
            buffer.push(createMockEvent(events, 3, 0, 'evt 3'));
            buffer.push(createMockEvent(events, 4, 0, 'evt 4'));
        }, 100);

        tryAssert(function () {
            assert.equal(2, events.length);
            assert.equal('evt 1', events[0].name);
            assert.equal('evt 2', events[1].name);
        }, done, 400);
    });

    it('root events with no delay', function (done) {
        var events = {
            _events: [],
            _times: [],
            push: function (evt) {
                this._events.push(evt);
                this._times.push(Date.now());
            }
        };
        var buffer = new Buffer(undefined);
        buffer.push(createMockEvent(events, 1, 0, 'evt 1'));
        buffer.push(createMockEvent(events, 2, 0, 'evt 2'));
        buffer.push(createMockEvent(events, 3, 0, 'evt 3'));
        buffer.push(createMockEvent(events, 4, 0, 'evt 4'));

        var st = Date.now();
        buffer.flushAll();

        tryAssert(function () {
            var times = events._times;
            events = events._events;
            assert.equal(4, events.length);
            assert.equal('evt 1', events[0].name);
            assert.equal('evt 2', events[1].name);
            assert.equal('evt 3', events[2].name);
            assert.equal('evt 4', events[3].name);
            assert.equal(4, times.length);
            assert.ok(times[0] - st < 10);
            assert.ok(times[1] - st < 10);
            assert.ok(times[2] - st < 10);
            assert.ok(times[3] - st < 10);
        }, done);
    });

    it('single tranaction', function (done) {
        var events = [];
        var buffer = new Buffer();
        buffer.push(createMockEvent(events, 1, 0, 'begin', 't'));
        buffer.push(createMockEvent(events, 2, 1, 'evt 2'));
        buffer.push(createMockEvent(events, 3, 1, 'evt 3'));
        buffer.push(createMockEvent(events, 1, 0, 'end', 'T'));

        buffer.flushAll();

        tryAssert(function () {
            assert.equal(4, events.length);
            assert.equal('begin', events[0].name);
            assert.equal('evt 2', events[1].name);
            assert.equal('evt 3', events[2].name);
            assert.equal('end', events[3].name);
        }, done);
    });

    it('two tranaction', function (done) {
        var events = [];
        var buffer = new Buffer();
        buffer.push(createMockEvent(events, 1, 0, 'begin 1', 't'));
        buffer.push(createMockEvent(events, 2, 1, 'evt 12'));
        buffer.push(createMockEvent(events, 3, 1, 'evt 13'));
        buffer.push(createMockEvent(events, 1, 0, 'end 1', 'T'));

        buffer.push(createMockEvent(events, 4, 0, 'begin 2', 't'));
        buffer.push(createMockEvent(events, 5, 4, 'evt 22'));
        buffer.push(createMockEvent(events, 6, 4, 'evt 23'));
        buffer.push(createMockEvent(events, 4, 0, 'end 2', 'T'));

        buffer.flushAll();

        tryAssert(function () {
            assert.equal(8, events.length);

            assert.equal('begin 1', events[0].name);
            assert.equal('evt 12', events[1].name);
            assert.equal('evt 13', events[2].name);
            assert.equal('end 1', events[3].name);

            assert.equal('begin 2', events[4].name);
            assert.equal('evt 22', events[5].name);
            assert.equal('evt 23', events[6].name);
            assert.equal('end 2', events[7].name);
        }, done);
    });

    it('two mixed tranactions', function (done) {
        var events = [];
        var buffer = new Buffer();
        buffer.push(createMockEvent(events, 1, 0, 'begin 1', 't'));

        buffer.push(createMockEvent(events, 5, 0, 'begin 2', 't'));
        buffer.push(createMockEvent(events, 6, 5, 'evt 22'));
        buffer.push(createMockEvent(events, 7, 5, 'evt 23'));
        buffer.push(createMockEvent(events, 5, 0, 'end 2', 'T'));

        buffer.push(createMockEvent(events, 2, 1, 'evt 12'));
        buffer.push(createMockEvent(events, 3, 1, 'evt 13'));
        buffer.push(createMockEvent(events, 1, 0, 'end 1', 'T'));

        buffer.flushAll();

        tryAssert(function () {
            assert.equal(8, events.length);

            assert.equal('begin 1', events[0].name);
            assert.equal('evt 12', events[1].name);
            assert.equal('evt 13', events[2].name);
            assert.equal('end 1', events[3].name);

            assert.equal('begin 2', events[4].name);
            assert.equal('evt 22', events[5].name);
            assert.equal('evt 23', events[6].name);
            assert.equal('end 2', events[7].name);
        }, done);
    });

    it('two nested tranactions', function (done) {
        var events = [];
        var buffer = new Buffer();
        buffer.push(createMockEvent(events, 1, 0, 'begin 1', 't'));

        buffer.push(createMockEvent(events, 5, 1, 'begin 2', 't'));
        buffer.push(createMockEvent(events, 6, 5, 'evt 22'));
        buffer.push(createMockEvent(events, 7, 5, 'evt 23'));
        buffer.push(createMockEvent(events, 5, 1, 'end 2', 'T'));

        buffer.push(createMockEvent(events, 2, 1, 'evt 12'));
        buffer.push(createMockEvent(events, 3, 1, 'evt 13'));
        buffer.push(createMockEvent(events, 1, 0, 'end 1', 'T'));

        buffer.flushAll();

        tryAssert(function () {
            assert.equal(8, events.length);

            assert.equal('begin 1', events.shift().name);

            assert.equal('begin 2', events.shift().name);
            assert.equal('evt 22', events.shift().name);
            assert.equal('evt 23', events.shift().name);
            assert.equal('end 2', events.shift().name);

            assert.equal('evt 12', events.shift().name);
            assert.equal('evt 13', events.shift().name);
            assert.equal('end 1', events.shift().name);
        }, done);
    });

    it('3 nested and mixed tranactions', function (done) {
        var events = [];
        var buffer = new Buffer();
        buffer.push(createMockEvent(events, 1, 0, 'begin 1', 't'));  // 1st tx begin root

            buffer.push(createMockEvent(events, 5, 1, 'begin 2', 't'));  // 2nd nested of 1st begin
            buffer.push(createMockEvent(events, 6, 5, 'evt 22'));  // 2nd nested of 1st event
            buffer.push(createMockEvent(events, 7, 5, 'evt 23'));  // 2nd nested of 1st event

                buffer.push(createMockEvent(events, 10, 0, 'begin 3', 't'));  // 3rd tx begin root
                buffer.push(createMockEvent(events, 11, 10, 'evt 10-1'));  // 3rd tx event

            buffer.push(createMockEvent(events, 5, 1, 'end 2', 'T'));  // 2nd nested of 1st end

        buffer.push(createMockEvent(events, 2, 1, 'evt 12'));  // 1st tx event

                buffer.push(createMockEvent(events, 10, 0, 'end 3', 'T'));  // 3rd tx end

        buffer.push(createMockEvent(events, 3, 1, 'evt 13'));  // 1st tx event
        buffer.push(createMockEvent(events, 1, 0, 'end 1', 'T'));  // 1st tx end

        buffer.flushAll();

        tryAssert(function () {
            assert.equal(11, events.length);

            assert.equal('begin 1', events.shift().name);

            assert.equal('begin 2', events.shift().name);
            assert.equal('evt 22', events.shift().name);
            assert.equal('evt 23', events.shift().name);
            assert.equal('end 2', events.shift().name);

            assert.equal('evt 12', events.shift().name);
            assert.equal('evt 13', events.shift().name);
            assert.equal('end 1', events.shift().name);

            assert.equal('begin 3', events.shift().name);
            assert.equal('evt 10-1', events.shift().name);
            assert.equal('end 3', events.shift().name);
        }, done);
    });

    it('two separated tranactions with one parent of the other', function (done) {
        var events = [];
        var buffer = new Buffer();
        buffer.push(createMockEvent(events, 1, 0, 'begin 1', 't'));
        buffer.push(createMockEvent(events, 2, 1, 'evt 12'));
        buffer.push(createMockEvent(events, 3, 1, 'evt 13'));
        buffer.push(createMockEvent(events, 1, 0, 'end 1', 'T'));

        buffer.push(createMockEvent(events, 5, 1, 'begin 2', 't'));
        buffer.push(createMockEvent(events, 6, 5, 'evt 22'));
        buffer.push(createMockEvent(events, 7, 5, 'evt 23'));
        buffer.push(createMockEvent(events, 5, 1, 'end 2', 'T'));


        buffer.flushAll();

        tryAssert(function () {
            assert.equal(8, events.length);

            assert.equal('begin 1', events[0].name);
            assert.equal('evt 12', events[1].name);
            assert.equal('evt 13', events[2].name);

            assert.equal('begin 2', events[3].name);
            assert.equal('evt 22', events[4].name);
            assert.equal('evt 23', events[5].name);
            assert.equal('end 2', events[6].name);
            assert.equal('end 1', events[7].name);
        }, done);
    });

    it('Simulate runaway transaction, it should still get logged', function (done) {
        var events = [];
        var buffer = new Buffer();
        buffer.push(createMockEvent(events, 1, 30, 'begin 1', 't'));
        buffer.push(createMockEvent(events, 2, 1, 'evt 12'));
        buffer.push(createMockEvent(events, 3, 1, 'evt 13'));
        buffer.push(createMockEvent(events, 1, 30, 'end 1', 'T'));

        buffer.flushAll();

        tryAssert(function () {
            assert.equal(4, events.length);

            assert.equal('begin 1', events[0].name);
            assert.equal('evt 12', events[1].name);
            assert.equal('evt 13', events[2].name);
            assert.equal('end 1', events[3].name);
        }, done);
    });


    it('three nested tranactions', function (done) {
        var events = [];
        var buffer = new Buffer();
        buffer.push(createMockEvent(events, 1, 0, 'begin 1', 't'));

            buffer.push(createMockEvent(events, 5, 1, 'begin 2', 't'));
            buffer.push(createMockEvent(events, 6, 5, 'evt 22'));
                buffer.push(createMockEvent(events, 10, 5, 'begin 3', 't'));
            buffer.push(createMockEvent(events, 7, 5, 'evt 23'));
                buffer.push(createMockEvent(events, 11, 10, 'evt 3'));
            buffer.push(createMockEvent(events, 5, 1, 'end 2', 'T'));
                buffer.push(createMockEvent(events, 10, 5, 'end 3', 'T'));

        buffer.push(createMockEvent(events, 2, 1, 'evt 12'));
        buffer.push(createMockEvent(events, 3, 1, 'evt 13'));
        buffer.push(createMockEvent(events, 1, 0, 'end 1', 'T'));

        buffer.flushAll();

        tryAssert(function () {
            assert.equal(11, events.length);
            assert.equal('begin 1', events.shift().name);

                assert.equal('begin 2', events.shift().name);
                assert.equal('evt 22', events.shift().name);
                    assert.equal('begin 3', events.shift().name);
                    assert.equal('evt 3', events.shift().name);
                    assert.equal('end 3', events.shift().name);
                assert.equal('evt 23', events.shift().name);
                assert.equal('end 2', events.shift().name);


            assert.equal('evt 12', events.shift().name);
            assert.equal('evt 13', events.shift().name);
            assert.equal('end 1', events.shift().name);
        }, done);
    });


    it('two separate tranactions with one parent of the other and incomplete', function (done) {
        var events = [];
        var buffer = new Buffer();
        buffer.push(createMockEvent(events, 1, 0, 'begin 1', 't'));
        buffer.push(createMockEvent(events, 2, 1, 'evt 12'));
        buffer.push(createMockEvent(events, 3, 1, 'evt 13'));

        buffer.push(createMockEvent(events, 5, 1, 'begin 2', 't'));
        buffer.push(createMockEvent(events, 6, 5, 'evt 22'));
        buffer.push(createMockEvent(events, 7, 5, 'evt 23'));


        buffer.flushAll();

        tryAssert(function () {
            assert.equal(8, events.length);

            assertTx(events.shift(), 'begin 1', 't');

            assert.equal('evt 12', events.shift().name);
            assert.equal('evt 13', events.shift().name);

            assertTx(events.shift(), 'begin 2', 't');
            assert.equal('evt 22', events.shift().name);
            assert.equal('evt 23', events.shift().name);
            assertTx(events.shift(), 'begin 2', 'T');

            assertTx(events.shift(), 'begin 1', 'T');

        }, done);
    });

    it('unfinished child transactions should be closed', function (done) {
        var events = [];
        var buffer = new Buffer();
        buffer.push(createMockEvent(events, 1, 0, 'begin 1', 't'));
        buffer.push(createMockEvent(events, 2, 1, 'begin 2', 't'));
        buffer.push(createMockEvent(events, 1, 0, 'end 1', 'T'));

        buffer.flushAll();

        tryAssert(function () {
            assert.equal(4, events.length);

            assertTx(events.shift(), 'begin 1', 't');
            assertTx(events.shift(), 'begin 2', 't');
            assertTx(events.shift(), 'begin 2', 'T');
            assertTx(events.shift(), 'end 1', 'T');

        }, done);
    });

    it('multiple unfinished children transactions should be closed', function (done) {
        var events = [];
        var buffer = new Buffer();
        buffer.push(createMockEvent(events, 1, 0, 'begin 1', 't'));
        buffer.push(createMockEvent(events, 2, 1, 'evt 11'));
        buffer.push(createMockEvent(events, 3, 1, 'begin 2', 't'));
        buffer.push(createMockEvent(events, 4, 3, 'begin 3', 't'));
        buffer.push(createMockEvent(events, 1, 0, 'end 1', 'T'));

        buffer.flushAll();

        tryAssert(function () {
            assert.equal(7, events.length);

            assertTx(events.shift(), 'begin 1', 't');
            assert.equal('evt 11', events.shift().name);
            assertTx(events.shift(), 'begin 2', 't');
            assertTx(events.shift(), 'begin 3', 't');
            assertTx(events.shift(), 'begin 3', 'T');
            assertTx(events.shift(), 'begin 2', 'T');
            assertTx(events.shift(), 'end 1', 'T');

        }, done);
    });

});

function assertTx(evt, name, type) {
    assert.equal(name, evt.name);
    assert.equal(type, evt.messageClass);
}
