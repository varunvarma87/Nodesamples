'use strict';

var nsutils = require('./nsutils'),
    constants = require('./constants'),
    Event = require('./messages/event'),
    Heartbeat = require('./messages/heartbeat'),
    Transaction = require('./messages/transaction');

var debug = require('debug')('cal:logger');

var nonCtxNextEventId = 1;

function Logger(options) {
    this._options = options;
    this._publisher = process;
    this._publishTopic = constants.CAL_EVENT_TYPE;
}

Logger.prototype = {

    get options() {
        return this._options;
    },

    set options(value) {
        this._options = value;
    },

    _broadcast: function (eventArgs) {
        eventArgs.logger = this._options && this._options.name || 'root';
        if (this._publisher) {
            this._publisher.emit(this._publishTopic, eventArgs);
        }
    },

    publishTo: function (emitter, topic) {
        if (emitter && topic) {
            this._publisher = emitter;
            this._publishTopic = topic;
        }
    },

    clearPublishTargets: function clearPublishTargets() {
        this._publisher = null;
        this._publishTopic = null;
    },

    createEvent: function (type, name, status, data) {

        var parent = nsutils.getValue(constants.TX) || null;
        if (parent) {
            parent.flush();
        }

        var message = new Event(type, name, status, data);
        message.eventId = getNextEventId();
        message.parent = parent;
        message.once('complete', this._broadcast.bind(this));
        return message;
    },


    createHeartbeat: function (type, name, status, data) {
        var message = new Heartbeat(type, name, status, data);
        message.eventId = getNextEventId();
        message.once('complete', this._broadcast.bind(this));
        return message;
    },


    /* createTransaction(type, name[, status, data, next]) */
    createTransaction: function (type, name, status, data, next) {
        var args = Array.prototype.slice.call(arguments);
        var self = this;
        next = typeof args[args.length - 1] === 'function' && args.pop() || null;
        var eventId = getNextEventId();

        function createTx(parent) {
            var message = new Transaction(
                typeof type !== 'function' && type,
                typeof name !== 'function' && name,
                typeof status !== 'function' && status,
                typeof data !== 'function' && data);

            message.eventId = eventId;
            message.parent = parent;
            message.correlationId = message.parent && message.parent.correlationId ||
                self.correlationId || nsutils.getValue('correlationId');
            message.on('flush', self._broadcast.bind(self));
            message.once('complete', function (eventArgs) {
                message.emit('flush', eventArgs);
                message.removeAllListeners('flush');
            });
            return message;
        }

        if (!next) {
            return createTx(nsutils.getValue(constants.TX) || null);
        }

        nsutils.run(function () {

            var parent = nsutils.getValue(constants.TX) || null;
            if (parent) {
                parent.flush();
            }
            var message = createTx(parent);
            // remember current tx
            nsutils.setValue(constants.TX, message);

            next(null, message);
        });

    }

};


function getOrCreateCounter() {
    var key = 'nextId';
    // keep counter counting
    var getNextId = nsutils.getValue(key, function () {
        var eventId = nonCtxNextEventId++;
        nonCtxNextEventId %= 65535;
        debug('using non-context event id generator, eventId: ', eventId);
        return eventId;
    });
    if (!getNextId) {
        getNextId = function nextEventId() {
            var eventId = this.eventId++;
            this.eventId %= 65535; // this is a limit
            return eventId;
        }.bind({ eventId: 1 });

        nsutils.setValue(key, getNextId);
    }

    return getNextId;
}

function getNextEventId() {
    var getNextId = getOrCreateCounter();
    return getNextId();
}

module.exports = Logger;
