'use strict';

var nsutils = require('./nsutils');
var threads = require('./threads');
var constants = require('./constants');
var tryRequire = require('try-require');
var patchQ = tryRequire('cls-q');
var onFinished = require('on-finished');
var correlationId = require('./correlationId');

module.exports = function middleware(options) {
    options = options || {};

    var enableBuffering = (typeof options.enableBuffering === 'boolean') ? options.enableBuffering : false;
    var enableNestedCal = options.enableNestedCal === undefined ? false : options.enableNestedCal;
    var bufferFlushDelay = options.bufferFlushDelay || 0;

    return function cal(req, res, next) {
        nsutils.bindEmitter(req);
        nsutils.bindEmitter(res);

        //loading cls-q shim, cls-q is available
        if (patchQ) {
            patchQ(nsutils.namespace);
        }

        nsutils.run(function () {
            nsutils.set(constants.BUFFER_FLUSH_DELAY, bufferFlushDelay);
            nsutils.set(constants.IS_BUFFERING, enableBuffering);
            nsutils.set(constants.IS_NESTED_CAL, enableNestedCal);
            nsutils.set(constants.TX, null);
            var threadId = threads.getNextThreadId();
            nsutils.set(constants.THREAD_ID, threadId);
            req.threadId = threadId;    //For backward compatibility
            nsutils.set('correlationId', correlationId(req));
            // reset counter
            nsutils.set('nextId', null);

            onFinished(res, function (err, res) {
                threads.releaseThreadId(threadId);
            });

            next();
        });
    };
};
