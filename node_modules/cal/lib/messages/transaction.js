'use strict';

var objutil = require('objutil'),
    Activity = require('./activity'),
    MessageClass = require('../constants').MessageClass;

function Transaction() {
    Transaction.super_.apply(this, arguments);
    this.messageClass = MessageClass.ATOMIC;

    this._correlationId = 0;
    this._duration = 0;
}

Transaction.CORRELATION_ID_KEY = 'corr_id_';


objutil.extend(Transaction, Activity, {

    get duration() {
        return this._duration;
    },

    set duration(value) {
        this._duration = value;
    },


    get correlationId() {
        return this._correlationId;
    },

    set correlationId(value) {
        if (value) {
            this._correlationId = value;
            this.addData(Transaction.CORRELATION_ID_KEY, value);
        }
    },


    flush: function () {
        if (this.messageClass !== MessageClass.TRANSACTION_END) {
            // Still ATOMIC
            // Write start transaction header and data set to this point

            this.messageClass = MessageClass.TRANSACTION_START;

            if (this._isBufferingEnabled) {
                var buffer = this.getCalBuffer();
                buffer.push({instance: this, eventName: 'flush', args: this._getEventArgs()});
            } else {
                this.emit('flush', this._getEventArgs());
            }

            // Reset data and setup transaction end
            this._data = Object.create(null);
            this.addData(Transaction.CORRELATION_ID_KEY, this._correlationId);
            this.messageClass = MessageClass.TRANSACTION_END;
        }
    },


    _doComplete: function () {
        //assert.strictEqual(this._duration, undefined, 'Transaction is already completed.');
        if (this._duration === 0 && this.timestamp) {
            this._duration = Date.now() - this.timestamp;
        }
        //update the time if it's Transaction End Type
        if (this.messageClass === MessageClass.TRANSACTION_END) {
            this.timestamp = Date.now();
            this.flushBuffer = true;
        }
    },


    _doGetEventArgs: function () {
        return {
            duration: this._duration
        };
    }

});

module.exports = Transaction;
