'use strict';

var assert = require('chai').assert,
    express = require('express'),
    request = require('supertest'),
    ec = require('../lib');

describe('PP CookieParser Middleware', function () {

    var app = express();

    before(function (done) {

        //Test user_session data
        app.use(function (req, res, next) {
            if (!req.cookies) {
                req.cookies = {};
            }
            if (req.url === '/struct') {
                req.cookies.TVKbnJIgoopqCTftP3PCeQTrLnu = 'KIed4ZuzuUaptYM7aPu7v7Y-CwoKuJ3_TkcpcYVV0zH0yHCzFkTqnsHMLTKuSgtDHOHQhRSkLF8xs0866ucpGrVgimUGFW7yB66EfG5HxBKrIpDYJ9L0d0COWl_O4xoUwP7Q20';
            }
            else if (req.url === '/visitorId') {
                req.cookies.UGZUWCKM6F_awXE8WyEURJrBYQG = '1iDjghDJSdi6D7yy7R20dgCgNz6YEVWrzvurh9Hj_JFGF69dju8lJB-izThkF95Bu3jj491Ygx8eREl8';
            }
            else if (req.url === '/vo'){
                req.cookies.TVKbnJIgoopqCTftP3PCeQTrLnu = 'I9u0HbtGs9uZb5etbnrbAfP1J4i7EzYBQLSA4N85BvDXFHUVnXHAQsz9wH0RTcoN1UZaQ0JqYnYxePRItLsXWjcDJgMFgX41NVkCW7fAteo4FRzye61k2tGq4kMpL8nb8UN2DGCxdHTNjBmKWYy0i-RjougvUEd9w73sHJx9SZy767WT493nHXhuJQJna16UzEhjXa-_5FTvP6dn69l8WUq3lI50bc38WKzSaqbeNzB58rgg_OHd5LL1lD_r2Un1oQ4qi0';
            }
            else {
                req.cookies.TVKbnJIgoopqCTftP3PCeQTrLnu = 'abcdefg';
            }
            next();
        });

        app.use(ec({
            encryptionKey: '1h1P/y6F/kg6OlM7oeTms2Yr6Lw=',
            macKey: 'SF4HNI/A1U3xPww2eylPqJNQIvU='
        }));

        app.all('/struct', function (req, res) {
            res.json(req.cookies.user_session);
        });

        app.all('/visitorId', function (req, res) {
            res.json(req.cookies.visitor_id);
        });

        app.all('/vo', function (req, res) {
            res.json(req.cookies.user_session);
        });

        app.all('/errorCase', function (req, res) {
            res.send(200);
        });

        done();

    });

    it('should parse auth token from encrypted user_session cookie in struct format', function (next) {
        request(app).get('/struct').end(function (err, res) {
            var authToken = res.body.data;
            assert.strictEqual(authToken.account_number, '2127033655768163675');
            assert.strictEqual(authToken.session_number, 10);
            assert.strictEqual(authToken.session_time, 1242772055);
            assert.strictEqual(authToken.login_id, '228295');
            next();
        });
    });

    it('should parse auth token from encrypted user_session cookie in VO format', function (next) {
        request(app).get('/vo').end(function (err, res) {
            var authToken = res.body.data;
            assert.strictEqual(authToken.account_number, '2127033655768163675');
            assert.strictEqual(authToken.session_number, 10);
            assert.strictEqual(authToken.session_time, 1242772055);
            assert.strictEqual(authToken.login_id, '228295');
            next();
        });
    });

    it('should parse visitorId from encrypted visitor_id cookie.', function (next) {
        request(app).get('/visitorId').end(function (err, res) {
            assert.strictEqual(new Buffer(res.body).toString(), '6124895493919346690');
            next();
        });
    });

    it('should not error on bad decrypt.', function (next) {
        request(app).get('/errorCase').end(function (err, res) {
            assert.ok(!err);
            next();
        });
    });

});
