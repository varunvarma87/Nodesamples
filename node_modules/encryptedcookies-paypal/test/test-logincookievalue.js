'use strict';

var assert = require('chai').assert,
    LoginCookie = require('logincookie-paypal'),
    ppcryptutils = require('cryptutils-paypal');

describe('LoginCookie', function () {

    var authToken = {
        account_number: '2127033655768163675',
        auth_type: 'P'.charCodeAt(0),
        login_id: '228295',
        session_number: 10,
        session_time: 1242772055
    };

    var encryptedCookie = 'I9u0HbtGs9uZb5etbnrbAfP1J4i7EzYBQLSA4N85BvDXFHUVnXHAQsz9wH0RTcoN1UZaQ0JqYnYxePRItLsXWjcDJgMFgX41NVkCW7fAteo4FRzye61k2tGq4kMpL8nb8UN2DGCxdHTNjBmKWYy0i-RjougvUEd9w73sHJx9SZy767WT493nHXhuJQJna16UzEhjXa-_5FTvP6dn69l8WUq3lI50bc38WKzSaqbeNzB58rgg_OHd5LL1lD_r2Un1oQ4qi0';

    var cookieVO;

    it('should decrypt/deserialize', function (next) {

        var ppcrypto = ppcryptutils({
            encryptionAlgorithm: 'desx',
            macAlgorithm: 'sha1',
            encryptionKey: new Buffer('1h1P/y6F/kg6OlM7oeTms2Yr6Lw=', 'base64'),
            macKey: new Buffer('SF4HNI/A1U3xPww2eylPqJNQIvU=', 'base64')
        });

        ppcrypto.decodeAndUnsealNamed('user_session', new Buffer(encryptedCookie), function (data) {

            cookieVO = LoginCookie.deserialize(data);

            assert.strictEqual(cookieVO.data.account_number, authToken.account_number);
            assert.strictEqual(cookieVO.data.auth_type, authToken.auth_type);
            assert.strictEqual(cookieVO.data.login_id, authToken.login_id);
            assert.strictEqual(cookieVO.data.session_number, authToken.session_number);
            assert.strictEqual(cookieVO.data.session_time, authToken.session_time);

            next();

        });

    });

    it('should serialize/encrypt', function (next) {

        var ppcrypto = ppcryptutils({
            encryptionAlgorithm: 'desx',
            macAlgorithm: 'sha1',
            encryptionKey: new Buffer('1h1P/y6F/kg6OlM7oeTms2Yr6Lw=', 'base64'),
            macKey: new Buffer('SF4HNI/A1U3xPww2eylPqJNQIvU=', 'base64')
        });

        var serialized = LoginCookie.serialize(cookieVO);

        ppcrypto.sealAndEncodeNamed('user_session', serialized, function (encrypted) {

            assert.strictEqual(encrypted, encryptedCookie);

            next();

        });

    });

});
