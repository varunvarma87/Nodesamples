'use strict';

var AuthToken = require('authtoken-paypal'),
    LegacyStruct = require('./legacystruct'),
    Serializer = require('vobin').Serializer,
    Deserializer = require('vobin').Deserializer,
    thing = require('core-util-is');

/**
 * @see https://dev.paypal.com/wiki/Sparta/LoginSessionCookie
 * @constructor
 */
function LoginCookie(data, format) {
    this.data = undefined;
    this.format = format || 1;

    if (data instanceof AuthToken || thing.isString(data)) {
        this.data = data;
    }
    else if (thing.isBuffer(data)) {
        this.data = this.format === 1 ? AuthToken.fromLegacyStruct(new LegacyStruct(data)) : data.toString();
    }
    else if (thing.isObject(data)) {
        this.data = new AuthToken(data);
    }

    this.channel = this.format === 1 ? 'WEB' : 'MOBILE';
    this.passporting = 0;
}

exports = module.exports = LoginCookie;

/**
 * Serializes a cookie into a VO binary cookie value.
 * @param cookie
 * @returns {*}
 */
LoginCookie.serialize = function (cookie) {
    var serialized;

    if (cookie instanceof LoginCookie) {
        serialized = Serializer.serialize({
            name: 'User::LoginSessionCookieVO',
            fields: {
                passporting: {
                    type: 'bool',
                    value: cookie.passporting
                },
                channel: {
                    type: 'string',
                    value: cookie.channel
                },
                format: {
                    type: 'sint32',
                    value: cookie.format
                },
                data: {
                    type: 'buffer',
                    value: cookie.format === 1 ? LegacyStruct.fromJSON(cookie.data).buffer : new Buffer(cookie.data)
                }
            }
        });

        return Buffer.concat([new Buffer([0x56]), serialized]);
    }

    return cookie.buffer || cookie;
};

/**
 * Deserializes a cookie from either a Legacy cookie value or VO cookie value.
 * @param data
 * @returns {LoginCookie}
 */
LoginCookie.deserialize = function (data) {
    var cookie, vo;

    cookie = new LoginCookie();

    if (isVO(data)) {
        vo = Deserializer.deserialize(data.slice(1));

        Object.keys(vo.fields).forEach(function (key) {
            var field = vo.fields[key];

            if (key === 'data') {
                //FAT
                if (vo.fields.format.value === 1) {
                    cookie[key] = AuthToken.fromLegacyStruct(new LegacyStruct(field.value));
                }
                //SLIM
                else {
                    cookie[key] = field.value ? field.value.toString() : field.value;
                }
            }
            else {
                cookie[key] = field.value;
            }
        });

        return cookie;
    }

    cookie.data = AuthToken.fromLegacyStruct(new LegacyStruct(data));

    return cookie;
};

LoginCookie.Legacy = LegacyStruct;

/**
 * Determines if the data contains the VO header.
 * @param rawCookie
 * @returns {boolean}
 */
function isVO(rawCookie) {
    return (rawCookie[0] === 0x56 && rawCookie[1] === 0x56 && rawCookie[2] === 0x4F);
}
