var extend = function extend(dust) {
	dust.helpers.lowerCase = function(chunk, ctx, bodies) {
		'use strict';
		if (bodies.block) {
			return chunk.capture(bodies.block, ctx, function(string, chunk) {
				chunk.end(string.toLocaleLowerCase());
			});
		}
		return chunk;
	},
	dust.helpers.upperCase = function(chunk, ctx, bodies) {
		'use strict';
		if (bodies.block) {
			return chunk.capture(bodies.block, ctx, function(string, chunk) {
				chunk.end(string.toUpperCase());
			});
		}
		return chunk;
	},
	dust.helpers.titleCase = function(chunk, ctx, bodies) {
		'use strict';
		if (bodies.block) {
			return chunk.capture(bodies.block, ctx, function(string, chunk) {
				chunk.end(string.replace(/([^\W_]+[^\s-]*) */g, (function(txt) {
					return txt.charAt(0).toUpperCase() + txt.substr(1);
				})));
			});
		}
		return chunk;
	},
	dust.helpers.contains = function(chunk, ctx, bodies, params) {
		'use strict';
		params = params || {};
		var key = dust.helpers.tap(params.key, chunk, ctx),
			value = dust.helpers.tap(params.value, chunk, ctx),
			skip = bodies['else'];
		if (key.indexOf(value) !== -1) {
			return chunk.render(bodies.block, ctx);
		}
		if (skip) {
			return chunk.render(skip, ctx);
		}
		return chunk;
	},
	dust.helpers.notContains = function(chunk, ctx, bodies, params) {
		'use strict';
		params = params || {};
		var key = dust.helpers.tap(params.key, chunk, ctx),
			value = dust.helpers.tap(params.value, chunk, ctx),
			skip = bodies['else'];
		if (key.indexOf(value) === -1) {
			return chunk.render(bodies.block, ctx);
		}
		if (skip) {
			return chunk.render(skip, ctx);
		}
		return chunk;
	},
	dust.helpers.format = function (chunk, ctx, bodies, params) {
		'use strict';
		params = params || {};
		var number =  dust.helpers.tap(params.number, chunk, ctx),
			pattern = dust.helpers.tap(params.pattern, chunk, ctx),
			replace = dust.helpers.tap(params.replace, chunk, ctx),
			format;
		pattern = new RegExp(pattern);
		format = number.replace(pattern, replace);
		return chunk.write(format);
	},
	dust.helpers.ifPartial = function provide(chunk, ctx, bodies, params) {
		'use strict';
		var name = dust.helpers.tap(params.name, chunk, ctx),
			skip = bodies['else'];

		if (dust.cache[name]) {
			return chunk.render(bodies.block, ctx);
		}
		if (skip) {
			return chunk.render(skip, ctx);
		}
		return chunk;
	}
};

if (typeof exports !== 'undefined') {
	module.exports = extend;
} else {
	/* global dust: true */
	extend(dust);
}
