var should = require('should'),
    dust = require('dustjs-linkedin'),
    helpers = require('dustjs-helpers'),
    path = require('path'),
    helper = require('../index');
helper(dust); // register dust helper

// Ensure we're in the `test` environment.
process.env.NODE_ENV = 'test';

function runit(tmpl, model, callback) {
    var compiled = dust.compile(tmpl, "test");
    dust.loadSource(compiled);
    var out = dust.render("test", model, function (err, result) {
        return callback(null, result);
    });
}

describe('onboarding dust helper tests', function () {
    it('lowerCase test', function (done) {
        var tmpl = '{@lowerCase}STRING{/lowerCase}';
        var out = runit(tmpl, {}, function(err, out) {
            out.should.equal('string');
            done();
        });
    });
    it('upperCase test', function (done) {
        var tmpl = '{@upperCase}string{/upperCase}';
        var out = runit(tmpl, {}, function(err, out) {
            out.should.equal('STRING');
            done();
        });
    });
    it('titleCase test', function (done) {
        var tmpl = '{@titleCase}string{/titleCase}';
        var out = runit(tmpl, {}, function(err, out) {
            out.should.equal('String');
            done();
        });
    });
    it('contains test', function (done) {
        var tmpl = '{@contains key="[\'US\', \'FR\']" value="FR"}true{:else}false{/contains}';
        var out = runit(tmpl, {}, function(err, out) {
            out.should.equal('true');
            done();
        });
    });
    it('notContains test', function (done) {
        var tmpl = '{@notContains key="[\'US\', \'FR\']" value="IT"}true{:else}false{/notContains}';
        var out = runit(tmpl, {}, function(err, out) {
            out.should.equal('true');
            done();
        });
    });
    it('format test', function (done) {
        var tmpl = '{@format number="1234567890" pattern="([0-9]{3})([0-9]{3})([0-9]{4})" replace="($1) $2-$3" /}';

        var out = runit(tmpl, {}, function(err, out) {
            out.should.equal('(123) 456-7890');
            done();
        });
    });
    it('ifPartial test', function (done) {
        var tmpl = '{@ifPartial name="dropdown"}partial found{:else}partial not found{/ifPartial}';

        var out = runit(tmpl, {}, function(err, out) {
            out.should.equal('partial not found');
            done();
        });
    });
});