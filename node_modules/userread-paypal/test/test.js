/*global describe:false, it:false, before:false, beforeEach:false, after:false, afterEach:false*/
'use strict';

var userread = require('../lib/UserReadWrapper'),
    servicecore = require('servicecore'),
    vault = require('vault'),
    path = require('path'),
    nconf = require('nconf'),
    assert = require('assert');

servicecore.register('userread-paypal', userread);

nconf.file({ file: './test/config.json' });

describe("Testing UserRead in userlifecycleserv", function () {

    before(function (next) {
        this.timeout(10000);

        process.env.SHARE_PWD = 'aardvark';

        var options = {
            dir:        path.join(process.cwd(), 'node_modules', 'testkeystore')
        };

        vault.create(options, function (err, pkg) {
            nconf.set('services:servicecore:sessions', pkg.getClientSessions());

            var credentials = pkg.getClientCredentials();

            Object.getOwnPropertyNames(credentials).forEach(function (key)  {
                nconf.set('services:servicecore:' + key, credentials[key]);
            });

            servicecore.configuration = nconf.get('services');

            next();
        });
    });

    it("invoke load_user_data given account number", function (next) {
        this.timeout(5000);
        var payload = {
            include_inactive: false,
            account_load: {
                account_criteria: {
                    load_account: true,
                    account_property_criteria: {

                    },
                    account_relationship_criteria: {
                        load_account_rel: true,
                        this_account_is: 3,
                        rel_type: 0
                    }
                },
                account_number: [ "1731511286119924231" ]
            },
            party_load: {
                party_id: [ "1731511286119924231" ],
                party_criteria: {
                    load_party: true,
                    name_criteria: {
                        load_name: true
                    },
                    email_criteria: {
                        load_email: true
                    },
                    address_criteria: {
                        load_addresses: true
                    },
                    phone_criteria: {
                        load_phone: true
                    },
                    doc_id_criteria: {
                        load_document: true
                    },
                    security_question_criteria: {
                        load_security_question: true
                    },
                    date_of_birth_criteria: {
                        load_date_of_birth: true
                    },
                    public_credential_criteria: {
                        domains_to_load_as_enum: [ 'PPALIAS' ]
                    }
                }
            }
        };
        var userreadClient = servicecore.create('userread-paypal');
        userreadClient.load_user_data(payload, function (error, result) {
            assert(!error && result.body);
            assert(result.statusCode === 200);
            assert(result.body.result.success === true);
            next();
        });
    });

    it("invoke load_user_data given email", function (next) {
        this.timeout(5000);
        var payload = {
            email_load: {
                email: ['mkoga-gpt1@paypal.com']
            }
        };
        var userreadClient = servicecore.create('userread-paypal');
        userreadClient.load_user_data(payload, function (error, result) {
            assert(!error && result.body);
            assert(result.statusCode === 200);
            assert(result.body.result.success === true);
            next();
        });
    });

    it("invoke load_by_account given account number", function (next) {
        this.timeout(5000);
        var payload = {
            account_number: "1731511286119924231",
            account_criteria: {
                load_account: true
            },
            user_name_criteria: {
                load_name: true
            },
            email_criteria: {
                load_emails: true
            },
            address_criteria: {
                load_addresses: true
            },
            phone_criteria: {
                load_phones: true
            },
            tax_id_criteria: {
                load_tax_id: true
            },
            business_criteria: {
                load_business: true
            },
            date_of_birth_criteria: {
                load_date_of_birth: true
            },
            alias_criteria: {
                load_aliases: true
            },
            client_actor: {
                actor_type: 1,
                actor_ip_addr: '17.16.1.1',
                actor_session_id: '2011-11-11 00:00:00'
            }
        };
        var userreadClient = servicecore.create('userread-paypal');
        userreadClient.load_by_account(payload, function (error, result) {
            assert(!error && result.body);
            assert(result.statusCode === 200);
            assert(result.body.result.success === true);
            next();
        });
    });
});
