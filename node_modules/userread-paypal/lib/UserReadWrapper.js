'use strict';

var camelscore = require('camelscore');

exports = module.exports = function (config, transport) {
	
    return {
		/**
		 * load_user_data
		 * @param request
		 * @param callback
		 */
		load_user_data: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::LoadUserDataRequest', request);
			
			transport({
		        service: 'User::UserRead',
		        operation: 'load_user_data',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * load_additional_data
		 * @param request
		 * @param callback
		 */
		load_additional_data: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::LoadAdditionalDataRequest', request);
			
			transport({
		        service: 'User::UserRead',
		        operation: 'load_additional_data',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * read_identity_partner_app
		 * @param request
		 * @param callback
		 */
		read_identity_partner_app: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::ReadIdentityPartnerAppRequest', request);
			
			transport({
		        service: 'User::UserRead',
		        operation: 'read_identity_partner_app',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * read_identity_access_point
		 * @param request
		 * @param callback
		 */
		read_identity_access_point: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::ReadIdentityAccessPointRequest', request);
			
			transport({
		        service: 'User::UserRead',
		        operation: 'read_identity_access_point',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * load_by_account
		 * @param request
		 * @param callback
		 */
		load_by_account: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::LoadByAccountRequest', request);
			
			transport({
		        service: 'User::UserRead',
		        operation: 'load_by_account',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * load_entities_by_id
		 * @param request
		 * @param callback
		 */
		load_entities_by_id: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::LoadEntitiesByIdRequest', request);
			
			transport({
		        service: 'User::UserRead',
		        operation: 'load_entities_by_id',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * load_by_alias
		 * @param request
		 * @param callback
		 */
		load_by_alias: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::LoadByAliasRequest', request);
			
			transport({
		        service: 'User::UserRead',
		        operation: 'load_by_alias',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * load_by_login
		 * @param request
		 * @param callback
		 */
		load_by_login: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::LoadByLoginRequest', request);
			
			transport({
		        service: 'User::UserRead',
		        operation: 'load_by_login',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		}
		
	};
};