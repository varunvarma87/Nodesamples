'use strict';

var fs = require('fs'),
    path = require('path'),
    apputil = require('./util/apputil'),
    extend  = require('extend');


exports = module.exports = function () {
    var data = {},
        pkgJson = path.join(process.cwd(), 'package.json'),
        appName;

    //Get the application name from the package.json
    if (fs.existsSync(pkgJson)) {
        appName = require(pkgJson).name;
    }

    apputil.scanDependencies(process.cwd(), true, function (pkg, dir) {
        var layout, name, root, ljson, connName;

        layout = path.join(dir, 'layout.json');
        name = pkg.name;


        function onLayout(layoutObj) {
            root = data[ljson.root] || (data[ljson.root] = {});
            //The Connection name details for Application level layout are abstracted
            //from any of these - hostname, port, ipport.
            connName = layoutObj.hostname || layoutObj.port || layoutObj.ipport;
            if (appName === name && connName) {
                //If the Name is the Application name -  This implies an app level layout.json
                // Use the service host name (or ipport) as the key instead of the application name.
                root = root[connName] || (root[connName] = {});
            } else {
                root = root[name] || (root[name] = {});
            }
            extend(true, root, layoutObj);
        }

        if (fs.existsSync(layout)) {
            ljson = require(layout);
            if (ljson.root && ljson.layout) {
                /*
                 * Support Layout field as an array.
                 */
                if (Array.isArray(ljson.layout)) {
                    ljson.layout.forEach(function (layoutObj) {
                        onLayout(layoutObj);
                    });
                } else {
                    onLayout(ljson.layout);
                }

            } else {
                extend(true, data[name] || (data[name] = {}), ljson);
            }
        }
    });

    return data;
};
