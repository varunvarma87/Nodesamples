'use strict';


exports.walk = function walk(obj, key, onprop) {
    if (typeof key === 'function') {
        onprop = key;
        key = null;
    }

    Object.keys(obj).forEach(function (prop) {
        var value = obj[prop];

        if (value !== null && !Array.isArray(value)) {
            if (typeof value === 'object') {
                walk(value, prop, onprop);
            } else if (value !== undefined) {
                onprop(obj, key, prop, value);
            }
        }
    });

    return obj;
};



exports.collapse = function collapse(src, dest, key) {

    dest = dest || {};
    key = key || '';

    Object.keys(src).forEach(function (prop) {
        var value, ns;

        value = src[prop];
        ns = key + prop;

        if (value !== null && !Array.isArray(value)) {
            if (typeof value === 'object') {
                collapse(value, dest, ns + '.');
            } else if (value !== undefined) {
                dest[ns] = value;
            }
        }
    });

    return dest;

};


exports.unpack = function unpack(obj) {

    var dest = {};

    Object.keys(obj).forEach(function (prop) {
        var value, tokens, key, node;

        value = obj[prop];
        tokens = prop.split('.');
        node = dest;

        while (tokens.length > 1) {
            key = tokens.shift();
            node = node[key] || (node[key] = {});
        }

        node[tokens.shift()] = value;
    });

    return dest;

//    var key,
//        value,
//        tokens,
//        node,
//        data = {};
//    for (key in obj) {
//        value = obj[key];
//        tokens  = key.split('.');
//        node = data;
//        for (var i = 0; i < tokens.length; i++) {
//            node[tokens[i]] = node[tokens[i]] || {};
//            if (i === tokens.length - 1) {
//                node[tokens[i]] = value;
//            }
//            node = node[tokens[i]];
//        }
//    }
//    return data;
};