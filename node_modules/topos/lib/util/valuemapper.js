'use strict';

var objutil = require('./objutil');

//topo entries which point to fixed host
var topoFixedHost = ['cal'];

exports.replace = function (obj, host) {
    if (host) {
        objutil.walk(obj, function (obj, key, prop, value) {
            //skip replacing fixed host entries
            if (topoFixedHost.indexOf(key) === -1) {
                if (prop === 'hostname' || prop === 'host' || prop === 'ip') {
                    obj[prop] = host;
                } else if (prop === 'ipport' && value.indexOf(':') !== -1) {
                    var splitValue = value.split(':');
                    if (splitValue && splitValue[1]) {
                        splitValue[1] = host;
                        value = splitValue.join(':');
                    }
                    obj[prop] = value;
                }
            }
        });
    }

    return obj;
};

exports.replaceTokens = function (obj, host, ports) {
    if (host && ports) {
        objutil.walk(obj, function (src, key, prop, value) {
            var svc,
                topoServiceName,
                prop_port = '';

            if (typeof value === 'string') {
                //some value name are abc_host_port, so first checking for _port and then _host
                if (prop === 'port' && ~value.indexOf('_port')) {
                    svc = value.substring(value.indexOf('%{') + 2, value.indexOf('_port'));
                    src[prop] = ports[svc] || src[prop];

                    // keep package name for display purpose
                    src.package = svc;
                } else if ((prop === 'hostname' || prop === 'host' || prop === 'ip') && ~value.indexOf('_host')) {
                    src[prop] = host;
                } else if (prop === 'ipport') {
                    try {
                        if (value.indexOf('%{') !== -1) {
                            topoServiceName = value.replace('%{', '').replace('}', '').split('_')[0];
                        }
                    } catch (e) {
                        console.log('warning: fail to get topo service name from ', value);
                    }

                    if (topoServiceName && ports[topoServiceName]) {
                        prop_port = ports[topoServiceName];
                    } else if (topoServiceName && ports[topoServiceName + ':parent']) {
                        topoServiceName = ports[topoServiceName + ':parent'];
                        prop_port = ports[topoServiceName];
                    } else if (src.port && src.port.indexOf('%{') === -1) {
                        prop_port = src.port;
                    }

                    src[prop] = '1:' + host + ':' + prop_port;

                    // keep package name for display purpose
                    src.package = topoServiceName;
                } else if (prop === 'url') {
                    try {
                        if (value.indexOf('%{') !== -1) {
                            topoServiceName = value.replace('%{', '').replace('}', '');
                        }
                    } catch (e) {
                        console.log('warning: fail to get topo service name from ', value);
                    }

                    if (topoServiceName && ports[topoServiceName]) {
                        prop_port = ports[topoServiceName];
                    }
                    src[prop] = prop_port;
                    src.package = topoServiceName;
                }
            }
        });
    }

    return obj;
};
