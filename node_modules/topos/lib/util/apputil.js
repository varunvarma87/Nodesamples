'use strict';

var fs = require('fs'),
    path = require('path');


function getDirectories(dir) {
    return fs.readdirSync(dir).filter(function (file) {
        if (file.charAt(0) === '.') {
            return false;
        }

        var childDir = path.join(dir, file);
        return fs.statSync(childDir).isDirectory();
    });
}

exports.scanDependencies = function scan(dir, isRoot, ondep) {
    var pkg, descriptor, dependencies = [], node_modules;


    dir = dir || process.cwd();
    pkg = path.join(dir, 'package.json');
    node_modules = path.join(dir, 'node_modules');
    //Scan only if a node module - package.json should exist.
    if (fs.existsSync(pkg)) {
        ondep(descriptor = require(pkg), dir);
        // Find next level layouts only if the "node_modules" dir exist.
        if (fs.existsSync(node_modules)) {
            if (isRoot) {
                //For Application root level scan everything.
                dependencies = getDirectories(node_modules);
            } else {
                // scan all "dependencies", "optionalDependencies", and "peerDependencies" from package.json
                dependencies = dependencies.concat(Object.keys(descriptor.dependencies || {}));
                dependencies = dependencies.concat(Object.keys(descriptor.optionalDependencies || {}));
                dependencies = dependencies.concat(Object.keys(descriptor.peerDependencies || {}));
            }
            //Iterate over node_modules
            dependencies.forEach(function (name) {
                var module = path.join(node_modules, name);
                if (fs.existsSync(module)) {
                    scan(module, false, ondep);
                }
            });
        }
    }
};

exports.normalizeIPPORT = function normalizeIPPORT(data) {
    var results = [];
    var ipport, ipportHP;

    //Level 1 of data in App
    for (var appProp in data) {
        var appTopo = data[appProp];
        if (typeof appTopo === 'object') {
            if (appTopo.ipport) {
                ipport = appTopo.ipport;
                if (ipport.indexOf('^') !== -1) {
                    ipport = ipport.split('^')[0];
                }
                ipportHP = ipport.split(':');
                appTopo.hostname = ipportHP[1];
                appTopo.host = appTopo.hostname;    //for backward compatibility
                appTopo.port = +ipportHP[2];
            }
            else {
                normalizeIPPORT(appTopo);
            }
        }
    }

    return results;
};
