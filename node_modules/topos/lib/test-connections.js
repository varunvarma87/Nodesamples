#!/usr/bin/env node

'use strict';

var connectionTester = require('connection-tester'),
    Table = require('easy-table'),
    colors = require('colors'),
    url = require('url');

function extractHostPort(results, appTopo, topoProp) {
    var endPoint =  appTopo[topoProp],
        connUrl,
        ipport,
        ipportHP,
        defaultPort,
        testOutput,
        contest = {
            service: topoProp
        };
    if (typeof endPoint === 'object') {
        ipport = endPoint.ipport;
        connUrl = endPoint.url;
        if (ipport) {
            if (ipport.indexOf('^') !== -1) {
                ipport = ipport.split('^')[0];
            }
            ipportHP = ipport.split(':');
            contest.host = ipportHP[1];
            contest.port = ipportHP[2];
        }
        else if (connUrl) {
            connUrl = url.parse(connUrl);
            defaultPort = (connUrl.protocol.indexOf('https') !== -1) ? 443 : 80;

            contest.host = connUrl.hostname;
            contest.port = +connUrl.port || defaultPort;
        }
        else {
            contest.host = endPoint.hostname || endPoint.host || endPoint.ip;
            contest.port = endPoint.port;
        }
        if (contest.host || contest.port) {
            testOutput = connectionTester.test(contest.host, contest.port);
            contest.package = endPoint.package || '';
            contest.success = testOutput.success === true ? 'âˆš'.green : 'X'.red;
            contest.error = testOutput.error ? colors.red(testOutput.error) : '';
            results.push(contest);
        }
    }
}

exports = module.exports = {
    test: function TestConnections(data) {

        var results = [];

        //Level 1 of data in App
        for (var appProp in data) {
            var appTopo = data[appProp];
            if (typeof appTopo === 'object') {
                if (appTopo.host || appTopo.port || appTopo.ipport || appTopo.url) {
                    extractHostPort(results, data, appProp);
                } else {
                    for (var topoProp in appTopo) {
                        extractHostPort(results, appTopo, topoProp);
                    }
                }
            }
        }

        return results;
    },

    print: function Print(results) {
        var t = new Table();

        results.forEach(function (contest) {
            t.cell('     ', '     ');
            t.cell('service', contest.service);
            t.cell('package', contest.package);
            t.cell('host', contest.host);
            t.cell('port', contest.port);
            t.cell('status', contest.success);
            t.cell('reason', contest.error);
            t.newRow();
        });

        console.log();
        console.log('\t\t', 'TOPO Connection Validator'.grey.underline);
        console.log(t.toString());
        console.log();
    }
};
