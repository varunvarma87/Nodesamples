'use strict';

var fs = require('fs'),
    properties = require('properties'),
    biblio = require('./bibliography'),
    validurl = require('valid-url');

var TODO_ID = 'undefined';

function parseTopo(body, stageEnv, stage2Env) {
    var topos, spec;

    topos = {};

    spec = properties.parse(body, { separators: ['='] });

    Object.keys(spec).forEach(function (prop) {
        var tokens, service, typeIdentifier, value, valueHD;

        tokens = prop.split('.');
        if (tokens.length >= 2) {

            service = tokens[0];
            typeIdentifier = tokens[1];
            value = String(spec[prop] || '');

            if (typeIdentifier === 'IS_REALIZED_AS') {
                if (value && value.indexOf(',') !== -1) {
                    value = value.split(',')[0];
                }
                topos[service] = stageEnv[value + '.PORT_SUFFIX'];

            }
            else if (topos[service] && topos[service] === TODO_ID && typeIdentifier === 'HOST_ADDRESS') {
                valueHD = '' + stage2Env['ADDR.' + value];
                if (valueHD && validurl.isUri(valueHD) && valueHD.indexOf('${ip}') === -1) {
                    topos[value] = valueHD;
                }
                else {
                    delete topos[service];
                }
            }
            else if (typeIdentifier === 'ADDRESS_TYPE' && value === 'explicit-host') {
                topos[service] = TODO_ID;
            }
            else if (typeIdentifier === 'ADDRESS_TYPE') {
                topos[service] = stageEnv[service + '.PORT_SUFFIX'];
            }
        }
    });

    return topos;
}


function parseStageEnv(body) {
    var stageports;

    stageports = properties.parse(body, { separators: ['='] });

    return stageports;
}


function savePortsJSON(ports) {
    var dataStr = JSON.stringify(ports, null, 4);
    fs.writeFileSync(biblio.file.topo.ports, dataStr, 'utf8');
}


function loadPortsJSON() {
    var file = fs.readFileSync(biblio.file.topo.ports, 'utf8');
    return JSON.parse(file);
}


module.exports = {

    loadPorts: function () {
        return loadPortsJSON();
    },

    parsePorts: function (config) {
        var topos, stageEnv, stage2Env;

        if (fs.existsSync(biblio.file.topo.stageEnv)) {
            stageEnv = parseStageEnv(fs.readFileSync(biblio.file.topo.stageEnv, 'utf8'));
        }

        if (fs.existsSync(biblio.file.topo.stage2Env)) {
            stage2Env = parseStageEnv(fs.readFileSync(biblio.file.topo.stage2Env, 'utf8'));
        }

        if (fs.existsSync(biblio.file.topo.main) && stageEnv) {
            topos = parseTopo(fs.readFileSync(biblio.file.topo.main, 'utf8'), stageEnv, stage2Env);
        }


        if (!topos && !stageEnv) {
            console.error('topo or stage.env file missing, run npm install again to cache them');
            return;
        }

        savePortsJSON(topos);

    }

};