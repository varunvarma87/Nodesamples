/*global describe:false, before:false, after:false, it:false*/
'use strict';

var path = require('path'),
    fs = require('fs'),
    assert = require('assert'),
    biblio,
    shelljs = require('shelljs'),
    serviceConf;


describe('New Service Configurator', function () {

    var cwd, root;

    before(function () {
        this.timeout(10000);
        cwd = process.cwd();
        root = path.join(cwd, 'test', 'fixtures', 'myapp');
        process.chdir(root);
        console.log('Changed working dir to -->', process.cwd());
        // DONOT MOVE the below code . Defining this After changing cwd to fixtures.
        serviceConf = require('../lib/service-configurator');
        biblio = require('../lib/bibliography');
        console.log("Executing service configurator");
        serviceConf("nodejstestweb");
    });


    after(function (done) {
        process.chdir(root);
        biblio = require('../lib/bibliography');
        console.log("Deleting the cdbs dir ", biblio.dir.cdbs);
        console.log("Deleting the manifest file ", biblio.file.manifest);
        shelljs.rm("-f", biblio.file.manifest);
        shelljs.rm("-rf", biblio.dir.cdbs);

        process.chdir(cwd);
        done();
    });


    describe('Service Configurator', function () {

        it('Should generate the service manifest yaml', function (next) {

            assert.ok(fs.existsSync(biblio.file.manifest));
            //TODO
            // Test the contents of the yaml file.

            next();
        });

        it('Should generate the layout file template', function (next) {

            assert.ok(fs.existsSync(biblio.file.layouttemplate));
            var template = require(biblio.file.layouttemplate);

            console.log("Layout Template", template);
            //Test Module A
            assert.equal(template.services.servicebridge.hostname, '{{asfdispatchbridgespartaweb.host}}');
            assert.equal(template.services.servicebridge.port, '{{asfdispatchbridgespartaweb.port}}');

            //Test Module B
            assert.equal(template.services.trackingeventrestserv.host, '{{trackingeventrestserv.host}}');
            assert.equal(template.services.trackingeventrestserv.port, '{{trackingeventrestserv.port}}');

            //Test Module C
            assert.equal(template.services.walletfiserv.hostname, '{{walletfiserv.host}}');
            assert.equal(template.services.walletfiserv.port, '{{walletfiserv.port}}');

            //Test Module D
            assert.equal(template.cal.host, '{{cal_host.host}}');
            assert.equal(template.cal.port, '{{cal_host.port}}');

            //Test Module E
            assert.equal(template.mayfly.ipport, '{{mayfly_session|netstring}}');


            //Test Module F
            assert.equal(template.abcdef.abc.host, '{{abcserv.host}}');
            assert.equal(template.abcdef.abc.port, '{{abcserv.port}}');

            assert.equal(template.services.wellsfargo_client.url, '{{wellsfargo_main_url.host}}');

            //Test Module W
            assert.equal(template.foo.bar.foobar.barfoo.host, '{{foobarserv.host}}');
            assert.equal(template.foo.bar.foobar.barfoo.port, '{{foobarserv.port}}');

            // Test for application Level layout.json
            assert.equal(template.services.mobilemerchantserv.hostname, '{{mobilemerchantserv.host}}');
            assert.equal(template.services.mobilemerchantserv.port, '{{mobilemerchantserv.port}}');

            assert.equal(template.services.mobile2merchantserv.hostname, '{{mobile2merchantserv.host}}');
            assert.equal(template.services.mobile2merchantserv.port, '{{mobile2merchantserv.port}}');

            //Bind Port and Health Port
            assert.equal(template.services.nodejstestweb.bindport, '{{bind_port}}');
            assert.equal(template.services.nodejstestweb.healthport, '{{health_bind_port}}');
            // Mongo Connections
            assert.equal(template.services['mongo-abcDB'].hostname, '{{mongo_abcDB.host}}');
            assert.equal(template.services['mongo-defDB'].ipport, '{{mongo_defDB|netstring}}');

            assert.equal(template.services['mongo-hijDB'].hostname, '{{mongo_hijDB.host}}');
            assert.equal(template.services['mongo-hijDB'].port, '{{mongo_hijDB.port}}');
            //Second level layouts
            assert.equal(template.services.moduleAA.hostname, '{{moduleAA.host}}');
            assert.equal(template.services.moduleAA.port, '{{moduleAA.port}}');

            next();
        });


    });





});

