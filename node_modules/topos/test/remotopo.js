/*global describe: false, it: false, before: false, after: false*/
'use strict';

var fs = require('fs'),
    url = require('url'),
    path = require('path'),
    assert = require('chai').assert,
    biblio = require('../lib/bibliography'),
    remotopo = require('../lib/remotopo');


describe('remotopo', function () {

    describe('load', function () {

        after(function (done) {
            fs.unlinkSync(biblio.file.topo.main);
            fs.unlinkSync(biblio.file.topo.stageEnv);
            fs.unlinkSync(biblio.file.topo.stage2Env);
            fs.unlinkSync(biblio.file.topo.ports);
            done();
        });


        it('should load files and parse ports', function (next) {
            this.timeout(8000);
            remotopo.load(function (err) {
                assert.ok(!err);
                assert.isTrue(fs.existsSync(biblio.file.topo.main), 'topo.main does not exist');
                assert.isTrue(fs.existsSync(biblio.file.topo.stageEnv), 'stage.env does not exist');
                assert.isTrue(fs.existsSync(biblio.file.topo.stage2Env), 'stage2.env does not exist');
                assert.isTrue(fs.existsSync(biblio.file.topo.ports), 'ports.json does not exist');
                next();
            });
        });


        it('should output valid json', function (next) {
            fs.readFile(biblio.file.topo.ports, function (err, data) {
                assert.ok(!err);
                assert.isObject(JSON.parse(data));
                next();
            });
        });

    });

});