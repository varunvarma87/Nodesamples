/*global describe:false, before:false, after:false, it:false*/
'use strict';

var path = require('path'),
    fs = require('fs-extra'),
    assert = require('assert'),
    nconf = require('nconf'),
    preLayoutToCDB = require('../lib/preLayoutToCDB'),
    postLayoutToCDB = require('../lib/postLayoutToCDB'),
    configLoader = require('../lib/config-loader'),
    topos = require('../index'),
    biblio = require('../lib/bibliography'),
    remotopo = require('../lib/remotopo');

var aggregate = require('../lib/layout-aggregator');

nconf.argv().env();

var root = path.join(process.cwd(), 'test', 'fixtures');
var cleanupFiles = true;

describe('topos test suite', function () {

    var cwd, root;

    before(function (next) {
        this.timeout(8000);
        cwd = process.cwd();
        root = path.join(cwd, 'test', 'fixtures');
        process.chdir(root);

        // aggregate all layout.JSON
        aggregate();

        nconf.file('app-development.json', path.join(root, 'config', 'app-development.json'));
        nconf.file('middleware-development.json', path.join(root, 'config', 'middleware-development.json'));
        nconf.file('app.json', path.join(root, 'config', 'app.json'));
        nconf.file('middleware.json', path.join(root, 'config', 'middleware.json'));
        next();
    });


    after(function (done) {
        if (cleanupFiles) {
            fs.remove(biblio.dir.cdbs, function () {
                process.chdir(cwd);
                done();
            });
        } else {
            done();
        }
    });


    describe('topo', function () {

        before(function (next) {
            this.timeout(8000);
            remotopo.load(function () {
                topos.init(nconf.get('topos'), nconf);
                next();
            });
        });


        it('should read values', function (next) {
            assert.ok(!nconf.get('mayfly:port'));
            assert.ok(nconf.get('sample:mayfly:ipport') === '1:msmaster.qa.paypal.com:10368');
            assert.ok(nconf.get('sample:mayfly:host') === 'msmaster.qa.paypal.com');
            assert.ok(nconf.get('sample:mayfly:port') === 10368);
            assert.ok(nconf.get('sample:walletfiserv:port') === 12300);   //case with 00 suffix
            assert.ok(nconf.get('sample:accountmanagementserv:port') === 10208);  //case with 0X suffix
            assert.ok(nconf.get('sample:cal:port') === 1118);
            assert.ok(nconf.get('sample:cal:host') === 'msmaster.qa.paypal.com');
            assert.ok(nconf.get('sample:walletsendmoneyservice:ipport') === '1:msmaster.qa.paypal.com:12450');
            assert.ok(nconf.get('sample:walletsendmoneyservice:port') === 12450);
            assert.ok(nconf.get('sample:wellsfargo_main_url:url') === 'https://redxfer.wellsfargo.com');

            topos.connectionTest({}, nconf.get('sample'));
            next();
        });


        it('should read new format values', function (next) {
            assert.ok(nconf.get('modules'));
            assert.ok(nconf.get('modules:moduleA'));
            assert.ok(nconf.get('modules:moduleB'));
            assert.ok(nconf.get('modules:moduleA:protocol') === 'https:');
            assert.ok(nconf.get('modules:moduleA:socketTimeout') === 500);
            assert.ok(nconf.get('modules:moduleB:hostname') === '127.0.0.1');
            assert.ok(nconf.get('modules:moduleB:port') === 7);
            next();
        });

    });


    describe('Other utilities', function () {

        it('preLayoutToCDB', function (next) {
            //Setting DEPLOY_ENV as test
            process.env.DEPLOY_ENV = 'test';
            preLayoutToCDB();
            assert.ok(fs.existsSync(biblio.file.applayout));
            next();
        });

        it('postLayoutToCDB', function (next) {
            //Setting DEPLOY_ENV as test
            process.env.DEPLOY_ENV = 'test';
            fs.writeFileSync(biblio.file.apptext, fs.readFileSync(biblio.file.applayout));
            postLayoutToCDB();
            assert.ok(fs.existsSync(biblio.file.apptext));
            assert.ok(fs.existsSync(biblio.file.layout));
            next();
        });

        it('config loader - no host', function (next) {
            var data = configLoader.getStageConfigs();
            assert.ok(data.sample.mayfly.ipport === "%{mayfly-session_service}");
            next();
        });

    });


});

