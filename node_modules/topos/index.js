'use strict';

var apputil = require('./lib/util/apputil'),
    tryRequire = require('try-require'),
    nconf = tryRequire('nconf'),
    topomain = require('./lib/topomain'),
    deployEnv = require('environment-paypal'),
    configLoader = require('./lib/config-loader'),
    testConnections = require('./lib/test-connections');

/**
 * topo.init() for integration with NodeJS app
 * getDump() to get the in-memory resolved topo configs
 *
 * --- Internals ---
 * LayoutJSON aggregator will be part of npm postinstall, which will scan for all the layout.json files and aggregate
 * them to final cdbs/layout_template.json.
 *
 *  Environment specific step
 *  - For dev, use stagehost (from topo config) + layout.json + topoMain.topo + PORTMAP.topo to generate the in memory layout.json
 *  - For stage and live, run configurator library on this layout_tempate.json and generate final layout.json
 *       (and also generate the service_manifest.yml file).
 *       - Configurator takes layout_tempate.json and service_maifest.yml as input and output is layout.json
 *           layout_template.json + service_manifest.yaml -> configurator -> layout.json
 *
 * Use nconf, if available to load this layout.json as well. nconf will act as serviceLocator
 *
 **/
var LAYOUTS,
    ports;

module.exports = {

    init : function (config, confStore) {
        var data, layout, testResult;

        config = config || {};

        if (deployEnv.isDev() || deployEnv.isTest()) {
            // aggregate all layout.JSON
            layout = require('./lib/layout-aggregator')();
            data = configLoader.getDevConfigs(config, layout);

        } else if (deployEnv.isStage()) {
            data = configLoader.getStageConfigs(config);
        } else {
            data = configLoader.getConfigs();
        }

        apputil.normalizeIPPORT(data);

        if (data) {
            LAYOUTS = data;
            nconf = confStore || nconf;
            if (nconf && nconf.overrides) {
                nconf.overrides(data);
            }
        }
        return data;
    },

    connectionStatus: function (callback, data) {
        data = data || LAYOUTS;
        callback && callback(null, testConnections.test(data));
        return;
    },

    connectionTest: function (options, data) {
        if ((deployEnv.isDev() || deployEnv.isTest()) &&
            data &&
            options &&
            (!options.connectionCheck || options.connectionCheck !== 'disable')) {
            var testResult = testConnections.test(data);
            testConnections.print(testResult);
        }
    },

    getDump : function () {
        return LAYOUTS;
    },

    /**
     * Only for testing
     */
    getAllEndPoints: function () {
        if (!ports) {
            ports = topomain.loadPorts();
        }
        return ports;
    },

    /**
     * Only for testing
     */
    getPort: function (serviceName) {
        if (!ports) {
            ports = topomain.loadPorts();
        }
        return ports && ports[serviceName];
    }

};