/*global describe:false, it:false, before:false, beforeEach:false, after:false, afterEach:false*/
'use strict';

var crypto = require('../lib/CryptoWrapper'),
    servicecore = require('servicecore'),
    vault = require('vault'),
    path = require('path'),
    nconf = require('nconf'),
    assert = require('assert');

servicecore.register('crypto-paypal', crypto);

nconf.file({ file: './test/config.json' });

describe("Testing Crypto in cryptoserv through cryptoservproxy", function () {

    var ciphertext = 'AgTWRcPEfwgHoiESTUd4tfTsq.p363lRuhDwJ6Q048122lS5Y1KTLNHy2jUtFaVu6jK53RJQxXZP',
        plaintext = 'AT031200038011526501';

    before(function (next) {
        this.timeout(10000);

        process.env.SHARE_PWD = 'aardvark';

        var options = {
            dir: path.join(process.cwd(), 'node_modules', 'testkeystore')
        };

        vault.create(options, function (err, pkg) {
            nconf.set('services:servicecore:sessions', pkg.getClientSessions());

            var credentials = pkg.getClientCredentials();

            Object.getOwnPropertyNames(credentials).forEach(function (key)  {
                nconf.set('services:servicecore:' + key, credentials[key]);
            });

            servicecore.configuration = nconf.get('services');

            next();
        });
    });

    it("should public_encrypt", function (next) {
        this.timeout(5000);
        var payload = {
            plaintext: plaintext,
            key_id: 102,
            id: 1
        };
        var cryptoClient = servicecore.create('crypto-paypal');
        cryptoClient.public_encrypt(payload, function (error, result) {
            assert(!error && result.body && result.body.result);
            assert(result.body.result.operation_return_code === 0);
            assert.ok(result.body.result.response);
            assert(result.body.result.response.length === 1);
            assert(result.body.result.response[0].return_code === 0);
            assert.ok(result.body.result.response[0].ciphertext);
            next();
        });
    });

    it("should public_encrypt_ullong", function (next) {
        this.timeout(5000);
        var payload = {
            plainullong: plaintext,
            key_id: 102,
            id: 2
        };
        var cryptoClient = servicecore.create('crypto-paypal');
        cryptoClient.public_encrypt_ullong(payload, function (error, result) {
            assert(!error && result.body && result.body.result);
            assert(result.body.result.operation_return_code === 0);
            assert.ok(result.body.result.response);
            assert(result.body.result.response.length === 1);
            assert(result.body.result.response[0].return_code === 0);
            assert.ok(result.body.result.response[0].ciphertext);
            next();
        });
    });

    it("should private_decrypt", function (next) {
        this.timeout(5000);
        var payload = {
            ciphertext: ciphertext,
            key_id: 102,
            id: 3
        };
        var cryptoClient = servicecore.create('crypto-paypal');
        cryptoClient.private_decrypt(payload, function (error, result) {
            assert(!error && result.body && result.body.result);
            assert(result.body.result.operation_return_code === 0);
            assert.ok(result.body.result.response);
            assert(result.body.result.response.length === 1);
            assert(result.body.result.response[0].return_code === 0);
            assert(result.body.result.response[0].plaintext === plaintext);
            next();
        });
    });

    it("should private_decrypt_ullong", function (next) {
        this.timeout(5000);
        var payload = {
            ciphertext: ciphertext,
            key_id: 102,
            id: 4
        };
        var cryptoClient = servicecore.create('crypto-paypal');
        cryptoClient.private_decrypt_ullong(payload, function (error, result) {
            assert(!error && result.body && result.body.result);
            assert(result.body.result.operation_return_code === 0);
            assert.ok(result.body.result.response);
            assert(result.body.result.response.length === 1);
            /*assert(result.body.result.response[0].return_code === 0);
            assert.ok(result.body.result.response[0].plainullong === plaintext);*/
            next();
        });
    });

    it("should hmac_ullong", function (next) {
        this.timeout(5000);
        var payload = {
            plainullong: plaintext,
            key_id: 105,
            id: 5
        };
        var cryptoClient = servicecore.create('crypto-paypal');
        cryptoClient.hmac_ullong(payload, function (error, result) {
            assert(!error && result.body && result.body.result);
            assert(result.body.result.operation_return_code === 0);
            assert.ok(result.body.result.response);
            assert(result.body.result.response.length === 1);
            assert(result.body.result.response[0].return_code === 0);
            assert.ok(result.body.result.response[0].hmactext);
            next();
        });
    });

});