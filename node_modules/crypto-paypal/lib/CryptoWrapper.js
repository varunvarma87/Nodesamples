'use strict';

exports = module.exports = function (config, transport) {
	
    return {

		/**
		 * public_encrypt
		 * @param request
		 * @param callback
		*/
        public_encrypt: function (request, callback) {
			var publicEncryptRequest = {
				request: [
					{
						plaintext: request.plaintext,
						key_id: request.key_id,
						id: request.id
					}
				]
			};
			var payload = transport.vo('Infrastructure::PublicEncryptRequest', publicEncryptRequest);

			transport({
			    service: 'Infrastructure::CryptoServProxy',
			    operation: 'public_encrypt',
			    data: payload
			}, callback);
        },

        /**
		 * public_encrypt_ullong
		 * @param request
		 * @param callback
		*/
        public_encrypt_ullong: function (request, callback) {
			var publicEncryptUllongRequest = {
				request: [
					{
						plainullong: request.plainullong,
						key_id: request.key_id,
						id: request.id
					}
				]
			};
			var payload = transport.vo('Infrastructure::PublicEncryptUllongRequest', publicEncryptUllongRequest);

			transport({
			    service: 'Infrastructure::CryptoServProxy',
			    operation: 'public_encrypt_ullong',
			    data: payload
			}, callback);
        },

        /**
		 * private_decrypt
		 * @param request
		 * @param callback
		*/
        private_decrypt: function (request, callback) {
			var privateDecryptRequest = {
				request: [
					{
						ciphertext: request.ciphertext,
						key_id: request.key_id,
						id: request.id
					}
				]
			};
			var payload = transport.vo('Infrastructure::PrivateDecryptRequest', privateDecryptRequest);

			transport({
			    service: 'Infrastructure::CryptoServProxy',
			    operation: 'private_decrypt',
			    data: payload
			}, callback);
        },

        /**
		 * private_decrypt_ullong
		 * @param request
		 * @param callback
		*/
        private_decrypt_ullong: function (request, callback) {
			var privateDecryptUllongRequest = {
				request: [
					{
						ciphertext: request.ciphertext,
						key_id: request.key_id,
						id: request.id
					}
				]
			};
			var payload = transport.vo('Infrastructure::PrivateDecryptUllongRequest', privateDecryptUllongRequest);

			transport({
			    service: 'Infrastructure::CryptoServProxy',
			    operation: 'private_decrypt_ullong',
			    data: payload
			}, callback);
        },

        /**
		 * hmac_ullong
		 * @param request
		 * @param callback
		*/
        hmac_ullong: function (request, callback) {
			var hmacUllongRequest = {
				request: [
					{
						plainullong: request.plainullong,
						key_id: request.key_id,
						id: request.id
					}
				]
			};
			var payload = transport.vo('Infrastructure::HmacUllongRequest', hmacUllongRequest);

			transport({
			    service: 'Infrastructure::CryptoServProxy',
			    operation: 'hmac_ullong',
			    data: payload
			}, callback);
        }
    };
};