{
  "name": "ppdustjs-filters-secure",
  "version": "0.0.2",
  "author": {
    "name": "Roman Shafigullin"
  },
  "description": "Filters extension for dustjs-linkedin package",
  "contributors": [
    {
      "name": "Roman Shafigullin",
      "email": "rshafigu@linkedin.com"
    },
    {
      "name": "Jimmy Chan",
      "email": "jchan@linkedin.com"
    },
    {
      "name": "Hari Shanmuga Sundaram",
      "email": "hashanmugasundar@paypal.com"
    },
    {
      "name": "Venkat Karri",
      "email": "vkarri@paypal.com"
    },
    {
      "name": "Sakthipriyan Vairamani",
      "email": "svairamani@paypal.com"
    }
  ],
  "scripts": {
    "test": "node test/server/specRunner.js"
  },
  "main": "./lib/ppdustjs-filters-secure",
  "repository": {
    "type": "git",
    "url": "git://github.paypal.com/vkarri/ppdustjs-filters-secure.git"
  },
  "keywords": [
    "templates",
    "views",
    "helpers",
    "secure",
    "dust"
  ],
  "devDependencies": {
    "venus": "*",
    "jasmine-node": "1.0.x",
    "dustjs-linkedin": "1.1.x"
  },
  "license": "MIT",
  "engine": {
    "node": ">=0.5"
  },
  "readme": "# ppdustjs-filters-secure\r\n -----------\r\n\r\nThis module enhances the existing and adds extra secure filters to `dust` core(dustjs-linkedin) to prevent [XSS (Cross Site Scripting) attacks] (http://en.wikipedia.org/wiki/Cross-site_scripting).\r\n \r\nAccording to OWASP standard guidelines for preventing XSS attacks. All the untrusted data (dynamic content goes to outgoing HTML) should be escaped based on the context in which they are being put into the HTML.\r\n \r\n Why context based escaping is needed and HTML entitity escaping alone is not sufficient?\r\n\r\nHTML entity escaping is okay for untrusted data that you put in the body of the HTML document, such as inside a tag. It even sort of works for untrusted data that goes into attributes, particularly if you're religious about using quotes around your attributes. But HTML entity encoding doesn't work if you're putting untrusted data inside a `<script>` tag anywhere, or an event handler attribute like onmouseover, or inside CSS, or in a URL. So even if you use an HTML entity escaping method everywhere, you are still most likely vulnerable to XSS. You MUST use the escape syntax for the part of the HTML document you're putting untrusted data into.\r\n\r\n \r\n For escaping the content, please refer the below cheat sheet provided by OWASP to prevent XSS attacks.\r\n https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\r\n \r\nAccording to OWASP standard guidelines all the characters except alphanumeric characters\r\n In 'dust' core functionality existing filters are performing escaping for certain characters which may not\r\n be sufficient to prevent all forms of XSS vectors. and the escaping filters for CSS context is missing and no proper filter\r\n for escaping URL paths.\r\n \r\n##### This module enhanced the below filter from 'dust' core module\r\n\r\n        1) h    :   for HTML/HTML comment data escaping.\r\n                    Few selected characters are escaped with corresponding HTML entities. HTML entities will be in format\r\n                     '&#xHH;' (HH hexadecimal equivalent of character).\r\n \r\n        2) j    :   for Javascript data escaping.\r\n                     Most of the non alphanumeric characters will be escaped in the format '\\uHHHH '  (HHHH hexadecimal equivalent\r\n                     of character).\r\n        3) uc   :   for URI Component data escaping.\r\n                        all non alphanumeric characters will be escaped in the format '%HH' (HH hexadecimal equivalent\r\n                       of character). This will enhance the dust-core filter 'uc' (encodeURIComponent) which is limited\r\n                        to escaping few characters.\r\n \r\n##### and adds extra filters to 'dust' core\r\n \r\n         1) ha   : for HTML attribute value escaping.\r\n                     all non alphanumeric characters will be escaped in the format '&#xHH;'  (HH hexadecimal equivalent of character).\r\n         2) x    : for CSS  value escaping.\r\n                    all non alphanumeric characters will be escaped in the format '\\HH '  (HH hexadecimal equivalent\r\n                of character).\r\n\r\n         3) ul   : for complete URL escaping. This filter is different from encodeURLComponent (uc) which is applicable for\r\n                HTTP URL parameter values, where as this filter will parse the complete URL and do escaping accordingly.\r\n                This filter will identify the HTTP URL parameter values and escape them with percent encoding and\r\n                escape the rest of the URL with html entities.\r\n\r\n                For Ex:\r\n                    consider URL : http://www.example.com/url_path?name1=value1&name2=value2&.....&namek=valuek\r\n                        here all the HTML URL parameter values (value1, value2, ... valuek) will be % escaped\r\n                        in the format '%HH' (HH hexadecimal equivalent of character).\r\n\r\n                        Rest of the URL will be escaped with html entities in the format '&#xHH;' (HH hexadecimal\r\n                        equivalent of character).\r\n                             Rest of the URL will be escaped with html entities in the format '&#xHH;' (HH hexadecimal\r\n                             equivalent of character).\r\n \r\n##### Filters to be used based on context :\r\n\r\n\r\n\r\n<center><table>\r\n  <tr>\r\n    <th>Context</th><th>Filter to be used</th>\r\n  </tr>\r\n  <tr>\r\n    <td>HTML/HTML Comment</td><td>h</td>\r\n  </tr>\r\n  <tr>\r\n    <td>HTML Attribute</td><td>ha</td>\r\n  </tr>\r\n  <tr>\r\n    <td>JavaScript</td><td>j</td>\r\n  </tr>\r\n  <tr>\r\n    <td>CSS</td><td>x</td>\r\n  <tr>\r\n    <td>URL</td><td>ul</td>\r\n  </tr>\r\n  <tr>\r\n    <td>URL Parameter Value</td><td>u/uc</td>\r\n  </tr>\r\n  <tr>\r\n    <td>JSON</td><td>js/jp</td>\r\n  </tr>\r\n</table></center>\r\n \r\n## Usage\r\n ------------\r\n include the ppdustjs-filters-secure.js file after including dust.js\r\n```\r\n<script src=\"script/dust-core-1.1.1.js\"></script>\r\n<script src=\"script/ppdustjs-filters-secure-0.0.1.js\"></script>\r\n```\r\nin CommonJS/AMD/node environments\r\n ```\r\n var dust = require('dustjs-linkedin');\r\n require('ppdustjs-filters-secure');\r\n```\r\n### Usage in NodeJS Applications using kraken-js\r\n\r\nNote: kraken-js requires dust helper extensions to be configured in your config/app.json file. In order to make these helpers available in your application, add a section like this to your config/app.json file.\r\n```\r\n\"view engines\": {\r\n      \"dust\": {\r\n                 \"settings\": {\r\n                      \"helpers\": [ \"ppdustjs-filters-secure\" ]\r\n                 }\r\n       },\r\n       \"js\": {\r\n                 \"settings\": {\r\n                      \"helpers\": [ \"ppdustjs-filters-secure\" ]\r\n                 }\r\n       }\r\n}\r\n\r\n```\r\nIf there are other helpers already present, just add \"ppdustjs-filters-secure\" to the array. Be sure you have a dependency on this project in your package.json also.\r\n\r\nCurrently this config is being added to application using `brogan` module with versions higher than `0.0.12` . So updating the brogan version to higher than `0.0.12` is sufficient otherwise add the above mentioned config to `config/app.json` in applications.\r\n",
  "readmeFilename": "README.md",
  "_id": "ppdustjs-filters-secure@0.0.2",
  "dist": {
    "shasum": "996df07e61aac2e7f4ef815ded5c88318e65b97d",
    "tarball": "http://npm.paypal.com/ppdustjs-filters-secure/-/ppdustjs-filters-secure-0.0.2.tgz"
  },
  "_from": "ppdustjs-filters-secure@>=0.0.2 <0.1.0",
  "_npmVersion": "1.2.18",
  "_npmUser": {
    "name": "vkarri",
    "email": "vkarri@paypal.com"
  },
  "maintainers": [
    {
      "name": "vkarri",
      "email": "vkarri@paypal.com"
    }
  ],
  "directories": {},
  "_shasum": "996df07e61aac2e7f4ef815ded5c88318e65b97d",
  "_resolved": "http://npm.paypal.com/ppdustjs-filters-secure/-/ppdustjs-filters-secure-0.0.2.tgz"
}
