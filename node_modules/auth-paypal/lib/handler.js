'use strict';

var assert = require('assert'),
    cookieutil = require('./cookies/util'),
    util = require('./utils');

exports = module.exports = createHandler;

/**
 * Creates a handler for strategy success, error, fail results.
 * @param a supplied handler.
 * @param options
 * @param req
 * @param res
 * @param next
 * @returns {Function}
 * @private
 */
function createHandler(handler, options, req, res, next) {
    assert(!handler || typeof handler === 'function', 'handler must be a function or undefined.');
    assert(typeof options.failureRedirect === 'string' || typeof options.failureRedirect === 'undefined', 'options.failureRedirect must be a string.');
    assert(typeof options.successRedirect === 'string' || typeof options.successRedirect === 'undefined', 'options.successRedirect must be a string.');

    options.session = !!options.session;

    function wrapHandler(handler) {
        return function handleStrategyResult(err, actor, info) {
            if (!info) {
                info = {};
            }

            //TODO: This goes away when we get rid of bridge login/logout.
            info['set-cookie'] && cookieutil.setCookies(req, res, info['set-cookie']);

            handler(err, actor, info);
        };
    }

    function defaultHandler(err, success, info) {
        if (err) {
            next(err);
            return;
        }
        if (!success) {
            if (options.failureRedirect) {
                return res.redirect(req.xhr ? 401 : 302, options.failureRedirect);
            }
            res.writeHead(401);
            res.end(info.message);
            return;
        }

        util.riskCheck(req, function (errorRedirect) {
            if (errorRedirect) {
                //If there is any RISK flag, redirect to the errorRedirect
                res.redirect(errorRedirect);
                return;
            }
            if (options.successRedirect) {
                res.redirect(options.successRedirect);
                return;
            }

            //If there is no success redirect, assume we want to render something here.
            next();
        });

    }

    return wrapHandler(handler || defaultHandler);
}
