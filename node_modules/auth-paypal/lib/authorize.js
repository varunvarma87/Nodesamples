'use strict';

var passport = require('passport'),
    createHandler = require('./handler'),
    Strategy = passport.Strategy,
    StrategyNames = require('./strategyNames'),
    utils = require('./utils'),
    debug = require('debuglog')('ppauth');

function PaypalAuthorization() {
    PaypalAuthorization.super_.apply(this, arguments);
    this.name = StrategyNames.AUTHORIZE;
}

require('util').inherits(PaypalAuthorization, Strategy);

passport.use(StrategyNames.AUTHORIZE, new PaypalAuthorization());

PaypalAuthorization.prototype.authenticate = function (req, options) {
    var self, session, securityContext, account_number;

    if (!req._passport) {
        return this.error(new Error('passport.initialize() middleware not in use'));
    }

    self = this;
    session = req.session;
    securityContext = req.securityContext;

    if (securityContext) {

        //Logged in
        if (securityContext.actor.auth_state === 'LOGGEDIN') {

            debug('Auth State: %s', securityContext.actor.auth_state);

            //If a session exists, determine if we need to invalidate old session.
            if (session) {
                account_number = session._account_number;

                //If the users are different, regenerate the session.
                if (account_number && account_number !== securityContext.actor.account_number) {
                    debug('Account number session mismatch.');
                    return utils.regenerateSession(req, function () {
                        //Use the new session
                        session = req.session;
                        session._account_number = securityContext.actor.account_number;
                        self.success(securityContext.actor);
                    });
                }

                session._account_number = securityContext.actor.account_number;
            }

            //Fall through success.
            self.success(securityContext.actor);

            return;
        }

    }

    if (session && session._account_number) {
        utils.regenerateSession(req, function () {
            session = req.session;
            self.fail();
        });
        return;
    }

    this.fail();
};

/**
 * Convenience method for calling the authorize strategy's authenticate method.
 * @param options for passport strategies
 * @param customHandler to use instead of default handler.
 */
function authorize(options, customHandler) {
    if (typeof options === 'function') {
        customHandler = options;
        options = {};
    }
    if (!options) {
        options = {};
    }

    return function authorizeStrategy(req, res, next) {
        var handler = createHandler(customHandler, options, req, res, next);

        res.header('Cache-Control', 'no-cache, private, no-store, must-revalidate, max-stale=0, post-check=0, pre-check=0');

        debug('Calling authorize:');

        passport.authenticate(StrategyNames.AUTHORIZE, options, handler).apply(passport, arguments);
    };
}

module.exports = authorize;
module.exports.Strategy = PaypalAuthorization;
