'use strict';

var passport = require('passport'),
    createHandler = require('./handler'),
    Strategy = passport.Strategy,
    servicecore = require('servicecore'),
    tokenservice = require('tokenservice-paypal'),
    StrategyNames = require('./strategyNames'),
    utils = require('./utils'),
    cookieutil = require('./cookies/util'),
    debug = require('debuglog')('ppauth');

function PaypalLogout() {
    PaypalLogout.super_.apply(this, arguments);
    this.name = StrategyNames.LOGOUT;
    servicecore.register('tokenservice-paypal', tokenservice);
    this._tokenservice = servicecore.create('tokenservice-paypal');
}

require('util').inherits(PaypalLogout, Strategy);

passport.use(StrategyNames.LOGOUT, new PaypalLogout());

/**
 * Implementation of logout strategy.
 * @param req
 * @param options
 * @param forceLogout used when performing a logout that doesn't perform passport handling (success, error, etc).
 * @returns {*}
 */
PaypalLogout.prototype.authenticate = function (req, options) {
    var self;

    self = this;

    if (!req.securityContext || req.securityContext.actor.auth_state !== 'LOGGEDIN') {
        return self.success(req.securityContext && req.securityContext.actor);
    }

    var headers = {
        Cookie: req.headers.cookie,
        PP_REMOTE_ADDR: req.ip
    },
    logoutRequest = {};

    if (options.postLoginAuthorizationUris) {
        logoutRequest.postLoginAuthorizationUris = options.postLoginAuthorizationUris;
    }

    debug('Calling logout:');

    this._tokenservice.logout(logoutRequest, headers, function (error, result) {
        var actor = {
            id: req.securityContext.actor.id,
            party_id: req.securityContext.actor.party_id,
            account_number: req.securityContext.actor.account_number,
            auth_state: 'ANONYMOUS',
            auth_claims: undefined
        };

        //Reset SecurityContext
        req.securityContext = {
            actor: actor,
            subjects: [
                {
                    subject: actor
                }
            ],
            auth_token: undefined,
            auth_token_type: 'SESSION_TOKEN',
            global_session_id: req.securityContext.actor.actor_session_id,
            last_validated: req.securityContext.last_validated
        };

        if (error) {
            debug('Error: %s.', error.message);
            utils.regenerateSession(req, self.error.bind(self, error));
            return;
        }

        if (result.statusCode === 200) {
            debug('Logged out.');
            utils.regenerateSession(req, self.success.bind(self, actor, {'set-cookie': result.headers['set-cookie']}));
            return;
        }

        if (result.statusCode >= 400) {
            debug('Error.');
            utils.regenerateSession(req, self.error.bind(self, result.body.localizedMessage || result.body.message));
            return;
        }

        debug('Unknown error. Status code: %d.', result.statusCode);
        utils.regenerateSession(req, self.error.bind(self, result.body || 'Unknown Error'));
        return;
    });
};

/**
 * Convenience method for calling the logout strategy's authenticate method.
 * @param options for passport strategies
 * @param customHandler to use instead of default handler.
 */
function logout(options, customHandler) {
    if (typeof options === 'function') {
        customHandler = options;
        options = {};
    }
    if (!options) {
        options = {};
    }

    return function logoutStrategy(req, res, next) {
        var handler;

        //Don't attempt logout if there is no cookie to begin with, but clear session.
        if (!cookieutil.userSessionCookie(req)) {
            return utils.regenerateSession(req, options.successRedirect ? res.redirect.bind(res, options.successRedirect) : next.bind(req));
        }

        handler = createHandler(customHandler, options, req, res, next);

        debug('Calling logout:');

        passport.authenticate(StrategyNames.LOGOUT, options, handler).apply(passport, arguments);
    };
}

module.exports = logout;
module.exports.Strategy = PaypalLogout;
