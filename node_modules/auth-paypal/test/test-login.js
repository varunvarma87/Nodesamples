'use strict';

var assert = require('chai').assert,
    servicecore = require('servicecore'),
    login = require('../lib/login'),
    nock = require('nock'),
    passport = require('passport'),
    MockRequest = require('./fixtures/mockRequest'),
    MockResponse = require('./fixtures/mockResponse'),
    MockLegacyContext = require('./fixtures/mockLegacyContext');

describe('login', function () {
    var req, res, loggedIn;

    before(function (next) {
        servicecore.configuration = {
            'servicecore': {
                //Use IP here since servicecore does DNS resolve and the IPs need not be the same always
                hostname: '173.0.88.98'
            },
            'tokenservice-paypal': {
                transport: 'bridge'
            },
            'userread-paypal': {
                transport: 'asf'
            }
        }

        passport.use(new login.Strategy());

        next();
    });

    beforeEach(function (next) {

        nock('https://173.0.88.98')
        .post('/load_user_data')
        .reply(200, function () {
            return {
                result: {
                    loginId: '123456',
                    accountNumber: '123456789000000',
                    firstName: 'Test',
                    lastName: 'Case',
                    encryptedAccountNumber: 'ABCDEFGHIJKLMNOP',
                    email: 'test@paypal.com'
                }
            };
        });

        nock('https://173.0.88.98')
        .post('/load_by_account')
        .reply(200, function () {
            return {
                result: {}
            };
        });

        nock('https://173.0.88.98')
        .post('/webapps/servicebridge/services/invoke/createtoken')
        .reply(200, function () {
            var legacyContext = MockLegacyContext();

            legacyContext.loggedIn = loggedIn;

            return legacyContext;
        });

        req = new MockRequest();

        res = new MockResponse();

        next();
    });

    it('should login', function (next) {
        req.body = {
            type: 1,
            username: 'test',
            password: 'password'
        };

        loggedIn = true;

        function onlogin(error, actor) {
            assert.ok(!error);
            assert.ok(actor);
            assert.strictEqual(actor.auth_state, 'LOGGEDIN');
            next();
        }

        passport.initialize()(req, res, function () {
            login(onlogin)(req, res, function (error) {
            });
        });
    });

});
