'use strict';

var assert = require('chai').assert,
    servicecore = require('servicecore'),
    passport = require('passport').initialize(),
    authorize = require('../lib/authorize'),
    nock = require('nock'),
    MockRequest = require('./fixtures/mockRequest'),
    MockResponse = require('./fixtures/mockResponse');

describe('authorization', function () {
    var req, res, securityContext;

    before(function (next) {
        servicecore.configuration = {
            'servicecore': {
                hostname: '173.0.88.98'
            },
            'userread-paypal': {
                transport: 'asf'
            }
        }

        next();
    });

    beforeEach(function (next) {

        nock('https://173.0.88.98')
        .post('/load_user_data')
        .reply(200, function () {
            return {
                result: {
                    loginId: '123456',
                    accountNumber: '123456789000000',
                    firstName: 'Test',
                    lastName: 'Case',
                    encryptedAccountNumber: 'ABCDEFGHIJKLMNOP',
                    email: 'test@paypal.com'
                }
            };
        });

        nock('https://173.0.88.98')
        .post('/load_by_account')
        .reply(200, function () {
            return {
                result: {}
            };
        });

        req = new MockRequest();

        res = new MockResponse();

        securityContext = {
            actor: {
                account_number: 123
            }
        };

        next();
    });

    it('should create', function (next) {
        assert.strictEqual(typeof authorize(), 'function');
        next();
    });

    it('should fail (no passport)', function (next) {
        var auth = authorize();

        auth(req, res, function (error) {
            assert.ok(error);
            assert.ok(/passport/.test(error.message));
            next();
        });
    });

    it('should fail (no security context)', function (next) {
        var auth = authorize(function (error, actor) {
            assert.ok(!actor);
            next();
        });

        passport(req, res, function () {
            auth(req, res);
        });
    });

    it('should fail (no security context) and regen session', function (next) {
        var auth = authorize(function (error, actor) {
            assert.ok(!actor);
            assert.ok(!req.session._account_number);
            next();
        });

        req.session._account_number = 456;

        passport(req, res, function () {
            auth(req, res);
        });
    });

    it('should fail (not logged in)', function (next) {
        var auth = authorize(function (error, actor) {
            assert.ok(!error);
            assert.ok(!actor);
            next();
        });

        req.securityContext = securityContext;

        passport(req, res, function () {
            auth(req, res);
        });
    });

    it('should pass', function (next) {
        securityContext.actor.auth_state = 'LOGGEDIN';

        var auth = authorize(function (error, actor) {
            assert.ok(!error);
            assert.ok(actor);
            next();
        });

        req.securityContext = securityContext;
        req.actorInfo = securityContext.actor;

        passport(req, res, function () {
            auth(req, res);
        });
    });

    it('should pass and regen session', function (next) {
        securityContext.actor.auth_state = 'LOGGEDIN';

        var auth = authorize(function (error, actor) {
            assert.ok(actor);
            assert.strictEqual(req.session._account_number, 123);
            next();
        });

        req.securityContext = securityContext;
        req.actorInfo = securityContext.actor;

        req.session._account_number = 456;

        passport(req, res, function () {
            auth(req, res);
        });
    });

});
