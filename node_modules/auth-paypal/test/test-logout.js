'use strict';

var assert = require('chai').assert,
    servicecore = require('servicecore'),
    logout = require('../lib/logout'),
    nock = require('nock'),
    passport = require('passport'),
    MockRequest = require('./fixtures/mockRequest'),
    MockResponse = require('./fixtures/mockResponse'),
    MockLegacyContext = require('./fixtures/mockLegacyContext'),
    utils = require('../lib/utils');

describe('logout', function () {
    var req, res, loggedIn;

    before(function (next) {
        servicecore.configuration = {
            'servicecore': {
                //Use IP here since servicecore does DNS resolve and the IPs need not be the same always
                hostname: '173.0.88.98'
            },
            'tokenservice-paypal': {
                transport: 'bridge'
            }
        }

        passport.use(new logout.Strategy());

        next();
    });

    beforeEach(function (next) {
        //Use IP here since servicecore does DNS resolve and the IPs need not be the same always
        nock('https://173.0.88.98')
        .post('/webapps/servicebridge/services/invoke/createtoken')
        .reply(200, function () {
            var legacyContext = MockLegacyContext();

            legacyContext.loggedIn = false;

            return legacyContext;
        });

        req = new MockRequest();

        req.cookies = {
            TVKbnJIgoopqCTftP3PCeQTrLnu: 'lA-8-eq-igxc68gCVrudziovdAJyfLlhA8BrilKm9opLJ6RhcE_WpDJXupNmfL2dVlt5ePId3r2sKWcucStpuWlWiOwCqrnDul5-hdoqNuNrVFNMEQ4UUJzqMukbM1mPOwIPnG'
        };

        req.headers = {

        };

        res = new MockResponse();

        utils.convertSecurityContext(MockLegacyContext(), function (error, ctx) {
            req.securityContext = ctx;
            next();
        });
    });

    it('should logout', function (next) {

        function onlogout(error, actor) {
            assert.ok(!error);
            assert.ok(actor);
            assert.strictEqual(actor.auth_state, 'ANONYMOUS');
            next();
        }

        passport.initialize()(req, res, function () {
            logout(onlogout)(req, res, function (error) {
            });
        });
    });

});
