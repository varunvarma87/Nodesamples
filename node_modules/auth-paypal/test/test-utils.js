'use strict';

var assert = require('chai').assert,
    utils = require('../lib/utils'),
    MockRequest = require('./fixtures/mockRequest'),
    MockLegacyContext = require('./fixtures/mockLegacyContext');

describe('session', function () {

    it('should keep csrf secret', function () {
        var req = new MockRequest();

        req.session._csrfSecret = 'abcd';

        utils.regenerateSession(req, function () {
            assert.strictEqual(req.session._csrfSecret, 'abcd');
        });
    });

    it('should convert to new security context', function () {
        utils.convertSecurityContext(MockLegacyContext(), function (error, ctx, token) {
            assert.ok(!error);
            assert.ok(ctx);
            assert.ok(token);
            assert.strictEqual(ctx.actor.party_id, '1731511286119924231');
            assert.strictEqual(ctx.actor.account_number, '1731511286119924231');
            assert.strictEqual(ctx.actor.auth_state, 'LOGGEDIN');
            assert.ok(ctx.actor.auth_claims);
            assert.strictEqual(ctx.actor.auth_claims[0], 'USERNAME');
            assert.strictEqual(ctx.actor.auth_claims[1], 'PASSWORD');
            assert.strictEqual(ctx.auth_token_type, 'SESSION_TOKEN');
            assert.ok(ctx.scopes);
            assert.strictEqual(ctx.scopes[0], '*');
            assert.strictEqual(ctx.last_validated, 1408628829);
        });
    });

});
