'use strict';

var utils = require('./utils'),
    xml2js = require('xml2js');

/**
 * @see https://dev.paypal.com/wiki/Sparta/LoginSessionCookie
 * @param defaults
 * @constructor
 */
function AuthToken(defaults) {
    if (!defaults) {
        defaults = {};
    }

    this.account_number = defaults.account_number && String(defaults.account_number);
    this.is_primary_login = !!defaults.is_primary_login;
    this.password_needs_validate = !!defaults.password_needs_validate;
    this.auth_type = defaults.auth_type && Number(defaults.auth_type);
    this.login_id = defaults.login_id && String(defaults.login_id);
    this.session_number = defaults.session_number && Number(defaults.session_number);
    this.session_time = defaults.session_time && Number(defaults.session_time);
    this.session_id = defaults.session_id && String(defaults.session_id);
}

/**
 * Wraps the auth token in OpenJSON and base64 encodes it for transport.
 * @param data
 * @param format
 * @returns {*}
 */
AuthToken.serialize = function (token, format) {
    //FAT
    if (format === 1) {
        token._type = 'User::UserAuthTokenVO';
        return utils.base64encode(JSON.stringify(token));
    }

    //SLIM
    return utils.base64encode(token);
};

/**
 * Return token is always XML serialized and base64 encoded. This unwraps it.
 * @param serialized
 * @param callback
 */
AuthToken.deserialize = function (serialized, callback) {
    var token;

    //XML encoded - FAT
    if (serialized.substr(0, 4) === 'PD94') {
        xml2js.parseString(utils.base64decode(serialized), function (error, result) {
            if (error) {
                callback(error);
                return;
            }

            result = result.User_UserAuthTokenVO;
            delete result.$;

            token = {};

            Object.keys(result).forEach(function (key) {
                token[key] = result[key][0]._;
            });

            callback(null, new AuthToken(token));
        });

        return;
    }

    //SLIM
    callback(null, utils.base64decode(serialized));
};

/**
 * Create a new AuthToken from a legacy struct.
 * @param struct
 */
AuthToken.fromLegacyStruct = function (struct) {
    return new AuthToken({
        account_number: struct.accountNumber,
        login_id: struct.passwordId,
        session_number: struct.sessionNumber,
        session_time: struct.sessionTime,
        auth_type: struct.authType,
        is_primary_login: struct.isPrimaryLogin,
        password_needs_validate: struct.passwordNeedsValidate
    });
};

module.exports = AuthToken;
