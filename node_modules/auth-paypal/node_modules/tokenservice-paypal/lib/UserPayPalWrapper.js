'use strict';

exports = module.exports = function (config, transport) {

    return {

        /**
         * loginWithClaims
         * @param headers
         * @param callback
        */
        getAuthenticationToken: function (headers, callback) {
            transport({
                service: 'authtoken',
                operation: 'getAuthenticationToken',
                headers: headers
            }, callback);
        },

        /**
         * login
         * @param request
         * @param headers
         * @param callback
         */
        login: function (request, headers, callback) {
            var loginRequest = {};
            if (request.type === "0") {
                loginRequest = {
                    username: request.userName,
                    password: request.password,
                    actorInfoVO : request.actorInfoVO,
                    postLoginAuthorizationUris: request.postLoginAuthorizationUris
                };
            } else if (request.type === "1") {
                loginRequest = {
                    phone: request.userName,
                    pin: request.password,
                    actorInfoVO : request.actorInfoVO,
                    postLoginAuthorizationUris: request.postLoginAuthorizationUris
                };
            } else if (request.authenticationClaims) {
                loginRequest = {
                    authenticationClaims: request.authenticationClaims,
                    channel: request.channel,
                    securityNamespace: request.securityNamespace,
                    tokenType: request.tokenType,
                    actorInfoVO: request.actorInfoVO,
                    opaqueAuthVO: request.opaqueAuthVO,
                    postLoginAuthorizationUris: request.postLoginAuthorizationUris
                };
            }

            transport({
                service: (request.session_token) ? 'createtoken?session_token=' + request.session_token : 'createtoken' ,
                operation: 'invoke',
                headers: headers,
                data: loginRequest
            }, callback);
        },

        /**
         * loginWithClaims
         * @param request
         * @param headers
         * @param callback
         */
        loginWithClaims: function (request, headers, callback) {
            var loginWithClaimsRequest = {
                action: "loginWithClaims",
                authenticationClaims: request.authenticationClaims,
                actorInfoVO: request.actorInfoVO,
                postLoginAuthorizationUris: request.postLoginAuthorizationUris
            };

            transport({
                service: 'createtoken',
                operation: 'invoke',
                headers: headers,
                data: loginWithClaimsRequest
            }, callback);
        },

        /**
         * loginWithClaimsAndTokenType
         * @param request
         * @param headers
         * @param callback
         */
        loginWithClaimsAndTokenType: function (request, headers, callback) {
            var loginWithClaimsAndTokenTypeRequest = {
                action: "loginWithClaimsAndTokenType",
                authenticationClaims: request.authenticationClaims,
                actorInfoVO: request.actorInfoVO,
                channel: request.channel,
                simNameSpace: request.simNameSpace,
                opaqueAuthVO: request.opaqueAuthVO,
                tokenType: request.tokenType,
                postLoginAuthorizationUris: request.postLoginAuthorizationUris
            };

            transport({
                service: 'createtoken',
                operation: 'invoke',
                headers: headers,
                data: loginWithClaimsAndTokenTypeRequest
            }, callback);
        },

        /**
         * loginWithClaimVO
         * @param request
         * @param headers
         * @param callback
         */
        loginWithClaimVO: function (request, headers, callback) {
            var loginWithClaimVORequest = {
                action: "loginWithClaimVO",
                authenticationClaims: request.authenticationClaims,
                channel: request.channel,
                securityNamespace: request.securityNamespace,
                cookieType: request.cookieType,
                tokenType: request.tokenType,
                actorInfoVO: request.actorInfoVO,
                opaqueAuthVO: request.opaqueAuthVO,
                postLoginAuthorizationUris: request.postLoginAuthorizationUris
            };

            transport({
                service: 'createtoken',
                operation: 'invoke',
                headers: headers,
                data: loginWithClaimVORequest
            }, callback);
        },

        /**
         * loginUpgradeWithToken
         * @param request
         * @param headers
         * @param callback
         */
        loginUpgradeWithToken: function (request, headers, callback) {
            var loginUpgradeWithTokenRequest = {
                action: "loginUpgradeWithToken",
                username: request.userName,
                password: request.password,
                authenticationToken: request.authenticationToken,
                postLoginAuthorizationUris: request.postLoginAuthorizationUris
            };

            transport({
                service: 'createtoken',
                operation: 'invoke',
                headers: headers,
                data: loginUpgradeWithTokenRequest
            }, callback);
        },

        /**
         * loginUpgradeWithClaimsAndToken
         * @param request
         * @param headers
         * @param callback
         */
        loginUpgradeWithClaimsAndToken: function (request, headers, callback) {
            var loginUpgradeWithClaimsAndTokenRequest = {
                action: "loginUpgradeWithClaimsAndToken",
                authenticationClaims: request.authenticationClaims,
                authenticationToken: request.authenticationToken,
                postLoginAuthorizationUris: request.postLoginAuthorizationUris
            };

            transport({
                service: 'createtoken',
                operation: 'invoke',
                headers: headers,
                data: loginUpgradeWithClaimsAndTokenRequest
            }, callback);
        },

        /**
         * loginUpgradeWithSecurityQuestions
         * @param request
         * @param headers
         * @param callback
         */
        loginUpgradeWithSecurityQuestions: function (request, headers, callback) {
            var loginUpgradeWithSecurityQuestionsRequest = {
                action: "loginUpgradeWithSecurityQuestions",
                securityQuestions: request.securityQuestions,
                authenticationToken: request.authenticationToken,
                postLoginAuthorizationUris: request.postLoginAuthorizationUris
            };

            transport({
                service: 'createtoken',
                operation: 'invoke',
                headers: headers,
                data: loginUpgradeWithSecurityQuestionsRequest
            }, callback);
        },

        /**
         * logout
         * @param request
         * @param headers
         * @param callback
         */
        logout: function (request, headers, callback) {
            var logoutRequest = {
                action: "logout",
                postLoginAuthorizationUris: request.postLoginAuthorizationUris
            };

            transport({
                service: 'createtoken',
                operation: 'invoke',
                headers: headers,
                data: logoutRequest
            }, callback);
        },

        /**
         * authenticate
         * @param request
         * @param headers
         * @param callback
         */
        authenticate: function (request, headers, callback) {
            var authenticateRequest = {
                action: "authenticate",
                postLoginAuthorizationUris: request.postLoginAuthorizationUris
            };

            transport({
                service: 'createtoken',
                operation: 'invoke',
                headers: headers,
                data: authenticateRequest
            }, callback);
        },

        /**
         * createToken
         * @param request
         * @param headers
         * @param callback
         */
        createToken: function (request, headers, callback) {
            var createTokenRequest = {
                action : "createToken",
                createTokenRequest: request.createTokenRequest
            };

            transport({
                service: 'createtoken',
                operation: 'invoke',
                headers: headers,
                data: createTokenRequest
            }, callback);
        },

        /**
         * validateToken
         * @param request
         * @param headers
         * @param callback
         */
        validateToken: function (request, headers, callback) {
            var validateTokenRequest = {
                action: "validateToken",
                validateTokenRequest: request.validateTokenRequest
            };

            transport({
                service: 'createtoken',
                operation: 'invoke',
                headers: headers,
                data: validateTokenRequest
            }, callback);
        },
    };
};
