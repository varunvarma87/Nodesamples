'use strict';

var LoadUserDataModel = require('./loadUserDataModel'),
    LoadByAccountModel = require('./loadByAccountModel'),
    servicecore = require('servicecore'),
    userRead = require('userread-paypal'),
    async = require('async'),
    camelscore = require('camelscore'),
    userReadClient;

servicecore.register('userread-paypal', userRead);

exports = module.exports = {

    getUserPayPal: function getUserPayPal (actor, options, callback) {
        
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }

        if (!actor) {
            callback('Actor is required to get user', null);
            return;
        }

        userReadClient = servicecore.create('userread-paypal', { asfSchemaOverride: true });

        async.parallel([
            function(next) {
                userReadClient.load_user_data(new LoadUserDataModel(actor.actor_account_number, options), function (error, result) {
                    if (error) {
                        next(error);
                        return;
                    }
                    next(null, result.body.result);
                });
            },
            function(next) {
                userReadClient.load_by_account(new LoadByAccountModel(actor), function (error, result) {
                    if (error) {
                        next(error);
                        return;
                    }
                    next(null, result.body.result);
                });
            }
        ],
        function(error, results) {
            var loadUserDataResponse, loadByAccountResponse;

            if (error) {
                callback(error);
                return;
            }

            loadUserDataResponse = results[0];
            loadByAccountResponse = results[1];

            var account = loadUserDataResponse && loadUserDataResponse.account && loadUserDataResponse.account.length !== 0 && loadUserDataResponse.account[0],
                party = loadUserDataResponse && loadUserDataResponse.party && loadUserDataResponse.party.length !== 0 && loadUserDataResponse.party[0],
                accountVO = loadByAccountResponse && loadByAccountResponse.account,
                preferredLanguage = party && party.preferredLanguage,
                accountNumber = account && account.accountNumber,
                accountTags = account && account.tags,
                dialect = account && account.language,
                name = loadUserDataResponse && loadUserDataResponse.name && loadUserDataResponse.name.length !== 0 && loadUserDataResponse.name[0],
                email = loadUserDataResponse && loadUserDataResponse.email && loadUserDataResponse.email.length !== 0 && loadUserDataResponse.email[0],
                accountToAccountRelationshipVOs = loadUserDataResponse && loadUserDataResponse.acctAcctRel,
                accountUserGroup = 'Personal',
                accountClosed = false,
                legalLogging = loadUserDataResponse && loadUserDataResponse.legalLogging,
                youthAccount = false,
                verified = false,
                restricted = false;

            if (accountToAccountRelationshipVOs) {
                for (var i = 0; i < accountToAccountRelationshipVOs.length; i++) {
                    var curRel = accountToAccountRelationshipVOs[i];
                    if (curRel && (curRel.subjectAccount && curRel.subjectAccount === accountNumber) && (curRel.type && curRel.type === 89)) {
                        youthAccount = true;
                    }
                }
            }

            if (accountVO && accountVO.userFlags && accountVO.userFlags.length !==0 && accountVO.userFlags[0]) {
                for (var curFlag in accountVO.userFlags[0]) {
                    if (curFlag.flagGroupId === '1001' && curFlag.flagGroupValue === '0') {
                        accountClosed = true;
                    }
                }
            }

            if (account && account.type && ('PREMIER').indexOf(account.type) > -1) {
                accountUserGroup = 'Premier';
            } else if (account && account.type && ('BUSINESS').indexOf(account.type) > -1) {
                accountUserGroup = 'Business';
            }

            if (accountTags && accountTags.length > 1) {
                for (var j = 0; j < accountTags.length; j++) {
                    var currTag = accountTags[j];
                    if (currTag && currTag === 'VERIFIED') {
                        verified = true;
                    } else if (currTag && currTag === 'RESTRICTED') {
                        restricted = true;
                    }
                }
            }

            var userPayPal = {
                password: '********',
                username: email && email.email,
                authorities: [],
                accountNonExpired: true,
                accountNonLocked: true,
                credentialsNonExpired: true,
                enabled: accountVO && accountVO.status === 'OPEN',
                loginId: loadByAccountResponse && loadByAccountResponse.logins && loadByAccountResponse.logins.length !== 0 && loadByAccountResponse.logins[0] && loadByAccountResponse.logins[0].id,
                accountNumber: accountNumber,
                country: account && account.legalCountry,
                dialect: dialect ? dialect : preferredLanguage,
                timeZone: party && party.timezone ? party.timezone : account && account.timezone,
                userFlags: accountVO && accountVO.userFlags,
                verified: verified,
                restricted: restricted,
                legalEntity: account && account.legalEntity ? account.legalEntity : '',
                actorInfoVO: actor,
                loginVO: loadByAccountResponse && loadByAccountResponse.logins && loadByAccountResponse.logins.length !== 0 && loadByAccountResponse.logins[0],
                aliasVO: loadByAccountResponse && loadByAccountResponse.aliases && loadByAccountResponse.aliases.length !== 0 && loadByAccountResponse.aliases[0],
                oldAccountVO: accountVO,
                accountVO: accountVO,
                loadUserDataResponse: loadUserDataResponse,
                calledLoadByAccount: true,
                loadByAccountLock: {},
                oldUserReadServiceClass: '',
                adminId: '',
                firstName: name && name.firstName,
                lastName: name && name.lastName,
                encryptedAccountNumber: account && account.encryptedAccountNumber,
                youthAccount: youthAccount,
                accountType: account && account.type,
                userGroup: accountUserGroup,
                accountTags: accountTags,
                legalCountry: account && account.legalCountry,
                email: email && email.email,
                accountClosed: accountClosed,
                legalLogging: legalLogging
            };

            //Strip _type and make sure everything is camelCase.
            userPayPal = camelscore.camelize(userPayPal, function (key) {
                if (key === '_type') {
                    return undefined;
                }
                return key;
            });

            callback(null, userPayPal);
        });
    }
};
