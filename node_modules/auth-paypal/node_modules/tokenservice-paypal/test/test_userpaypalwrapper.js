/*global describe:false, it:false, before:false, beforeEach:false, after:false, afterEach:false*/
'use strict';

var userpaypal = require('../lib/UserPayPalWrapper'),
    servicecore = require('servicecore'),
    vault = require('vault'),
    path = require('path'),
    nconf = require('nconf'),
    assert = require('assert');

servicecore.register('tokenservice-paypal', userpaypal);

nconf.file({ file: './test/config.json' });

describe.skip("Testing TokenService that invokes SIM through asfdispatchbridgespartaweb", function () {

    var headers = {
        Cookie : "",
        PP_REMOTE_ADDR : "" 
    };

    before(function (next) {
        this.timeout(10000);

        process.env.SHARE_PWD = 'aardvark';

        var options = {
            dir:        path.join(process.cwd(), 'node_modules', 'testkeystore')
        };

        vault.create(options, function (err, pkg) {
            nconf.set('services:servicecore:sessions', pkg.getClientSessions());

            var credentials = pkg.getClientCredentials();

            Object.getOwnPropertyNames(credentials).forEach(function (key)  {
                nconf.set('services:servicecore:' + key, credentials[key]);
            });

            servicecore.configuration = nconf.get('services');

            next();
        });
    });

    it("invoke authtoken", function (next) {
        this.timeout(10000);
        var headers = {
            Cookie : "",
            PP_REMOTE_ADDR : ""
        };
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.getAuthenticationToken(headers, function (error, result) {
            assert(!error && result);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });

    it("invoke login given alias/password", function (next) {
        this.timeout(10000);
        var authReqAlias = {
            userName : "xlai-ec@paypal.com@paypal.com",
            password : "11111111",
            type : "0"
        };
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.login(authReqAlias, null, function (error, result) {
            assert(!error && result.body);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });

    it("invoke logout", function (next) {
        this.timeout(10000);
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.logout(headers, null, function (error, result) {
            assert(!error && result.body);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });

    it("invoke login given phone/PIN", function (next) {
        this.timeout(10000);
        var authReqPhone = {
            userName : "+1 6824856117",
            password : "1212",
            type : "1"
        };
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.login(authReqPhone, null, function (error, result) {
            assert(!error && result.body);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });

    it("invoke login given alias/password with ECONSENT", function (next) {
        this.timeout(10000);
        var authReqAliasWithEconsent = {
            userName : "xlai-ec@paypal.com",
            password : "11111111",
            type : "0",
            postLoginAuthorizationUris: "http://uri.paypal.com/Entity/Security/UnifiedLogin/Login?Action=CheckOut"
        };
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.login(authReqAliasWithEconsent, null, function (error, result) {
            assert(!error && result.body);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });

    it("invoke login given claims with ECONSENT", function (next) {
        this.timeout(5000);
        var request = {
            authenticationClaims: [
                {
                    value : "xlai-ec@paypal.com",
                    type : 0
                },
                {
                    value : "11111111",
                    type: 1
                }
            ],
            postLoginAuthorizationUris: "http://uri.paypal.com/Entity/Security/UnifiedLogin/Login?Action=CheckOut"
        };
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.login(request, null, function (error, result) {
            assert(!error && result.body);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });

    it("invoke login as guest with ECONSENT", function (next) {
        this.timeout(10000);
        var data = {
            authenticationClaims: [
                {
                    type: 5,
                    value: "xlai-guest@paypal.com"
                },
                {
                    type: 6,
                    value: "1799495985366903667"
                }
            ],
            channel: "WEB",
            securityNamespace: "WEB",
            tokenType: 0,
            actorInfoVO: {
                actorIpAddr: "127.0.0.1",
                entryPoint: "http://uri.paypal.com/Web/Web/MyTestSpartaApp"
            },
            postLoginAuthorizationUris: ["http://uri.paypal.com/Entity/Security/UnifiedLogin/Login?Action=CheckOut"]
        };
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.login(data, null, function (error, result) {
            assert(!error && result.body);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });

    it("invoke loginWithClaims", function (next) {
        this.timeout(10000);
        var authReqAlias = {
            userName : "xlai-ec@paypal.com",
            password : "11111111",
            type : "0"
        };
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.loginWithClaims(authReqAlias, null, function (error, result) {
            assert(!error && result.body);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });

    it("invoke loginWithClaimsAndTokenType", function (next) {
        this.timeout(10000);
        var authReqAlias = {
            userName : "xlai-ec@paypal.com",
            password : "11111111",
            type : "0"
        };
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.loginWithClaimsAndTokenType(authReqAlias, null, function (error, result) {
            assert(!error && result.body);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });

    it("invoke loginWithClaimVO", function (next) {
        this.timeout(10000);
        var authReqAlias = {
            userName : "xlai-ec@paypal.com",
            password : "11111111",
            type : "0"
        };
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.loginWithClaimVO(authReqAlias, null, function (error, result) {
            assert(!error && result.body);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });

    it("invoke login with email PREAUTH", function (next) {
        this.timeout(10000);
        var data = {
            authenticationClaims: [
                {
                    type: 0,
                    value: "xlai-ec@paypal.com"
                }
            ],
            channel: "WEB",
            securityNamespace: "PREAUTH",
            tokenType: 0,
            actorInfoVO: {
                actorIpAddr: "127.0.0.1",
                entryPoint: "http://uri.paypal.com/Web/Web/Checkout/XO/xoflow?flow=1-P"
            }
        };
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.login(data, null, function (error, result) {
            assert(!error && result.body);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });

    it("invoke loginUpgradeWithToken", function (next) {
        this.timeout(10000);
        var authReqAlias = {
            userName : "xlai-ec@paypal.com",
            password : "11111111"
        };
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.loginUpgradeWithToken(authReqAlias, null, function (error, result) {
            assert(!error && result.body);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });

    it("invoke loginUpgradeWithClaimsAndToken", function (next) {
        this.timeout(10000);
        var authReqAlias = {
            userName : "xlai-ec@paypal.com",
            password : "11111111"
        };
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.loginUpgradeWithClaimsAndToken(authReqAlias, null, function (error, result) {
            assert(!error && result.body);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });

    /*it("invoke loginUpgradeWithSecurityQuestions", function (next) {
        this.timeout(10000);
        var payload = {
            securityQuestions: [
                {
                    question: "Mother's Maiden Name",
                    answer: "Big Mother"
                },
                {
                    question: "Brother's Name",
                    answer: "Big Brother"
                }
            ]
        }
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.loginUpgradeWithSecurityQuestions(payload, null, function (error, result) {
            assert(!error && result.body);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });*/

    it("invoke authenticate", function (next) {
        this.timeout(10000);
        var payload = {
            authenticateRequest: {

            }
        };
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.authenticate(payload, null, function (error, result) {
            assert(!error && result.body);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });

    it("invoke createToken", function (next) {
        var payload = {
            createTokenRequest: {

            }
        };
        this.timeout(10000);
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.createToken(payload, null, function (error, result) {
            assert(!error && result.body);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });

    it("invoke validateToken", function (next) {
        this.timeout(10000);
        var payload = {
            validateTokenRequest: {

            }
        };
        var userpaypalClient = servicecore.create('tokenservice-paypal');
        userpaypalClient.validateToken(payload, null, function (error, result) {
            assert(!error && result.body);
            headers = {
                Cookie : result.headers['set-cookie'],
                PP_REMOTE_ADDR : ""
            };
            next();
        });
    });
});
