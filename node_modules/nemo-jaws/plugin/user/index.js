"use strict";

var UserClient = require("./user-client"),
	lib = require("../../lib"),
	async = require("async");
module.exports = {
	/**
	 *    setup - initialize this functionality during nemo.setup
	 *    @param config {Object} - full config object passed to nemo.setup().
	 *                                This plugin's config must be referenced with the same identifier
	 *                                used in the setup method below
	 *    @param result {Object} - result object which will eventually be passed back to the test script
	 *                                once all setup methods are complete. Namespace this plugin's
	 *                                functionality under it's identifier.
	 *    @param callback {Function} - callback to continue the setup process.
	 *                                Args are err {Error}, config {Object}, returnObj {Object}
	 */
	"setup": function (config, result, callback) {
		//console.log(config);
		var returnObj = result,
            userConfig = config.user || {},
			userClient = new UserClient();
		returnObj.user = {};
		//array for waterfall methods
		var ppuserCalls = [];
		//set up ppuser
		var ppuserConfig = lib.getConfig(returnObj);
		userClient.configure(ppuserConfig);
		returnObj.user.client = userClient;
		Object.keys(userConfig).forEach(function (key) {
			if (config.user !== {}) {
				returnObj.user.users = {};
			}

			//create a method to add to the below async.waterfall

			ppuserCalls.push(function (cbk) {
				userClient.post(config.user[key], function (err, data) {

					if (err !== null) {
						cbk(err);
					} else {
						returnObj.user.users[key] = data;
						cbk(null, data);
					}

				});
			});


		});
		async.parallel(ppuserCalls, function (err, result) {
			callback(err, config, returnObj);
		});

	}
};
