/*
* Inspired by the grunt-contrib-jshint and jshint-cli command
* 
*/
"use strict";
var path = require('path'),
    confer = require('confer'),
    shell = require('shelljs'),
    minimatch = require("minimatch"),
    JSHINT = require('jshint').JSHINT,
    checkstyle = require('jshint/src/reporters/checkstyle'),
    checkstylefile = require('./checkstyle-file'),
    jslint = require('jshint/src/reporters/jslint_xml');

module.exports = function (grunt) {
    grunt.registerMultiTask('jshint', 'Lint using JsHint', function () {
        var files = [],
            options = this.options(),
            results = [],
            data   = [],
            reporter;
        grunt.log.writeln();
		//Sync execution to resolve the path
		for (var i = 0; i < this.filesSrc.length; i++) {
			files.push(path.resolve(this.filesSrc[i]));
		}
        //JS HintRC
        if (options.jshintrc) {
            var rc = confer(options.jshintrc);
            //Merge the options from the rc file to the options from the Grunt file
            if (rc) {
                grunt.util._.defaults(options, rc);
            } 
            delete options.jshintrc;
        }
        if (!options.globals) {
            options.globals = {};
        } 
         // Extract globals from options.
        var globals = options.globals;
        delete options.globals;
        //Ignore list of files
        var ignoreList = getIgnoreList();
        if (ignoreList) {
            grunt.log.writeln("JsHint Ignore List- " + ignoreList);
            grunt.log.writeln();
        }
        //Load the Reporter
        if (!options.reporter) {
            options.reporter = 'default';
        }
        reporter = loadReporter(options.reporter);
        delete options.reporter;

        files.forEach(function (file) {
           
            if (!isIgnored(file, ignoreList)) {

                lint(grunt, file, results, options, globals, data);
            }
        });

        reporter && reporter(results, data);

        if (results.length > 0) {
            //Failt the Task if Lint error are found.
            return false;
        }

        grunt.log.ok("Successfully completed JsHint task!");

    });
};

/*
*  Get the list of files to be ignored.
*/
function getIgnoreList() {
    var file = confer.locateFile('.jshintignore');
    
    if (!file) {
        return;
    }

    return shell.cat(file).split("\n")
        .filter(function (line) {
            return !!line.trim();
        })
        .map(function (line) {
            return path.resolve(path.dirname(file), line.trim());
        });
}
/*
*  Check the file against the List of Files to be Ignored.
*/
function isIgnored(file, ignoreList) {
    if (!ignoreList) {
        return false;
    }
    
    return ignoreList.some(function (ignorePattern) {
        if (minimatch(path.resolve(file), ignorePattern, { nocase: true })) {
            return true;
        }
        if (path.resolve(file) === ignorePattern) {
            return true;
        }
       
        if (shell.test("-d", ignorePattern) && file.match(new RegExp("^" + ignorePattern + ".*"))) {
            return true;
        }
    });
}

function lint(grunt, file, results, options, globals, data) {
    var lintData,
        content = grunt.file.read(file);
   
    if (!JSHINT(content, options, globals)) {
        JSHINT.errors.forEach(function (err) {
            if (err) {
                results.push({ file: file, error: err });
            }
        });
    }

    lintData = JSHINT.data();

    if (lintData) {
        lintData.file = file;
        data.push(lintData);
    }
}

function loadReporter(repoter) {
    if (repoter === 'checkstyle-file') {
        return checkstylefile.reporter;
    } else if (repoter === 'checkstyle') {
        return checkstyle.reporter;
    } else if (repoter === 'jslint') {
        return jslint.reporter;
    }
    return defReporterFn;

}
/*
*Default Reporter
*/
function defReporterFn(res, data, opts) {
    var len = res.length;

    if (!len) {
        console.log('No lint errors');
        return;
    }
       
    res.forEach(function (result) {
        
        if (result.error) {
            console.log(result.file + ': line ' + result.error.line + ', col ' +  result.error.character + '- ' + result.error.reason);
        }
        
    });

    console.log(len + ' lint error' + (len > 1 ? 's' : ''));
}

