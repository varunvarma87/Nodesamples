'use strict';
var fs = require('fs'),
	path = require('path'),
	shell = require('shelljs');

module.exports = function (grunt) {
	/**
	* Grunt Task to Store file contents
	*/
	grunt.registerMultiTask('codecoverage', 'Task to perform code coverage using Istanbul', function () {

		var options = this.options(),
			command = require.resolve('.bin/istanbul'),
			mochRunPath = path.join(__dirname, '../lib/mochaRunner.js'),
			optFilePath = path.join(__dirname, '../lib/options.json'),
			covDir =  options.covDir || "reports",
			reportType = options.reportType || "lcov",
			printType = options.printType || "both",
			coverageOptions = options.coverageOptions || "",
			excludes = options.excludes || [],
			tmpOpt = {};// Temporory options

		grunt.log.writeln();

		//Save the options to the Local file. This will be retrived by the Mocha Runner.
		tmpOpt.files = this.filesSrc;
		tmpOpt.options = options;
		fs.writeFileSync(optFilePath, JSON.stringify(tmpOpt, null, 2));

		command = command + " cover " + coverageOptions + " " + mochRunPath + " --dir " + covDir +
			" --report " + reportType + " --print " + printType;
		excludes.forEach(function (ex) {command = command + ' -x "' + ex + '"'; } );
		grunt.log.writeln("Executing the istanbul code coverage command - " + command);
		grunt.log.writeln();
		var done = this.async();
		shell.exec(command, function(code, output){
			var withoutErrors = (code === 0);
            done(withoutErrors);
            if (withoutErrors) {
                grunt.log.writeln();
                grunt.log.ok("Successfully completed Istanbul Code Coverage!");
                grunt.log.writeln();
            } else {
				grunt.log.error("Error in executing Istanbul Code coverage. The issue may be related to the Mocha tests. Number of tests failed - " + code);
            }
            //Delete the temp options file
            fs.unlinkSync(optFilePath);
		});

	});


};
