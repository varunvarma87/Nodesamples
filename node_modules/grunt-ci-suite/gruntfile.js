'use strict';

var path = require('path'),
	nconf = require('nconf');

//Nconf Read utility function
function read(prop, isArray) {
	if (isArray) {
		return nconf.get(prop).split(',');
	}
	return  nconf.get(prop);
}

module.exports = function (grunt) {
	//Strip the color option from logging. Suitable for logging to build output.
	grunt.option('color', false);
	
	//Load properties in the order of (1) Command line  (2) Environment Variables , and (3) Json properties file
	nconf.argv()
		 .env()
		 .file({ file: 'ci-build.json'});
	
	
	var jsHintrcFile	= read('JSHINT_RC'),//The JsHintrc file location
		jsHintReporter	= read('JSHINT_REPORTER'),//The JsHint Reporter
		jshintSrc		= read('JSHINT_SRC', true),//The files to run Linting
		checkstyle		= read('CHECKSTYLE_FILE'),//The Checkstyle.xml path 
		reportDir		= read('REPORTS_DIR'),//The Reports Home directory
		testFiles		= read('TEST_FILES', true),//The files to run mocha test
		covReport		= read('REPORTS_COVERAGE'),//The Coverage Report file location 
		covType			= read('COVERAGE_TYPE'),//The Coverage Report type
		covPrintType	= read('COVERAGE_PRINT_TYPE'),//The Coverage print type
		covJsonFile		= read('COVERAGE_FILE'),//The Coverage.json file location
		covSrc			= read('COVERAGE_SRC', true), //The Files to run coverage test
		mochaReporter	= read('MOCHA_REPORTER'); //The Reporter type
			
	//The CheckStyle Environment Variable
	if(checkstyle){
		process.env.CHECKSTYLE_FILE = path.resolve(checkstyle);
	}
	// Project configuration.
	grunt.initConfig({
		pkg : '<json:package.json>',
		
		clean :  {
			reports : {
				src	: reportDir
			}
		},
		//JS Hint configuration
		jshint : {
			all : {
				src : jshintSrc,
				options : {
					jshintrc : jsHintrcFile,
					reporter : jsHintReporter
				},
				globals : {
					exports : true
				}
			}	
		},
		//Mocha configuration
		mochatest : {
			all : { 
				src: testFiles,
				options: {
					globals: ['should'],
					timeout: 3000,
					ignoreLeaks: false,
					ui: 'bdd',
					reporter: mochaReporter
				}
			}
		},
		
		//Istanbul configurations
		store : {
			all : {
				src : covSrc
			},
		},
		instrument : {
			files : covSrc,
			options : {
				basePath : ''
			}
		},
		storeCoverage : {
			options : {
				dir : covReport
			}
		},
		retrieve : {
			all : {
				src : covSrc
			}
		},
		makeReport : {
			src : covJsonFile,
			options : {
				type : covType,
				print : covPrintType,
				dir : covReport
			}
		}
	});
	
	//Load tasks
	grunt.loadNpmTasks('grunt-contrib-clean');
	grunt.loadNpmTasks('grunt-istanbul');
	//Load Local tasks
	grunt.loadTasks('tasks');
	
	//Test - JsHint and Mocha
	grunt.registerTask('test', ['jshint', 'mochatest']);
	//Reports - Plato and Istanbul coverage
	grunt.registerTask('reports', [
		'clean',
		'store',
		'instrument',
		'mochatest',
		'storeCoverage',
		'retrieve',
		'makeReport'
	]);
	// Default task.
	grunt.registerTask('default', ['test']);
	
};