"use strict";
var path = require('path'),
	fs  = require('fs'),
	fsutils = require('./fsutils'),
	defRoot = path.resolve(__dirname, '..', '..', '..'),
	gruntF = [ 'gruntfile.js',
		'ci-build.json'
	],
	jsHintF = [ '.jshintignore',
		'.jshintrc'
	],
	buildF = [ 'build.xml',
		'build.properties'
	],
	deps = [ 'grunt',
		'grunt-cli',
		'grunt-contrib-clean',
		'grunt-plato',
		'grunt-istanbul',
		'grunt-ci-suite',
		'nconf',
		'confer',
		'xunit-file'
	];

module.exports = {
	create: create,
};

/**
 * Creates the Gruntfile.js, build.xml, build.properties and ci-build.json and Updates the package.json
 * @param {Object} options Command line options
 */
function create(options) {

	options = options || {};
	options.root = options.root || defRoot;
	
	var pkgPath = path.resolve(options.root, 'package.json'),
		pkg,
		sourcePkg = require(path.resolve(__dirname, '..', 'package.json'));
	
	try {
		pkg = require(pkgPath);
		//Create Grunt Files
		copyFiles(gruntF, options.root, !options.nooverride);
		copyFiles(jsHintF, options.root, false);
		if(! options.dev){
			copyFiles(buildF, options.root, !options.nooverride);
		}
		

		// Updates the Package.json
		if (pkg) {
			//Using the sync for loop
			for (var i = 0; i < deps.length ; i++) {
				pkg.devDependencies[deps[i]] = sourcePkg.devDependencies[deps[i]];
			}
			fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2));
			options.logdeps = true;
		
		} else {
			console.log("Could not find the Project package.json file. Please add the following dependencies to your project");
			logDependencies();
		}
		
		process.on('exit', success.bind(null, options));

	} catch (err) {
		console.log(err);
	}
}
/**
 * Copy the files 
 * @param {Array} files - The list of files to be copied
 * @param {String} root - Destination directory (root directory of the project)
 * @param {boolean} override - Set to true if the files need to be overriden
 *
 */
function copyFiles(files, root, override){
	
	files.forEach(function (file) {
		fs.exists(path.join(root, file), function (exists) {
			if (!exists || override) {
				genFile(file, root);
			}
		});
	});
}
/**
 * Print the dependencies
 * @param {Object} opts - The options to the sucess log
 */
function logDependencies() {
	console.log();
	console.log('	grunt');
	console.log('	grunt-cli');
	console.log('	grunt-contrib-clean');
	console.log('	grunt-plato');
	console.log('	grunt-istanbul');
	console.log('	grunt-ci-suite');
	console.log('	nconf');
	console.log('	confer');
	console.log('	xunit-file');
	console.log();
}
/**
 * Print the success statement.
 * @param {Object} opts - The options to the sucess log
 */
function success(opts) {
	console.log();
	console.log('CI build files Created.');
	
	if (opts.logdeps) {
		console.log('Added the following dependancies to the package.json : ');
		logDependencies();
		
	}
	console.log('Install dependencies');
	console.log('  $ cd %s && npm install', opts.root);
	console.log();
	console.log('To run the grunt test');
	console.log('  $ node_modules/.bin/grunt test');
}

/**
 * Generate the Files from the template
 * @param {String} file - The file to be genearted.
 * @param {String} root - The root directory of the project
 */
function genFile(file, root) {
	
	var src = path.resolve(__dirname, 'template', file),
		dest = path.resolve(root, file);
		
	fsutils.copy(src, dest, function (err) {
		if (err) {
			return console.err(err);
		}
		console.log('File %s generated', dest);
	});
}
