<project name="nodejs-ci-suite" default="grunt-build" basedir=".">
	
    <description>
        Provides CI suite, to bootstrap the build options (Linting, Running Unit tests etc.) for any NodeJs application.
    </description>
	

    <property environment="env"/>
	<property file="build.properties" />
    <fail unless="env.WORKSPACE" message="$WORKSPACE not set" />
	
    <!-- Read Environment variables/Build parameters -->
   	<condition property="node.targetRepo" value="${env.TARGET_REPO}" else="${TARGET_REPO}">
        <isset property="env.TARGET_REPO" />
    </condition>
    <!-- Property for failing build if code coverage task fails-->
    <condition property="covfailure" value="${env.COVERAGE_FAIL_ON_ERROR}" else="${COVERAGE_FAIL_ON_ERROR}">
        <isset property="env.COVERAGE_FAIL_ON_ERROR" />
    </condition>
	<!-- Property for git push-->
	<condition property="gitpush" value="${env.GIT_PUSH}" else="${GIT_PUSH}">
        <isset property="env.GIT_PUSH" />
    </condition>
	<condition property="do_gitpush" value="${gitpush}">
        <equals arg1="${gitpush}" arg2="true"/>
    </condition>
    <condition property="sslverify" value="${env.GIT_SSL_NO_VERIFY}" else="${GIT_SSL_NO_VERIFY}">
        <isset property="env.GIT_SSL_NO_VERIFY" />
    </condition>
    <condition property="ignore_sslverify" value="${sslverify}">
        <equals arg1="${sslverify}" arg2="true"/>
    </condition>
	<condition property="reports_branch" value="${env.REPORTS_BRANCH}" else="${REPORTS_BRANCH}">
        <isset property="env.REPORTS_BRANCH" />
    </condition>
    <condition property="reports_dir" value="${env.REPORTS_DIR}" else="${REPORTS_DIR}">
        <isset property="{env.REPORTS_DIR}" />
    </condition>
    <condition property="code_branch" value="${env.GIT_BRANCH}" else="master">
        <isset property="{env.GIT_BRANCH}" />
    </condition>
	<condition property="build_id" value="${env.BUILD_ID}" else="">
        <isset property="{env.BUILD_ID}" />
    </condition>

	<!-- Run the NPM Install-->
	<target name="npm-install">
		
		<exec executable="sh" failonerror="true">
			<env key="PATH" value="${env.WORKSPACE}/node/bin:${env.PATH}"/>
			<env key="GIT_SSL_NO_VERIFY" value="${sslverify}"/>
			<arg value = "-c" />
            <arg value="npm install" />
        </exec>
	</target>
	<!-- Grunt task runner-->
	<target name="grunt-build" depends="npm-install">
		<property name="node.grunt" value="${env.WORKSPACE}/node_modules/.bin/grunt"/>
		<!-- Run the tests -JsHint and Mocha tests-->
		<exec executable="sh" failonerror="true">
			<env key="PATH" value="${env.WORKSPACE}/node/bin:${env.PATH}"/>
			<env key="LOG_XUNIT" value="true"/>
			<arg value = "-c" />
            <arg value = "${node.grunt} test" />
        </exec>
		<!-- Run the coverage task- Plato and Istanbul code coverage-->
		<exec executable="sh" failonerror="${covfailure}">
			<env key="PATH" value="${env.WORKSPACE}/node/bin:${env.PATH}"/>
			<env key="LOG_XUNIT" value="true"/>
			<arg value = "-c" />
            <arg value = "${node.grunt} coverage" />
        </exec>
		<!-- Git push the Reports-->
		<antcall target="_git_update"/>
	</target>
	<target name="_git_update" if="do_gitpush">
		<exec executable="sh">
            <arg value="-c" />
            <arg value="cd ${reports_dir} &amp;&amp; git init . &amp;&amp; git add . &amp;&amp; git commit -m 'Update reports ${build_id}' 
            	&amp;&amp; git push ${node.targetRepo} ${code_branch}:${reports_branch} --force &amp;&amp; rm -rf ${reports_dir}/.git" />
        </exec>
	</target>
	
</project>
