'use strict';
/*global describe, before, beforeEach, after */
var path = require('path'),
	fs = require('fs'),
	fsutils = require('fsutils'),
	assert = require('assert'),
	//should = require('should'),
	spawn = require('child_process').spawn;


describe('Create command', function () {
	var rootDir = process.cwd(),
		tempDir = path.join(rootDir, 'temp');

	// Set a larger timeout
	this.timeout(20000);

	// Generate a test app
	before(function (done) {
		//Make temp directory
		fsutils.mkdirpSync(tempDir, '755');
		
		//Copy the package.json to temp folder
		fsutils.copy(path.join(rootDir,'package.json'), path.join(tempDir,'package.json'), function (err) {
			if (err) {
				return console.err(err);
			}
			
		});

		var cisuite = spawn('bin/nodejs-ci-suite', ['create', '--root', tempDir, '--override']);
		cisuite.on('close', function (code) {
			console.log(code);
			done();
		});
	});

	// Each test executes in the app's directory
	beforeEach(function () {
		process.chdir(tempDir);
	});

	// Clean up and remove the test app
	after(function (done) {
		process.chdir(path.join(tempDir, '..'));
		fsutils.rmdirf(tempDir, done);
		done();
	});


	it('Generated build files', function () {
		[
			'build.xml',
			'build.properties',
			'ci-build.json',
			'.jshintignore',
			'.jshintrc'
		].forEach(function assertFile(file) {
			assert.ok(fs.existsSync(file), file + ' does not exist');
		});
	});



});
