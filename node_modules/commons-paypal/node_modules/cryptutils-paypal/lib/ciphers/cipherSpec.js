'use strict';

var crypto = require('crypto');

/**
 * @param name
 * @param key
 * @param padding
 * @constructor
 */
function CipherSpec (name, key, padding, iv) {
    this._name = name || 'desx';
    this._padding = !!padding;
    this._keySize = CipherSpec.keySizeFor(this.name);
    this._key = key;
    this._iv = iv || CipherSpec.defaultIV(this.name);

    if (this.key.length !== this.keySize) {
        throw new Error('Bad key length ' + this.key.length + '. Expected ' + this.keySize);
    }

    this._cipher = crypto.createCipheriv(this.name, this.key, this.iv);
    this._cipher.setAutoPadding(this.padding);

    this._decipher = crypto.createDecipheriv(this.name, this.key, this.iv);
    this._decipher.setAutoPadding(this.padding);
}

CipherSpec.prototype = {
    get name () {
        return this._name;
    },
    get padding () {
        return this._padding;
    },
    get keySize () {
        return this._keySize;
    },
    get key () {
        return this._key;
    },
    get iv () {
        return this._iv;
    },

    cipher: function (data, callback) {
        return this._invoke(this._cipher, data);
    },

    decipher: function (data, callback) {
        return this._invoke(this._decipher, data);
    },

    _invoke: function (impl, data, callback) {
        return Buffer.concat([
            impl.update(data),
            impl.final()
        ]);
    }
};

CipherSpec.defaultIV = function (name) {
    var length = 8;

    switch (name) {
        case 'desx' :
        case 'desx-cbc' :
        case 'des-ede3-cbc' :
        case 'des-cbc' :
        case 'bf-cbc' :
        case 'desx-cbc':
            break;
        case 'aes128' :
        case 'aes-128-cbc' :
            length = 16;
            break;
        case 'aes-256-cbc' :
            length = 16;
            break;
        default :
            break;
    }
    return new Buffer(new Array(length));
};

CipherSpec.keySizeFor = function (name) {
    var keySize;
    
    switch (name) {
        case 'desx-cbc':
        case 'desx' :
            keySize = 24;
            break;
        case 'des-ede3-cbc' :
            keySize = 24;
            break;
        case 'des-cbc' :
            keySize = 8;
            break;
        case 'bf-cbc' :
            keySize = 16;
            break;
        case 'aes128' :
            keySize = 16;
            break;
        case 'aes-128-cbc' :
            keySize = 16;
            break;
        case 'aes-256-cbc' :
            keySize = 32;
            break;
        case 'desx-cbc':
            keySize = 24;
            break;
        default :
            keySize = 20;
            break;
    }
    return keySize;
};

module.exports = CipherSpec;
