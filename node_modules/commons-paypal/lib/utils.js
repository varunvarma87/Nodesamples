'use strict';

var os = require('os'),
    shell = require('shelljs');

function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getYear() % 100, d.getMonth() + 1, d.getDate() ].join('-') + ':' + time;
}

function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

function toIPv4(ipAddress) {
    // handling IPv4-mapped IPv6 addresses - http://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses
    if (ipAddress && /^::ffff:(\d{1,3}\.){3,3}\d{1,3}$/.test(ipAddress)) {
        ipAddress = ipAddress.replace(/^::ffff:/, '');
    }
    return ipAddress;
}

/**
 * check if directly the machine is hit/
 * in LIVE: will be true if accessed via siteview or curl'ed from bastion host
 * @param req request
 * @returns {Boolean} true if direct request to machine, false otherwise
 */
function isDirectRequest(req) {
    var auth = false,
        hostName = req.hostname || req.headers && req.headers.host,
        osHostName = os.hostname();

    //Get the hostname from the FQDN of the header
    if (hostName && hostName.indexOf('.') !== -1) {
        hostName = hostName.split('.')[0];
    }

    if (hostName && (hostName === 'localhost' || hostName.indexOf(osHostName) !== -1)) {
        auth = true;
    }
    return auth;

}

/**
 * check if the request IP is internal or not
 * @param req request
 * @returns {Boolean} true if the IP is internal, false otherwise
 */
function isInternalAddr(req) {
    var auth = false,
        addr,
        ip = req.headers && req.headers.pp_remote_addr;

    auth = isDirectRequest(req);

    if (!auth && ip) {
        addr = ip.split('.');
        if (addr.length === 4) {
            if (addr[0] === '10' || addr[0] === '127') {
                auth = true;
            }
        }
    }
    return auth;

}

function localSCMInfo() {
    var gitUrl,
        gitBranch,
        gitCommit,
        response;

    response = shell.exec('git config remote.origin.url', {silent: true});
    if (response && response.code === 0) {
        gitUrl = response.output.trim();
    }

    response = shell.exec('git rev-parse --abbrev-ref HEAD', {silent: true});
    if (response && response.code === 0) {
        gitBranch = response.output.trim();
    }

    response = shell.exec('git rev-parse HEAD', {silent: true});
    if (response && response.code === 0) {
        gitCommit = response.output.trim();
    }

    var scm = {
        gitUrl : gitUrl,
        gitBranch : gitBranch,
        gitCommit : gitCommit
    };

    return scm;
}

module.exports = {
    toIPv4: toIPv4,
    isDirectRequest: isDirectRequest,
    isInternalAddr: isInternalAddr,
    localSCMInfo: localSCMInfo,
    timestamp: timestamp
};
