'use strict';

var os = require('os'),
    ip = require('ip'),
    crypto = require('crypto');

var NON_PADDED_DELIMETER = '.',
    ISO_DELIMETER = '-';


function getIPAddress() {
    var ifaces = os.networkInterfaces();
    var serverAddr = null;
    for (var dev in ifaces) {
        for (var i = 0; i < ifaces[dev].length; i++) {
            var details = ifaces[dev][i];
            if (details.family === 'IPv4' && !details.internal) {
                serverAddr = details.address;
                break;
            }
        }
    }
    if (!serverAddr) {
        serverAddr = ip.address();
    }
    return serverAddr;
}

function genHash(len) {
    var shasum = crypto.createHash('sha1');
    shasum.update(process.id + '');
    shasum.update(Date.now() + '');
    var hash = shasum.digest('hex');
    if (hash.length > len) {
        hash = hash.substring(0, len);
    }
    return hash;
}

function getTimeHex(len) {
    var timeHex = Date.now().toString(16);
    if (timeHex.length > len) {
        timeHex = timeHex.substr(timeHex.length - len, len);
    }
    return timeHex;
}

function pad(unpadded, len) {
    unpadded = unpadded + '';
    if (unpadded.length >= len) {
        return unpadded;
    }
    var padded = '';
    for (var i = unpadded.length; i < len; i++) {
        padded += '0';
    }
    padded += unpadded;
    return padded;
}

function getAddrHex(serverAddr) {
    // handling IPv4-mapped IPv6 addresses - http://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses
    if (/^::ffff:(\d{1,3}\.){3,3}\d{1,3}$/.test(serverAddr)) {
        serverAddr = serverAddr.replace(/^::ffff:/, '');
    }
    var inetAddrHex = ip.toLong(serverAddr);

    return inetAddrHex.toString(16);
}

function parseDate(dateHex) {
    return new Date(parseInt(dateHex, 16));
}

function parseIP(ipHex) {
    var addr = parseInt(ipHex, 16);
    var addrs = [];
    for (var i = 3; i >= 0; i--) {
        addrs[i] = addr & 0xff;
        addr >>>= 8;
    }
    return addrs.join('.');
}

function parseCounter(counterHex) {
    // to keep consistent with Java counter, for Java the counter starts from -1, since Java has 32-bit integer and its hex will be 0xffffffff
    return -(~parseInt(counterHex, 16) + 1);
}

var hash = genHash(5),
    addrHex = getAddrHex(getIPAddress()),
    staticGUID = NON_PADDED_DELIMETER + addrHex + NON_PADDED_DELIMETER + hash + NON_PADDED_DELIMETER,
    staticPaddedGUID = pad(addrHex, 8) + pad(hash, 5),
    staticISOGUID = staticPaddedGUID.substring(0, 1) + ISO_DELIMETER + staticPaddedGUID.substring(1, 5) + ISO_DELIMETER + staticPaddedGUID.substring(5, 9) + ISO_DELIMETER + staticPaddedGUID.substring(9, staticPaddedGUID.length),
    counter = 0xffffffff;

function nextCounter() {
    var next = counter--;
    if (counter <= 0) {
        counter = 0xffffffff;
    }
    return next;
}

module.exports = {
    nextCounter: nextCounter,

    nextGUID: function () {
        var timeHex = getTimeHex(11);
        return pad(timeHex, 11) + staticGUID + nextCounter().toString(16);
    },

    nextPaddedGUID: function () {
        var timeHex = getTimeHex(11);
        timeHex = pad(timeHex, 11);
        return timeHex.substring(3, timeHex.length) + timeHex.substring(0, 3) + staticPaddedGUID + nextCounter().toString(16);
    },

    nextISOGUID: function () {
        var timeHex = getTimeHex(11);
        timeHex = pad(timeHex, 11);
        return timeHex.substring(0, 8) + ISO_DELIMETER + timeHex.substring(8, timeHex.length) + staticISOGUID + nextCounter().toString(16);
    },

    parseGUID: function (guid) {
        if (!guid) {
            return null;
        }
        var components = guid.split(NON_PADDED_DELIMETER);
        if (!components || components.length !== 4) {
            return null;
        }
        var data = {};
        data.date = parseDate(components[0]);
        data.ip = parseIP(components[1]);
        data.hash = parseInt(components[2], 16);
        data.counter = parseCounter(components[3]);
        return data;
    },

    parsePaddedGUID: function (guid) {
        if (!guid || guid.length !== 32) {
            return null;
        }
        var data = {};
        data.date = parseDate(guid.substring(8, 11) + guid.substring(0, 8));
        data.ip = parseIP(guid.substring(11, 19));
        data.hash = parseInt(guid.substring(19, 24), 16);
        data.counter = parseCounter(guid.substring(24, 32));
        return data;
    },

    parseISOGUID: function (guid) {
        if (!guid || guid.length !== 36) {
            return null;
        }
        var data = {};
        data.date = parseDate(guid.substring(0, 8) + guid.substring(9, 12));
        data.ip = parseIP(guid.substring(12, 13) + guid.substring(14, 18) + guid.substring(19, 22));
        data.hash = parseInt(guid.substring(22, 23) + guid.substring(24, 28), 16);
        data.counter = parseCounter(guid.substring(28, 36));
        return data;
    }
};
