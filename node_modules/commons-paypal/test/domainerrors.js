'use strict';

var os = require('os'),
    cal = require('cal'),
    async = require('async'),
    assert = require('assert'),
    express = require('express'),
    request = require('supertest'),
    Commons = require('../index');

cal.setDefaultWriteStream('console');
cal.defaults.formatter = cal.formatter.console;

require.main.filename = __dirname;

describe.only('Domain Errors', function () {

    var app;

    before(function (next) {
        app = express();
        app.use(cal.middleware());
        app.use(Commons());
        app.get('/', function (req, res) {
            res.setHeader('Cache-Control', 'no-cache');
            var error = req.object.which.does.not.exist;
            res.send('hello world');
        });
        app.get('/async', function (req, res) {
            res.setHeader('Cache-Control', 'no-cache');
            setImmediate(function () {
                var error = req.object.which.does.not.exist;
                res.send('hello world');
            });
        });
        next();
    });

    it('single sync error', function (next) {
        request(app)
            .get('/')
            .expect('Content-Type', /html/)
            .expect(500)
            .end(function (err, res) {
                if (err) {
                    throw err;
                }
                assert.ok(res.text.indexOf('TypeError: Cannot read property') !== -1);
                next();
            });
    });

    it('100 sync errors', function (next) {
        async.timesSeries(100, function (n, cb) {
            request(app)
                .get('/')
                .expect('Content-Type', /html/)
                .expect(500)
                .end(function (err, res) {
                    if (err) {
                        throw err;
                    }
                    assert.ok(res.text.indexOf('TypeError: Cannot read property') !== -1);
                    cb();
                });
        }, function () {
            next();
        });
    });


    it('100 async errors', function (next) {
        async.timesSeries(100, function (n, cb) {
            request(app)
                .get('/async')
                .expect('Content-Type', /html/)
                .expect(500)
                .end(function (err, res) {
                    if (err) {
                        throw err;
                    }
                    assert.ok(res.text.indexOf('TypeError: Cannot read property') !== -1);
                    cb();
                });
        }, function () {
            next();
        });
    });

});
