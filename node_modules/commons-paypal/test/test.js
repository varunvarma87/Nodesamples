'use strict';

var os = require('os'),
    cal = require('cal'),
    nconf = require('nconf'),
    assert = require('assert'),
    Commons = require('../index'),
    EventEmitter = require('events').EventEmitter;

cal.setDefaultWriteStream('console');

nconf.use('memory');
require.main.filename = __dirname;

function injectRequest() {
    var req = new EventEmitter();
    req.correlationId = 0xabcdef;
    req.headers = {
        'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.149 Safari/537.36'
    };
    req.query = {};
    req.url = '/';
    req.header = function () {};
    return req;
}

function injectResponse() {
    var res = new EventEmitter();
    res.req = { app: { get: function () { return '/'; } } };
    res.header = function () {};
    return res;
}

function middlewares(req, res, callback) {
    cal.middleware()(req, res, function () {
        Commons()(req, res, function () {
            callback();
        });
    });
}

describe('Commons', function () {

    it('commons-default', function (next) {
        var req = injectRequest(),
            res = injectResponse();
        req.headers.host = 'localhost.paypal.com';

        nconf.set('links:resourceBaseUrl', '');
        middlewares(req, res, function () {
            assert.ok(req.appName === 'commons-paypal');
            assert.ok(req.rlogId);
            assert.ok(req.correlationId);
            assert.ok(req.pageStartTime);
            assert.ok(req.isInternalRequest === true);
            assert.ok(req.showDebugInfo === true);
            assert.ok(req.guidGenerator);
            assert.ok(res.locals.context.pageInfo.debug);
            assert.ok(res.locals.context.pageInfo.debug.scm.gitUrl.indexOf('ppcommons') !== -1);
            assert.ok(nconf.get('manifest:name') === 'ppcommons');
            assert.ok(nconf.get('manifest:version').ppReleaseVersion === '108.0');
            // Check that default resource urls are as expected
            assert.equal(res.locals.context.links.jsBaseUrl, '/js');
            assert.equal(res.locals.context.links.cssBaseUrl, '/css');
            assert.equal(res.locals.context.links.templateBaseUrl, '/templates');

            next();
        });
    });

    it('InternalRequest - LIVE with PP_REMOTE_ADDR', function (next) {

        var req = injectRequest(),
            res = injectResponse();
        req.headers.host = 'localhost';
        req.headers.pp_remote_addr = '10.223.10.12';

        var old_deployEnv = process.env.DEPLOY_ENV;

        process.env.DEPLOY_ENV = 'LIVE';

        middlewares(req, res, function () {
            assert.ok(req.appName === 'commons-paypal');
            assert.ok(req.isInternalRequest === true);

            process.env.DEPLOY_ENV = old_deployEnv;
            next();
        });
    });

    it('InternalRequest - LIVE with no PP_REMOTE_ADDR', function (next) {

        var req = injectRequest(),
            res = injectResponse();
        req.headers.host = 'localhost';

        var old_deployEnv = process.env.DEPLOY_ENV;

        process.env.DEPLOY_ENV = 'LIVE';

        middlewares(req, res, function () {
            assert.ok(req.appName === 'commons-paypal');
            assert.ok(req.isInternalRequest === true);

            process.env.DEPLOY_ENV = old_deployEnv;
            next();
        });
    });

    it('InternalRequest - LIVE with hostname equal to os.hostname', function (next) {

        var req = injectRequest(),
            res = injectResponse();
        req.headers.host = os.hostname();

        var old_deployEnv = process.env.DEPLOY_ENV;

        process.env.DEPLOY_ENV = 'LIVE';

        middlewares(req, res, function () {
            assert.ok(req.appName === 'commons-paypal');
            assert.ok(req.isInternalRequest === true);

            process.env.DEPLOY_ENV = old_deployEnv;
            next();
        });
    });

    it('ExternalRequest - LIVE with PP_REMOTE_ADDR', function (next) {

        var req = injectRequest(),
            res = injectResponse();
        req.headers.pp_remote_addr = '115.123.10.12';

        var old_deployEnv = process.env.DEPLOY_ENV;

        process.env.DEPLOY_ENV = 'LIVE';

        middlewares(req, res, function () {
            assert.ok(req.appName === 'commons-paypal');
            assert.ok(req.isInternalRequest === false);

            process.env.DEPLOY_ENV = old_deployEnv;
            next();
        });
    });

    it('ExternalRequest - LIVE with no PP_REMOTE_ADDR', function (next) {

        var req = injectRequest(),
            res = injectResponse();
        req.headers.host = 'lm-sjn-00713581';

        var old_deployEnv = process.env.DEPLOY_ENV;

        process.env.DEPLOY_ENV = 'LIVE';

        middlewares(req, res, function () {
            assert.ok(req.appName === 'commons-paypal');
            assert.ok(req.isInternalRequest === false);

            process.env.DEPLOY_ENV = old_deployEnv;
            next();
        });
    });

    it('DirectRequest - LIVE with direct access', function (next) {

        var req = injectRequest(),
            res = injectResponse();
        req.hostname = 'localhost';
        req.headers.pp_remote_addr = '10.223.10.12';

        var old_deployEnv = process.env.DEPLOY_ENV;

        process.env.DEPLOY_ENV = 'LIVE';

        middlewares(req, res, function () {
            assert.ok(req.appName === 'commons-paypal');
            assert.ok(req.showDebugInfo === true);
            assert.ok(req.isInternalRequest === true);

            process.env.DEPLOY_ENV = old_deployEnv;
            next();
        });
    });

    it('DirectRequest - LIVE with indirect access', function (next) {

        var req = injectRequest(),
            res = injectResponse();
        req.hostname = 'www.paypal.com';
        req.headers.pp_remote_addr = '10.223.10.12';

        var old_deployEnv = process.env.DEPLOY_ENV;

        process.env.DEPLOY_ENV = 'LIVE';

        middlewares(req, res, function () {
            assert.ok(req.appName === 'commons-paypal');
            assert.ok(req.showDebugInfo === false);
            assert.ok(req.isInternalRequest === true);

            process.env.DEPLOY_ENV = old_deployEnv;
            next();
        });
    });

    it('link for stage', function (next) {

        var req = injectRequest(),
            res = injectResponse();
        req.headers.host = 'stage2dev007.qa.paypal.com';

        middlewares(req, res, function () {
            assert.ok(req.appName === 'commons-paypal');
            // Restore this and replace assets for non-stage-domain result when nginx can support serving static urls
            var links = res.locals.context.links;
            assert.equal(links.jsBaseUrl, '/js');
            assert.equal(links.cssBaseUrl, '/css');
            assert.equal(links.templateBaseUrl, '/templates');
            assert.equal(links.resourceBaseUrl, '');
            next();
        });
    });


    it('link for stage with Partner stage enabled', function (next) {

        process.env.HOST_FQDN = 'stage2dev005.qa.paypal.com';
        var req = injectRequest(),
            res = injectResponse();
        req.headers.host = 'stage2dev007.qa.paypal.com';

        middlewares(req, res, function () {
            assert.ok(req.appName === 'commons-paypal');
            // Restore this and replace assets for non-stage-domain result when nginx can support serving static urls
            var links = res.locals.context.links;
            assert.equal(links.jsBaseUrl, '/js');
            assert.equal(links.cssBaseUrl, '/css');
            assert.equal(links.templateBaseUrl, '/templates');
            assert.equal(links.resourceBaseUrl, '');
            delete process.env.HOST_FQDN;
            next();
        });
    });

    it('links for live', function (next) {

        var req = injectRequest(),
            res = injectResponse();
        req.headers.host = 'www.paypal.com/app';

        nconf.set("links:resourceBaseUrl", "hash");
        middlewares(req, res, function () {
            assert.ok(req.appName === 'commons-paypal');
            var links = res.locals.context.links;
            assert.equal('https://www.paypalobjects.com/web/res/hash/js', links.jsBaseUrl);
            assert.equal('https://www.paypalobjects.com/web/res/hash/css', links.cssBaseUrl);
            assert.equal('https://www.paypalobjects.com/web/res/hash/templates', links.templateBaseUrl);
            assert.equal('https://www.paypalobjects.com/web/res/hash', links.resourceBaseUrl);
            next();
        });
    });
});
