'use strict';

var guidGenerator = require('../index').GUIDGenerator;
var assert = require('assert');

var NON_PADDED_DELIMETER = '.',
    ISO_DELIMETER = '-';

describe('guidGenerator', function () {

    it('nextGUID', function () {
        assert.ok(guidGenerator.nextGUID());
        assert.ok(guidGenerator.nextGUID() !== guidGenerator.nextGUID());
    });

    it('nextPaddedGUID', function () {
        assert.ok(guidGenerator.nextPaddedGUID());
        assert.ok(guidGenerator.nextPaddedGUID() !== guidGenerator.nextPaddedGUID());
        assert.equal(guidGenerator.nextPaddedGUID().length, 32);
    });

    it('nextISOGUID', function () {
        assert.ok(guidGenerator.nextISOGUID());
        assert.ok(guidGenerator.nextISOGUID() !== guidGenerator.nextISOGUID());
        assert.equal(guidGenerator.nextISOGUID().length, 36);

        assert.ok(guidGenerator.nextGUID() !== guidGenerator.nextISOGUID());
        assert.ok(guidGenerator.nextGUID() !== guidGenerator.nextPaddedGUID());
    });

    it('should generate a correct GUID with . separated.', function () {
        var guid = guidGenerator.nextGUID();
        assert.ok(guid);
        var components = guid.split(NON_PADDED_DELIMETER);
        assert.ok(components);
        assert.equal(components.length, 4);
    });

    it('should generate a correct padded GUID', function () {
        var guid = guidGenerator.nextPaddedGUID();
        assert.ok(guid);
        assert.equal(guid.length, 32);
    });

    it('should generate a correct ISO GUID with - separated.', function () {
        var guid = guidGenerator.nextISOGUID();
        assert.ok(guid);
        assert.equal(guid.length, 36);
        var components = guid.split(ISO_DELIMETER);
        assert.ok(components);
        assert.equal(components.length, 5);
    });


    it('Same GUID Generator should generate same hash for different GUIDs.', function () {
        assert.equal(guidGenerator.nextGUID().split(NON_PADDED_DELIMETER)[2], guidGenerator.nextGUID().split(NON_PADDED_DELIMETER)[2]);
        assert.equal(guidGenerator.nextPaddedGUID().substr(19, 5), guidGenerator.nextPaddedGUID().substr(19, 5));
        var guid = guidGenerator.nextISOGUID();
        var guid1 = guidGenerator.nextISOGUID();
        assert.equal(guid.substr(22, 1) + guid.substr(24, 4), guid1.substr(22, 1) + guid1.substr(24, 4));
    });

    it('GUID Generator should generate different counter for different GUIDs.', function () {
        assert.notEqual(guidGenerator.nextGUID().split(NON_PADDED_DELIMETER)[3], guidGenerator.nextGUID().split(NON_PADDED_DELIMETER)[3]);
        assert.notEqual(guidGenerator.nextPaddedGUID().substr(24, 8), guidGenerator.nextPaddedGUID().substr(24, 8));
        assert.notEqual(guidGenerator.nextISOGUID().substr(28, 8), guidGenerator.nextISOGUID().substr(28, 8));
    });
});

describe('GUID Parser', function () {

    it('GUID Parser should parse a GUID correctly', function () {
        var guidData = guidGenerator.parseGUID('13ef995acbb.af9406d.65c86.ffffffff');
        assert.ok(guidData);
        assert.equal(guidData.date.getTime(), 1369986935995);
        assert.ok(guidData.hash);
        assert.equal(guidData.ip, '10.249.64.109');
        assert.equal(guidData.counter, -1);

    });

    it('GUID Parser should parse a padded GUID correctly', function () {
        var guidData = guidGenerator.parsePaddedGUID('f995acc213e0af9406d65c86fffffffe');
        assert.ok(guidData);
        assert.equal(guidData.date.getTime(), 1369986936002);
        assert.ok(guidData.hash);
        assert.equal(guidData.ip, '10.249.64.109');
        assert.equal(guidData.counter, -2);
    });

    it('GUID Parser should parse an ISO GUID correctly', function () {
        var guidData = guidGenerator.parseISOGUID('13ef995a-cc20-af94-06d6-5c86fffffffd');
        assert.ok(guidData);
        assert.equal(guidData.date.getTime(), 1369986936002);
        assert.ok(guidData.hash);
        assert.equal(guidData.ip, '10.249.64.109');
        assert.equal(guidData.counter, -3);
    });

    it('GUID Parser should not parse mal-formmated GUIDs', function () {
        assert.ok(!guidGenerator.parseGUID('13ef995a-cc20-af94-06d6-5c86fffffffd'));
        assert.ok(!guidGenerator.parsePaddedGUID('13ef995acbb.af9406d.65c86.ffffffff'));
        assert.ok(!guidGenerator.parseISOGUID('f995acc213e0af9406d65c86fffffffe'));
    });

    it('GUID Parser should be able to parse the guid generated by GUID Generator', function () {
        assert.ok(guidGenerator.parseGUID(guidGenerator.nextGUID()));
        assert.ok(guidGenerator.parsePaddedGUID(guidGenerator.nextPaddedGUID()));
        assert.ok(guidGenerator.parseISOGUID(guidGenerator.nextISOGUID()));
    });

});
