'use strict';

var Field = require('./field'),
    types = require('../types'),
    assert = require('assert');

function VO(name) {
    assert.ok(name && typeof name === 'string', 'Expected string name.');
    this._name = name;
    this._fields = {};
}

VO.prototype = {
    get name() {
        return this._name;
    },
    get fields() {
        return this._fields;
    },

    addField: function (id, field) {
        assert.ok(id && typeof id === 'string', 'Expected string field id.');
        assert.ok(field, 'Expected a field value.');

        if (!(field instanceof Field)) {
            if (field instanceof VO) {
                field = new Field(field.name, field);
            }
            else {
                field = new Field(field.type, field.value);
            }
        }

        this._fields[id] = field;
        return this;
    },

    removeField: function (id) {
        delete this._fields[id];
        return this;
    },

    getField: function (id) {
        return this._fields[id];
    },

    validate: function () {
        assert.ok(typeof this._name === 'string', 'Expected string for name.');
        assert.ok(typeof this._fields === 'object', 'Expected object for value.');

        Object.getOwnPropertyNames((this._fields)).forEach(function (fieldName) {
            this.getField(fieldName).validate();
        }.bind(this));

        return this;
    },

    json: function () {
        var result = {};

        Object.getOwnPropertyNames(this._fields).forEach(function (fieldName) {
            var field, results;

            field = this._fields[fieldName];

            if (types.isVO(field.type)) {
                if (Array.isArray(field.value)) {
                    results = [];
                    field.value.forEach(function (value) {
                        results.push(value.json());
                    });
                    result[fieldName] = results;
                }
                else {
                    result[fieldName] = field.value.json();
                }
            }
            else {
                result[fieldName] = field.value;
            }
        }.bind(this));

        return result;
    }
};

VO.build = function (data) {

    var _build = function (data) {
        assert.ok(data && typeof data === 'object', 'Expected an object.');

        var vo = new VO(data.name);

        assert.ok(data.fields && typeof data.fields === 'object', 'Expected an object for fields.');

        Object.getOwnPropertyNames(data.fields).forEach(function (fieldName) {
            var field, vovalues;

            field = data.fields[fieldName];

            assert.ok(field && typeof field === 'object', 'Expected an object field.');

            if (types.isVO(field.type) && !(field instanceof VO)) {
                if (Array.isArray(field.value)) {
                    vovalues = [];

                    field.value.forEach(function (value) {
                        vovalues.push(_build(value));
                    });

                    field.value = vovalues;

                    vo.addField(fieldName, field);
                }
                else {
                    vo.addField(fieldName, _build(field.value));
                }
            }
            else {
                vo.addField(fieldName, field);
            }
        });

        return vo;
    };
    return _build(data).validate();
};

module.exports = VO;