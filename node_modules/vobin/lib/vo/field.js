'use strict';

var types = require('../types'),
    assert = require('assert');

function Field(type, value) {
    assert.ok(type && typeof type === 'string', 'Expected string type.');
    assert.ok(value, 'Expected value.');
    this._type = type;
    this._value = value;
}

Field.prototype = {
    get type() {
        return this._type;
    },
    get value() {
        return this._value;
    },

    //TODO: Fix for 64 bit not requiring strings.
    validate: function () {
        var typecheck, v;

        typecheck = types.typeJsonMap[types.typeMap[this._type]] || this._type;

        if (typeof typecheck === 'function') {
            typecheck = typecheck(this._value);
        }

        assert.ok(typeof this._type === 'string', 'Expected string for type.');
        assert.ok(types.isVO(this._type) || new RegExp(typecheck).test(typeof this._value), 'Expected ' + typecheck + ' for value.');

        if (Array.isArray(this._value)) {
            for (var i = 0; i < this._value.length; i++) {
                v = this._value[i];
                if (typeof v === 'object') {
                    assert.ok(v.name === this._type);
                }
                else {
                    assert.strictEqual(typeof v, types.typeJsonMap[types.typeMap[this._type]]);
                }
            }
        }
        return this;
    }
};

module.exports = Field;