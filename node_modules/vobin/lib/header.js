'use strict';

var constants = require('./constants');

function Header(options) {
    options = options || {};

    this.format = constants.BINARY_FORMAT_ID;
    this.version = 1;
    this.useBase64 = options.useBase64 || false;
    this.useCompression = options.useCompression || false;
    this.useUniversalHeader = options.forceHeader || false;
    this.resetNeeded = options.resetNeeded || false;
}

/**
 * This only supports binary format.
 * @param data
 * @return {Header}
 */
Header.fromData = function (data) {
    var flags;

    if (data[1] !== constants.BINARY_FORMAT_ID) {
        throw new Error('Unsupported format.');
    }
    if (data[0] === constants.UNIVERSAL_HEADER_BYTE) {
        flags = data[2] - constants.ASCII_ZERO;
        return new Header({
            useBase64: (flags & constants.FLAG_USE_BASE64) !== 0,
            useCompression: (flags & constants.FLAG_USE_COMPRESSION) !== 0,
            resetNeeded: false,
            useUniversalHeader: true
        });
    }
    else if (data[0] === constants.BINARY_HEADER[0] && data[1] === constants.BINARY_HEADER[1]) {
        return new Header({
            resetNeeded: true
        });
    }
    else {
        throw new Error('The first four bytes are ' + data.toString() + ' and this is not valid - something is wrong with the data');
    }
};

Header.prototype.getBytes = function getBytes() {
    var header;

    if (this.useBase64 || this.useCompression || this.useUniversalHeader) {
        header = [
                    constants.UNIVERSAL_HEADER_BYTE,
                    this.format,
                    this.useCompression ? 0 | constants.FLAG_USE_COMPRESSION : 0,
                    this.useBase64 ? 0 | constants.FLAG_USE_BASE64 : 0
                ];
        return header;
    }
    else {
        return null;
    }
};

module.exports = Header;