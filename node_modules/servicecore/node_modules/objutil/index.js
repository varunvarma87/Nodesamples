'use strict';

var util = require('util'),
    thing = require('core-util-is');

var slice = Function.call.bind(Array.prototype.slice);

function mixable(obj) {
    return thing.isObject(obj) && !thing.isArray(obj);
}

/**
 * Copies properties from src to dest, potentially overwriting previously defined properties.
 * @param src
 * @param dest
 * @returns {*}
 */
exports.mixin = function mixin(src, dest) {
    var sources = slice(arguments);
    dest = sources.pop();

    sources.forEach(function (source) {
        if (thing.isObject(source)) {
            Object.getOwnPropertyNames(source).forEach(function(name) {
                Object.defineProperty(dest, name, Object.getOwnPropertyDescriptor(source, name));
            });
        }
    });
    return dest;
};

/**
 * Recursively copies properties from src to dest, potentially overwriting previously defined properties.
 * @param src
 * @param dest
 * @returns {*}
 */
exports.deepMixin = function deepMixin(src, dest) {
    var sources = slice(arguments);
    dest = sources.pop();

    sources.forEach(function (source) {
        if (thing.isObject(source)) {
            Object.getOwnPropertyNames(source).forEach(function(prop) {
                var descriptor = Object.getOwnPropertyDescriptor(src, prop);
                descriptor.value = mixable(descriptor.value) ? deepMixin(descriptor.value, dest[prop] || {}) : exports.deepClone(descriptor.value);
                Object.defineProperty(dest, prop, descriptor);
            });
        }
    });
    return dest;
};


/**
 * Copies values to dest *ONLY* if they were not previously defined.
 * @param src
 * @param dest
 */
exports.merge = function merge(src, dest) {
    var sources = slice(arguments);
    dest = sources.pop();

    sources.forEach(function (source) {
        if (thing.isObject(source)) {
            Object.getOwnPropertyNames(source).forEach(function(prop) {
                if (thing.isUndefined(dest[prop])) {
                    Object.defineProperty(dest, prop, Object.getOwnPropertyDescriptor(source, prop));
                }
            });
        }
    });
    return dest;
};


/**
 * Copies value to dest *ONLY* if the are not defined, unless the value is an object itself,
 * then it is also merged and so on. Arrays are not merged, but cloned.
 * @param src
 * @param dest
 * @returns {*}
 */
exports.deepMerge = function deepMerge(src, dest) {
    var sources = slice(arguments);
    dest = sources.pop();

    sources.forEach(function (source) {
        if (thing.isObject(source)) {
            Object.getOwnPropertyNames(source).forEach(function(prop) {
                var descriptor = Object.getOwnPropertyDescriptor(src, prop);
                if (thing.isUndefined(dest[prop])) {
                    descriptor.value = exports.deepClone(descriptor.value);
                    Object.defineProperty(dest, prop, descriptor);
                } else if (thing.isObject(descriptor.value)) {
                    descriptor.value = deepMerge(descriptor.value, dest[prop] || {});
                    Object.defineProperty(dest, prop, descriptor);
                }
            });
        }
    });
    return dest;
};


exports.extend = function extend(ctor, superCtor, proto) {
    util.inherits(ctor, superCtor);
    if (thing.isObject(proto)) {
        exports.mixin(proto, ctor.prototype);
    }
};


exports.clone = exports.copy = function clone(src) {
    var dest = src;

    if (thing.isObject(src)) {
        dest = Array.isArray(src) ? [] : Object.create(Object.getPrototypeOf(src));
        Object.getOwnPropertyNames(src).forEach(function (prop) {
            Object.defineProperty(dest, prop, Object.getOwnPropertyDescriptor(src, prop));
        });
    }

    return dest;
};


exports.deepClone = exports.deepCopy = function deepClone(src) {
    var dest = src;

    if (thing.isObject(src)) {
        dest = Array.isArray(src) ? [] : Object.create(Object.getPrototypeOf(src));
        Object.getOwnPropertyNames(src).forEach(function (prop) {
            var descriptor = Object.getOwnPropertyDescriptor(src, prop);
            descriptor.value = deepClone(descriptor.value);
            Object.defineProperty(dest, prop, descriptor);
        });
    }

    return dest;
};
