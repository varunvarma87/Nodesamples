'use strict';

var Pkg = require('../package.json');
var Utils = require('./utils');
var Assert = require('assert');
var Request = require('./_wrap_request');

/**
 * Prepares and (potentially executes) an HTTP request.
 * @param method the request method.
 * @param options either a configuration object or string url.
 * @param body optional - usually used when a url instead of a configuration object is used to initiate request. Only on POST and PUT.
 * @param callback on completion handler. If not provided, end(callback) must be explicitly called on the returned request object, or piped somewhere.
 * @returns {Request}
 */
function _makeRequest(method, options, body, callback) {
    Assert.ok(Utils.isHttpMethod(method), 'Unrecognized HTTP method: ' + method);

    if (typeof body === 'function') {
        callback = body;
        body = undefined;
    }

    options = Utils.parseOptions(options);

    options.socketTimeout && Assert.equal(typeof options.socketTimeout, 'number', 'Expected socketTimeout to be a number.');
    options.responseTimeout && Assert.equal(typeof options.connectTimeout, 'number', 'Expected connectTimeout to be a number.');

    if (body && Utils.supportsBody(method)) {
        options.body = body;

        Assert.ok((options.body instanceof Buffer) || (typeof options.body === 'string'), 'Expected a buffer or string for body.');

        if (typeof options.body === 'string') {
            options.body = new Buffer(options.body, 'utf8');
        }

        options.headers['content-length'] = options.body.length;
    }

    if (!options.headers['user-agent']) {
        options.headers['user-agent'] = Utils.userAgentString(Pkg);
    }

    options.method = method;

    return Request(options, callback);
}

/**
 * Generic invocation.
 * @param options configuration object.
 * @param callback on completion handler.
 * @returns {*}
 */
function request(options, callback) {
    Assert.equal(typeof options, 'object', 'Expected a configuration object.');

    return _makeRequest(options.method, options, options.body, callback);
}

//Build helper methods for http operations. Example: httpunch.get, httpunch.post, etc.
Object.keys(Utils.HttpMethod).forEach(function (method) {
    var fn = function () {
        var args = Utils.sliceArgs(arguments);

        args.unshift(method);

        return _makeRequest.apply(null, args);
    };

    method = method.toLowerCase();

    module.exports[method] = fn;
});

module.exports.request = request;

module.exports.agents = require('./agents');

module.exports.utils = require('./utils');
