'use strict';

var assert = require('assert'),
    httpunch = require('httpunch'),
    objutil = require('objutil'),
    utils = require('../utils'),
    genericTransport = require('./generic'),
    querystring = require('querystring');

/**
 * Bridge transport communicates with the Java service bridge.
 * @type {exports}
 */
module.exports = function (config) {
    var transport = genericTransport(config);

    return function bridgeTransport(options, callback) {
        var req, clientInfo;

        assert.ok(options.service, 'service must be specified.');
        assert.ok(options.operation, 'operation must be specified.');

        clientInfo = options.clientInfo || {};
        options.headers = options.headers || {};

        objutil.mixin({
            'accept': 'application/json',
            'content-type': 'application/json'
        }, options.headers);

        options.method = 'post';
        options.path = '/webapps/servicebridge/services/invoke/' + options.service;

        options.body = JSON.stringify({
            serviceMethod: options.operation,
            data: options.data,
            calCorrelationId: options.headers['correlation-id'] || options.correlationId,
            clientInfo: {
                host: clientInfo.host,
                pid: clientInfo.pid,
                calPoolName: clientInfo.calPoolName,
                poolStack: clientInfo.poolStack
            }
        });

        return transport(options, function handleBridgeResponse(error, response) {
            var serverInfo;

            if (error) {
                callback(error);
                return;
            }

            if (response.body) {
                if (response.body.serverInfo) {
                    serverInfo = response.body.serverInfo;

                    response.headers.server_info = serverInfo.poolName + ':' + serverInfo.serviceName + '&' + querystring.stringify({
                        Host: serverInfo.host,
                        CalThreadId: serverInfo.calThreadId,
                        pid: serverInfo.pid,
                        TopLevelTxnStartTime: serverInfo.txnStartTime
                    });
                }
                
                response.body = response.body.body;
            }

            callback(null, response);
        });
    };
};
