/*global require:true, exports:true, module:true, console:true */
'use strict';
var assert = require('assert'),
    serviceEndpoints = require('./ServiceEndpoints'),
    ServiceHelper = require('./ServiceHelper'),
    jsonschema = require('json-schema'),
    bankSchema = require('./schema/bank-account'),
    creditBureauSchema = require('./schema/credit-bureau'),
    cardSchema = require('./schema/payment-card'),
    addwithdrawSchema = require('./schema/add-withdraw-balance'),
    clone = require('clone'),
    xpaypalcontext = require('./xpaypalcontext'),
    uuid = require('node-uuid'),
    services;

exports = module.exports = function (config, transport) {

    var operations = {

        invoke: function (serviceName, account, params, callback) {

            var serviceEndpoint = serviceEndpoints[serviceName],
                endPoint,
                headers,
                payload;

            if (serviceEndpoint.paramType === 'hybrid') {
                endPoint = ServiceHelper.formatEndpoint(serviceEndpoint, params.inline);
                payload = params.body;
            } else {
                endPoint = ServiceHelper.formatEndpoint(serviceEndpoint, params);
                payload = params;
            }

            if (typeof payload === 'function') {
                payload = null;
                callback = params;
            }

            headers = {};
            headers['X-PAYPAL-SECURITY-CONTEXT'] = clone(xpaypalcontext['X-PAYPAL-SECURITY-CONTEXT']);
            //ServiceHelper.generateXPaypalSecurityContext(headers, account);
            ServiceHelper.populateHeaders(headers, account);
            if (serviceEndpoint.needUniqueId) {
                headers['PayPal-Request-Id'] = uuid.v1().replace(/-/g, '');
            }
            if (serviceEndpoint.action === 'GET') {
                transport({
                    headers: headers,
                    qs: payload,
                    path: endPoint,
                    method: serviceEndpoint.action
                }, callback);
            } else {
                headers['CONTENT-TYPE'] = 'application/json';
                transport({
                    headers: headers,
                    body: JSON.stringify(payload),
                    path: endPoint,
                    method: serviceEndpoint.action
                }, callback);
            }
        },

        /*
        * Uses json-schema to validate a passed param object
        */

        validateSchema: function (params, schema) {
            var result = jsonschema.validate(params, schema);
            return result;
        },

        /*
        * Builds a json-schema validated bank model using the params passed
        * if params are not sufficient spits out errors, if not passes back a model
        sample Input:
        {
            accountNumber: "1234",
            fitstName: "acc"
            lastName: "def"
            type: "Checking"
            currency: "USD"
            bankName: "Wells Fargo"
            routingNumber1: "123456"
            routingNumber2: "234567" <optional>
            routingNumber3: "345678" <optional>
            bankCode: "abc" <optional>
            branchCode: "sunnyvale" <optional>
            branchLocationName: "", <optional>
            branchLocationCity: "", <optional>
            branchLocationCountry: "US"
         }
        sample Output:
        {
            err: 0 or [],
            model: a valid param json object or null (if errors)
        }

        */

        buildBankModel: function (params) {

            var bankModel = {};

            bankModel.account_number = params.accountNumber;
            bankModel.first_name = params.firstName;
            bankModel.last_name = params.lastName;
            bankModel.type = params.type;
            bankModel.currency = params.currency;
            bankModel.bank_details = {};

            bankModel.bank_details.bank_name = params.bankName;
            bankModel.bank_details.routing_number_1 = params.routingNumber1;
            bankModel.bank_details.routing_number_2 = params.routingNumber2;
            bankModel.bank_details.routing_number_3 = params.routingNumber3;
            bankModel.bank_details.check_digits = params.checkDigits;
            bankModel.bank_details.bank_code = params.bankCode;
            bankModel.bank_details.branch_code = params.branchCode;

            if (params.branchLocationName || params.branchLocationCity || params.branchLocationCountry) {
                bankModel.bank_details.branch_location = {};

                bankModel.bank_details.branch_location.name = params.branchLocationName;
                bankModel.bank_details.branch_location.city = params.branchLocationCity;
                bankModel.bank_details.branch_location.country = params.branchLocationCountry;
            }

            bankModel.date_of_birth = {};
            bankModel.date_of_birth.day = params.dobDay;
            bankModel.date_of_birth.month = params.dobMonth;
            bankModel.date_of_birth.year = params.dobYear;

            if (params.hash_token) {
                bankModel.hash_token = params.hash_token;
            }

            var results = this.validateSchema(bankModel, bankSchema);
            if (results.valid === true) {
                return { err: 0, model: bankModel};
            } else {
                return { err: results.errors, model: null};
            }

        },

        /* Build a DE bank Model.
         @Depricated : This method is depricated, please use buildBankModel method.
        */
        buildBankModelDE: function (params) {

            var bankModel = {};

            bankModel.account_number = params.accountNumber;
            bankModel.first_name = params.firstName;
            bankModel.last_name = params.lastName;
            bankModel.type = params.type;
            bankModel.currency = params.currency;
            bankModel.bank_details = {};

            bankModel.bank_details.bank_name = params.bankName;
            bankModel.bank_details.routing_number_1 = params.routingNumber1;
            bankModel.bank_details.routing_number_2 = params.routingNumber2;
            bankModel.bank_details.routing_number_3 = params.routingNumber3;
            bankModel.bank_details.bank_code = params.bankCode;
            bankModel.bank_details.branch_code = params.branchCode;

            if (params.branchLocationName || params.branchLocationCity || params.branchLocationCountry) {
                bankModel.bank_details.branch_location = {};

                bankModel.bank_details.branch_location.name = params.branchLocationName;
                bankModel.bank_details.branch_location.city = params.branchLocationCity;
                bankModel.bank_details.branch_location.country = params.branchLocationCountry;
            }

            bankModel.date_of_birth = {};
            bankModel.date_of_birth.day = params.dobDay;
            bankModel.date_of_birth.month = params.dobMonth;
            bankModel.date_of_birth.year = params.dobYear;

            var results = this.validateSchema(bankModel, bankSchema);
            if (results.valid === true) {
                return {
                    err: 0,
                    model: bankModel
                };
            } else {
                return {
                    err: results.errors,
                    model: null
                };
            }

        },
        /* Build a DE Add bank Model with Arvato.*/
        buildBankModelDEArvato: function (params) {

            var bankModel = {};

            bankModel.account_number = params.accountNumber;
            bankModel.first_name = params.firstName;
            if (params.middleName) {
                bankModel.middleName = params.middleName;
            }
            bankModel.last_name = params.lastName;
            bankModel.type = params.type;
            bankModel.currency = params.currency;
            bankModel.bank_details = {};

            bankModel.bank_details.bank_name = params.bankName;
            bankModel.bank_details.routing_number_1 = (params.routingNumber1) ? params.routingNumber1 : '0';

            if (params.branchLocationName || params.branchLocationCity || params.branchLocationCountry) {
                bankModel.bank_details.branch_location = {};

                bankModel.bank_details.branch_location.name = params.branchLocationName;
                bankModel.bank_details.branch_location.city = params.branchLocationCity;
                bankModel.bank_details.branch_location.country = params.branchLocationCountry;
            }

            bankModel.credit_bureau_request_vo = {
                client_id: params.paypalAccountNumber,
                trans_type: (params.transactionType) ? params.transactionType : 'other',
                use_case: (params.useCase) ? params.useCase : 'Add Bank Profile',
                beneficiary_details: {
                    first_name: params.firstName,
                    last_name: params.lastName,
                    date_of_birth: {
                        day: params.dobDay,
                        month: params.dobMonth,
                        year: params.dobYear
                    },
                    billing_address: {
                        address: {
                            line1: params.billingAddressLine1,
                            line2: params.billingAddressLine2,
                            city: params.billingAddressCity,
                            postal_code: params.billingAddressPostalCode,
                            country_code: params.billingAddressCountry
                        }
                    }
                }
            };

            var BankSchema = this.validateSchema(bankModel, bankSchema),
                CreditSchema = this.validateSchema(bankModel.credit_bureau_request_vo, creditBureauSchema);

            if (BankSchema.valid === true && CreditSchema.valid === true) {
                return {
                    err: 0,
                    model: bankModel
                };
            } else {
                return {
                    err: BankSchema.errors || CreditSchema.errors,
                    model: null
                };
            }

        },
        /*
        * Builds a json-schema validated card model using the params passed
        * if params are not sufficient spits out errors
        *
        sample Input:
        {
            cardNumber: '123456789012',
            type: 'VISA',
            firstName: 'Jane',
            lastName: 'Doe',
            expireYear: '2015',
            expireMonth: '07',
            cvv2: '123',
            issuerName: 'Bank Of America',
            addressId: '123', <optional either this or the actual address>
            billingAddressLine1: '1001 N 1st street',
            billingAddressLine2: '', <optional>
            city: 'San Jose',
            state: 'CA',
            zipcode: '95135',
            countryCode: 'US'
        }
        sample Output:
        {
            err: 0 or [],
            model: a valid param json object or null (if errors)
        }
        */
        buildCardModel: function (params) {
            var cardModel = {};

            cardModel.card_number = params.cardNumber;
            cardModel.type = params.type;
            cardModel.first_name = params.firstName;
            cardModel.last_name = params.lastName;
            cardModel.expire_year = params.expireYear;
            cardModel.expire_month = params.expireMonth;
            cardModel.cvv2 = params.cvv2;
            cardModel.issuer_name = params.issuerName;

            cardModel.start_month = params.startMonth;
            cardModel.start_year = params.startYear;
            cardModel.issue_number = params.issueNumber;

            cardModel.billing_address = {};

            cardModel.date_of_birth = {};
            cardModel.date_of_birth.day = params.dobDay;
            cardModel.date_of_birth.month = params.dobMonth;
            cardModel.date_of_birth.year = params.dobYear;

            if (typeof params.addressId !== 'undefined') {
                cardModel.billing_address.id = params.addressId;
            } else {
                cardModel.billing_address.address = {};

                cardModel.billing_address.address.line1 = params.billingAddressLine1;
                cardModel.billing_address.address.line2 = params.billingAddressLine2;
                cardModel.billing_address.address.city = params.city;
                cardModel.billing_address.address.state = params.state;
                cardModel.billing_address.address.postal_code = params.zipcode;
                cardModel.billing_address.address.country_code = params.countryCode;
            }

            var results = this.validateSchema(cardModel, cardSchema);

            if (results.valid === true) {
                return {
                    err: 0,
                    model: cardModel
                };
            } else {
                return {
                    err: results.errors,
                    model: null
                };
            }

        },

        buildCardUpdateModel: function (params, serviceData) {
            var cardModel = {};

            if (!serviceData) {
                return {
                    err : ['Missing Service Data'],
                    model: null
                };
            }

            //we need cvv2 to be able to update
            if (!params.cvv2) {
                return {
                    err: ['Missing cvv2'],
                    model: null
                };
            }
            cardModel.inline = {};
            cardModel.inline.id = serviceData.id;

            cardModel.body = serviceData;
            if (params.expireYear) {
                cardModel.body.expire_year = params.expireYear;
            }
            if (params.expireMonth) {
                cardModel.body.expire_month = params.expireMonth;
            }
            if (params.cvv2) {
                cardModel.body.cvv2 = params.cvv2;
            }

            if (params.addressId || params.billingAddressLine1) {
                cardModel.body.billing_address = {};
                if (typeof params.addressId !== 'undefined') {
                    cardModel.body.billing_address.id = params.addressId;
                } else {
                    cardModel.body.billing_address.address = {};

                    cardModel.body.billing_address.address.line1 = params.billingAddressLine1;
                    cardModel.body.billing_address.address.line2 = params.billingAddressLine2;
                    cardModel.body.billing_address.address.city = params.city;
                    cardModel.body.billing_address.address.state = params.state;
                    cardModel.body.billing_address.address.postal_code = params.zipcode;
                    cardModel.body.billing_address.address.country_code = params.countryCode;
                }
            }
            var results = this.validateSchema(cardModel.body, cardSchema);
            if (results.valid === true) {
                return {
                    err: 0,
                    model: cardModel
                };
            } else {
                return {
                    err: results.errors,
                    model: null
                };
            }

        },

        buildBankConfirmDoubleChargeModel: function (params) {
            var bankModel = {};
            Object.keys(params).forEach(function (key) {
                if (key === 'id') {
                    bankModel.inline = {};
                    bankModel.inline.id = params[key];
                } else {
                    bankModel.body = {};
                    bankModel.body.deposit_amounts = [];
                    bankModel.body.deposit_amounts.push({currency: params.charge1.currencyCode, amount: params.charge1.amount});
                    bankModel.body.deposit_amounts.push({currency: params.charge2.currencyCode, amount: params.charge2.amount});
                }
            });
            return bankModel;
        },

        buildCardConfirmDoubleChargeModel: function (params) {
            var cardModel = {};
            Object.keys(params).forEach(function (key) {
                if (key === 'id') {
                    cardModel.inline = {};
                    cardModel.inline.id = params[key];
                } else {
                    cardModel.body = {};
                    cardModel.body.deposit_amounts = [];
                    cardModel.body.deposit_amounts.push({currency: params.charge1.currencyCode, amount: params.charge1.amount});
                    cardModel.body.deposit_amounts.push({currency: params.charge2.currencyCode, amount: params.charge2.amount});
                }
            });
            return cardModel;
        },

        buildAddWithdrawModel: function (params) {
            var addWithdrawModel = {};

            addWithdrawModel.method = params.method;
            addWithdrawModel.financial_instrument_id = params.fiId;
            addWithdrawModel.amount = {};
            addWithdrawModel.amount.amount = params.amount;
            addWithdrawModel.amount.currency = params.currency;

            //TODO: to get updated request json schema from walletfiserv team
            var results = this.validateSchema(addWithdrawModel, addwithdrawSchema);
            if (results.valid === true) {
                return { err: 0, model: addWithdrawModel};
            } else {
                return { err: results.errors, model: null};
            }
        },

        /* Build a Confirm US Add bank Model with Yodlee. */

        buildConfirmBankYodleeModel: function (params) {

            var confirmBankModel = {
                "online_confirmation_form": {
                    "locale": "en_US",
                    "type": "login",
                    "fields": [{
                        "id": "LOGIN",
                        "value_type": "string",
                        "value": params.userName
                    }, {
                        "id": "PASSWORD",
                        "value_type": "string",
                        "value": params.password
                    }, {
                        "id": "PASSWORD1",
                        "value_type": "string",
                        "value": params.password
                    }]
                }
            };
            return { err: 0, model: confirmBankModel};
        },

        buildAnalyzeBankModel: function (params) {

            // Construct the Bank Data
            var bankData = {};
            bankData.account_number = params.accountNumber;
            bankData.type = params.type;
            bankData.currency_code = params.currency;
            bankData.data_format = params.dataFormat;

            bankData.issuer = {};
            bankData.issuer.country_code = params.country;

            bankData.beneficiaries = [];
            var beneficiary = {
                "date_of_birth" : params.dobYear + "-" + params.dobMonth + "-" + params.dobDay,
                "name" : {
                    "first_name" : params.firstName,
                    "last_name" : params.lastName
                }
            };
            bankData.beneficiaries.push(beneficiary);

            bankData.identifiers = [];
            var identifier = {
                "name" : "ROUTING_NUMBER_1",
                "value" : params.routingNumber1
            };
            bankData.identifiers.push(identifier);


            // Construct the Bank Model
            var bankModel = {};
            bankModel.bank_data = bankData;
            bankModel.user_country_code = params.country;

            return { err: 0, model: bankModel};
        }

    };

    Object.keys(serviceEndpoints).forEach(function (serviceName) {
        operations[serviceName] = function (account, params, callback) {
            return this.invoke(serviceName, account, params, callback);
        };
    });

    return operations;
};
