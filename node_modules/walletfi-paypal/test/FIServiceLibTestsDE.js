/*global describe:true, require:true, it:true , console:true*/
'use strict';

var assert = require('assert'),
    bankSchema = require('../schema/bank-account'),
    paymentCardSchema = require('../schema/payment-card'),
    async = require('async'),
    nconf = require("nconf"),
    account = {
        accountNumber: '2221725789318232150',
        id: '431501',
        actorSessionId: 'alsjdlf'
    },
    servicecore = require('servicecore'),
    FIGenerator = require('./test-utils/fiSourceGenerator.js');

servicecore.register('walletfi-paypal', require('../index'));

nconf.file({ file: './test/config/config.json' });
servicecore.configuration = nconf.get('services');

var fiServiceLib = servicecore.create('walletfi-paypal');

describe('FIServiceLibDE Tests', function () {
    var fiGenerator = new FIGenerator();

    it('should test a call to addBank, initiateConfirmBankByPaypalCode, deleteBank', function (done) {
        this.timeout(150000);
        var self = this;

        var fiId,
            authorizationMethod,
            addCallback = function (result, callback) {
                // //console.info("***** addCallback\nerr: " + JSON.stringify(err) + "\nresult: " + JSON.stringify(result));
                assert.equal(result.statusCode, 200);

                fiId = result.body.id;
                authorizationMethod = 'paypal-held-sepa-mandate';
                var param = {
                    id: fiId,
                    method: authorizationMethod
                };
                fiServiceLib.initiateAuthorization(account, param, callback);
            },
            initAuthorizationCallback = function (result, callback) {
                assert.equal(result.statusCode, 200);

                var param = {
                    id: fiId
                };
                fiServiceLib.getDirectMandate(account, param, callback);
            },
            getDirectMandateCallback = function (result, callback) {
                assert.equal(result.statusCode, 200);

                var param = {
                    id: fiId,
                    method: authorizationMethod
                };
                fiServiceLib.completeAuthorization(account, param, callback);
            },
            completeAuthorizationCallback = function (result, callback) {
                assert.equal(result.statusCode, 200);

                var param = {
                    id: fiId
                };
                fiServiceLib.intitiateConfirmBankByPaypalCode(account, param, callback);
            },
            initConfirmationCallback = function (result, callback) {
                //console.info("***** initConfirmationCallback\nerr: " + JSON.stringify(err) + "\nresult: " + JSON.stringify(result));
                assert.equal(result.statusCode, 200);

                var param = {
                    inline: {
                        id: fiId
                    },
                    body: {
                        confirmation_code: "6152"
                    }
                };
                fiServiceLib.confirmBankByPaypalCode(account, param, function (err, result) {
                    callback(null, result);
                });
            },
            completeConfirmationCallback = function (result, callback) {
                //TODO: can't really test confirm success case, would need to retrieve paypal code from DB
                //console.info("***** completeConfirmationCallback\nerr: " + JSON.stringify(err) + "\nresult:" + JSON.stringify(result));
                assert.equal(result.statusCode, 500);
                assert.equal(result.body.details[0].code, "4011");
                assert.equal(result.body.details[0].issue, "Confirmation Not Started");

                var param = {
                    id: fiId,
                    method: authorizationMethod
                };
                fiServiceLib.revokeAuthorization(account, param, callback);
                //fiServiceLib.deleteBank(account, param, callback);
            },
            revokeAuthCallback = function (result, callback) {
                assert.equal(result.statusCode, 200);

                var param = {
                    id: fiId
                };
                fiServiceLib.deleteBank(account, param, callback);
                //fiServiceLib.intitiateConfirmBankByPaypalCode(account, param, callback);
            },
            delCallback = function (result) {
                //console.info("***** deleteCallback\nerr: " + JSON.stringify(err) + "\nresult: " + JSON.stringify(result));
                assert.equal(result.statusCode, 200);
                done();
            },

            doTest = function (bankObj, callback) {
                self.timeout(150000);
                //console.info("called into doTest");
                var params = {
                    accountNumber: bankObj.accountNum,
                    firstName: "mike",
                    lastName: "john",
                    type: "Checking",
                    currency: "EUR",
                    dobDay: "11",
                    dobMonth: "12",
                    dobYear: "1988",
                    bankName: 'BBK',
                    routingNumber1: '10000000',
                    branchLocationCountry: 'DE'
                };

                var result = fiServiceLib.buildBankModel(params);
                assert.equal(result.err, 0);
                fiServiceLib.addBank(account, result.model, callback);
            },

            initial = function (callback) {
                //console.info("called into initial");
                fiGenerator.bankGenerate('Checking', function (err, result) {
                    assert.equal(err, null);
                    callback(null, result);
                });
            };

        async.waterfall([
            initial,
            doTest,
            addCallback,
            initAuthorizationCallback,
            getDirectMandateCallback,
            completeAuthorizationCallback,
            initConfirmationCallback,
            completeConfirmationCallback,
            revokeAuthCallback,
            delCallback
        ]);
    });

    it('should test a post call to addBankSource and delete call to delete bank', function (done) {
        this.timeout(50000);
        var callback = function (err, bankObj) {
            var params = {
                accountNumber: bankObj.accountNum,
                firstName: "mike",
                lastName: "john",
                type: "Checking",
                currency: "EUR",
                dobDay: "11",
                dobMonth: "12",
                dobYear: "1988",
                bankName: 'BBK',
                routingNumber1: '10000000',
                branchLocationCountry: 'DE',
                paypalAccountNumber: account.accountNumber,
                timeOnFile: '0',
                transactionType:'other',
                transactionAmount: '0',
                useCase: 'USE_CASE_OTHER',
                billingAddressLine1: '123 North First St',
                billingAddressLine2:'',
                billingAddressCity: 'Frankfurt',
                billingAddressPostalCode: '5469874',
                billingAddressCountry: 'DE'
            };
            var result = fiServiceLib.buildBankModelDEArvato(params);

            assert.equal(result.err, 0);

            var addCallback = function (err, result) {
                assert.equal(result.statusCode, 200);
                var param = {
                    id: result.body.id
                };
                var delCallback = function (err, result) {
                    assert.equal(result.statusCode, 200);
                    done();
                };
                fiServiceLib.deleteBank(account, param, delCallback);
            };
            fiServiceLib.addBank(account, result.model, addCallback);
        };

        fiGenerator.bankGenerate('Checking', callback);
    });
});

