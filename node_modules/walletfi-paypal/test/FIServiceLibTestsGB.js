/*global describe:true, require:true, it:true , console:true*/
'use strict';

var assert = require('assert'),
    bankSchema = require('../schema/bank-account'),
    paymentCardSchema = require('../schema/payment-card'),
    async = require('async'),
    nconf = require("nconf"),
    account = {
        accountNumber: '1832838871509188754',
        id : '217831',
        actorSessionId: 'alsjdlf'
    },
    servicecore = require('servicecore'),
    FIGenerator = require('./test-utils/fiSourceGenerator.js');

servicecore.register('walletfi-paypal', require('../index'));

nconf.file({ file: './test/config/config.json' });
servicecore.configuration = nconf.get('services');

var fiServiceLib = servicecore.create('walletfi-paypal');

describe('FIServiceLibGB Tests', function () {
    var fiGenerator = new FIGenerator();

    it('should test add card for GB with startDate and issueNumber', function (done) {
        this.timeout(60000);
        var callback = function (err, cardNum) {
            var ccNum = cardNum.replace('switch: ', '');
            var param = {
                cardNumber: ccNum,
                firstName: 'Steve',
                lastName: 'John',
                type: 'switch',
                expireMonth: '11',
                expireYear: '2018',
                cvv2: '041',
                addressId: '270393',
                startMonth: '8',
                startYear: '2013',
                issueNumber: '23'
            };
            var result = fiServiceLib.buildCardModel(param);
//            console.info("result:" + JSON.stringify(result));
            fiServiceLib.addPaymentCard(account, result.model, function (err, response) {
                assert.equal(response.statusCode, 200);
                var param = {
                    id: response.body.id
                };
                fiServiceLib.deletePaymentCard(account, param, function (err, response) {
                    assert.equal(response.statusCode, 200);
                    done();
                });
            });
        };
        fiGenerator.cardGenerate('switch', callback);
    });

    it('should test a post call to addPaymentCard, initiateConfirmCardByDoubleCharge, completeConfirmCardByDoubleCharge, delete call to deletePaymentCard', function (done) {
        this.timeout(60000);

        var fiId,
            delCallback = function (result, callback) {
//                console.info('delete callback');
                assert.equal(result.statusCode, 200);
                done();
            },
            completeConfirmationCallback = function (result, callback) {
                //TODO: can't really test confirm success case, would need to retrieve double charge from DB
//                console.info(' entering complete confirm');
                assert.equal(result.statusCode, 500);
//                console.info('error code:' + result.body.details[0].code);
                assert.equal(result.body.details[0].code, '4035');

                var param = {
                    id: fiId
                };

//                console.info('delete id:' + fiId);
                fiServiceLib.deletePaymentCard(account, param, callback);
            },
            initiateConfirmCallback = function (result, callback) {
//                console.info('entering initiate callback');
                assert.equal(result.statusCode, 200);
                var param = {
                    id: fiId,
                    charge1: {
                        currencyCode: 'GBP',
                        amount: '1.00'
                    },
                    charge2: {
                        currencyCode: 'GBP',
                        amount: '0.50'
                    }
                };
                result = fiServiceLib.buildCardConfirmDoubleChargeModel(param);

//                console.info('complete confirm model:' + JSON.stringify(result));
                fiServiceLib.completeConfirmCardByDoubleCharge(account, result, function (err, result) {
                    callback(null, result);
                });
            },
            addCallback = function (result, callback) {
//                console.info('entering add callback');
                assert.equal(result.statusCode, 200);
                fiId = result.body.id;
                var param = {
                    id: fiId
                };

//                console.info('initiate for:' + fiId);
                fiServiceLib.initiateConfirmCardByDoubleCharge(account, param, callback);
            },

            doTest = function (cardNum, callback) {
                var ccNum = cardNum.replace('switch: ', '');
//                console.info('cardNum:' + ccNum);
                var param = {
                    cardNumber: ccNum,
                    firstName: 'Steve',
                    lastName: 'John',
                    type: 'switch',
                    expireMonth: '11',
                    expireYear: '2018',
                    cvv2: '041',
                    addressId: '270393',
                    startMonth: '8',
                    startYear: '2013',
                    issueNumber: '23'
                };

                var result = fiServiceLib.buildCardModel(param);
//                console.info('card model:' + JSON.stringify(result));

                fiServiceLib.addPaymentCard(account, result.model, callback);
            },

            initial = function (callback) {
                fiGenerator.cardGenerate('switch', callback);
            };

        async.waterfall([
            initial,
            doTest,
            addCallback,
            initiateConfirmCallback,
            completeConfirmationCallback,
            delCallback
        ]);

    });

});