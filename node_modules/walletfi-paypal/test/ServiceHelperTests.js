var assert = require('assert'),
    clone = require('clone'),
    xpaypalcontext = require('../xpaypalcontext'),
    ServiceHelper = require('../ServiceHelper');

describe('ServiceHelperTests', function () {
    'use strict';
    var serverConfig = {
        "scheme": "https",
        "host": "stage2p2306.qa.paypal.com",
        "port": "12300"
    };

    it('should build the url without key', function (next) {
        var config = {
            'endpoint': '/v1/wallet/@me/financial-instruments/bank-accounts/<id>',
            'action': 'DELETE',
            'paramType': 'inlineParam',
            'needKey': false
        };
        var result = ServiceHelper.formatEndpoint(config, {id: '1234'});
        //console.log("result ****", result);
        assert.equal('/v1/wallet/@me/financial-instruments/bank-accounts/1234', result);
        next();
    });

    it('should build the url without key in middle', function (next) {
        var config = {
            'endpoint': '/v1/wallet/@me/financial-instruments/bank-accounts/<id>/initiate-confirmation/double-deposit',
            'action': 'POST',
            'paramType': 'inlineParam',
            'needKey': false
        };
        var result = ServiceHelper.formatEndpoint(config, {id: '1234'});
        assert.equal('/v1/wallet/@me/financial-instruments/bank-accounts/1234/initiate-confirmation/double-deposit', result);
        next();
    });

    it('should build the url without key in middle for yodlee', function (next) {
        var config = {
            'endpoint': '/v1/wallet/@me/financial-instruments/bank-accounts/<id>/initiate-confirmation/instant',
            'action': 'POST',
            'paramType': 'inlineParam',
            'needKey': false
        };
        var result = ServiceHelper.formatEndpoint(config, {id: '1234'});
        assert.equal('/v1/wallet/@me/financial-instruments/bank-accounts/1234/initiate-confirmation/instant', result);
        next();
    });

    it('should build the url with key', function (next) {
        var config = {
            'endpoint': '/v1/wallet/@me/financial-instruments/bank-accounts/<id>',
            'action': 'DELETE',
            'paramType': 'inlineParam',
            'needKey': true
        };
        var result = ServiceHelper.formatEndpoint(config, {id: '1234'});
        assert.equal('/v1/wallet/@me/financial-instruments/bank-accounts/id/1234', result);
        next();
    });

    it('should build the url with key', function (next) {
        var config = {
            'endpoint': '/v1/wallet/@me/financial-instruments/bank-accounts',
            'action': 'DELETE',
            'paramType': 'none'
        };
        var result = ServiceHelper.formatEndpoint(config, {id: '1234'});
        assert.equal('/v1/wallet/@me/financial-instruments/bank-accounts', result);
        next();
    });

    it('should build build the xPaypalSecurityContext given the account number and Id', function (next) {
        var account = {
                accountNumber: '1731511286119924231',
                id: '239510'
            },
            expected = '{"actor":{"account_number":"1731511286119924231","id":"239510","auth_claims":["USERNAME","PASSWORD"]},"scopes":["*"],"subjects":[{"subject":{"account_number":"1731511286119924231","auth_claims":["USERNAME","PASSWORD"],"auth_state":"LOGGEDIN"}}]}',
            actual,
            headers = clone(xpaypalcontext);

        ServiceHelper.generateXPaypalSecurityContext(headers, account);

        actual = headers['X-PAYPAL-SECURITY-CONTEXT'];

        assert.equal(expected, actual);
        next();
    });

    it('should build build the xPaypalSecurityContext given the account number, Id, and global session Id', function (next) {
        var account = {
                accountNumber: '1731511286119924231',
                actorSessionId: 'asjayfjktj',
                id: '239510'
            },
            expected = '{"actor":{"account_number":"1731511286119924231","id":"239510","auth_claims":["USERNAME","PASSWORD"]},"scopes":["*"],"subjects":[{"subject":{"account_number":"1731511286119924231","auth_claims":["USERNAME","PASSWORD"],"auth_state":"LOGGEDIN"}}],"global_session_id":"asjayfjktj"}',
            actual,
            headers = clone(xpaypalcontext);

        ServiceHelper.generateXPaypalSecurityContext(headers, account);

        actual = headers['X-PAYPAL-SECURITY-CONTEXT'];
        //console.log("security context is here", actual);

        assert.equal(expected, actual);
        next();
    });

    it('should build the risk headers given the accountNumber, id, ip, vid, entry_point', function (done) {
        var account = {
                accountNumber: '1731511286119924231',
                id: '239510',
                vid: '123456789',
                entryPoint: 'http://uri.paypal.com/Web/Server/8Ball/sendMoney',
                fso: '',
				clientMetadataId: 'cd6828e036ee11e595ae57ebaa42e2d6'
            },
            headers = clone(xpaypalcontext);

        ServiceHelper.populateHeaders(headers, account);

        assert.equal('123456789', headers['visitor_id']);
        assert.equal('http://uri.paypal.com/Web/Server/8Ball/sendMoney', headers['paypal-entry-point']);

        //rest all headers should be null as data wasn't available in account object
        assert.equal(null, headers['user-agent']);
        assert.equal(null, headers['fso_id']);
        assert.equal(null, headers['http_referer']);
        assert.equal(null, headers['lang']);
        assert.equal(null, headers['accept-language']);
        assert.equal(null, headers['os_type']);
        assert.equal(account.clientMetadataId, headers['PayPal-Client-Metadata-Id']);

        done();
    });

});
