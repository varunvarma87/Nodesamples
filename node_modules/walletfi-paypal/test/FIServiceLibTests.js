/*global describe:true, require:true, it:true , console.:true*/
'use strict';

var assert = require('assert'),
    bankSchema = require('../schema/bank-account'),
    paymentCardSchema = require('../schema/payment-card'),
    async = require('async'),
    nconf = require("nconf"),
    account = {
        accountNumber: '1224217259701946423',
        id: '342387',
        actorSessionId: 'ajsdlkfj'
    },
    servicecore = require('servicecore'),
    FIGenerator = require('./test-utils/fiSourceGenerator.js');

servicecore.register('walletfi-paypal', require('../index'));

nconf.file({ file: './test/config/config.json' });
servicecore.configuration = nconf.get('services');

var fiServiceLib = servicecore.create('walletfi-paypal');

describe('FIServiceLib Tests', function () {
    var fiGenerator = new FIGenerator();
    
    it('should validate json schema', function () {
        var instance = 64;
        var schema = { 'type': 'integer', 'multipleOf': 8 };
        var result = fiServiceLib.validateSchema(instance, schema);
        assert.equal(result.valid, true);
    });

    it('should fail validating json schema synchronously', function () {
        var instance = { 'location': { 'latitude': 48.8583, 'longitude': 2.2945 } };
        var schema = {
            'type': 'object',
            'properties': {
                'location': {
                    '$ref': 'http://json-schema.org/geo'
                }
            }
        };

        var result = fiServiceLib.validateSchema(instance, schema);
        assert.equal(result.valid, true);
    });

    it('should validate bank post json param', function () {
        var params = {
            account_number: '69418702',
            first_name: 'mike',
            last_name: 'john',
            type: 'Savings',
            currency: 'USD',
            bank_details: {
                bank_name: 'Bank of America',
                routing_number_1: '122199983',
                bank_code: 'BOFA',
                branch_code: 'XXX',
                branch_location: {
                    name: '3M',
                    city: 'Miami',
                    country: 'US'
                }
            }
        };

        var result = fiServiceLib.validateSchema(params, bankSchema);
        assert.equal(result.valid, true);
    });

    it('should build bankModel', function () {
        var param = {
            accountNumber: '12345',
            firstName: 'john',
            lastName: 'doe',
            type: 'Checking',
            currency: 'usd',
            bankName: 'wells fargo',
            routingNumber1: '123'
        };

        var result = fiServiceLib.buildBankModel(param);
        //console.info(JSON.stringify(result));
        assert.equal(result.model.account_number, '12345');

    });


    it('should build cardModel', function () {
        var param = {
            cardNumber: '12345',
            firstName: 'john',
            lastName: 'Doe',
            type: 'visa',
            issuerName: 'bank of america',
            expireMonth: '11',
            expireYear: '2012',
            cvv2: '123',
            billingAddressLine1: '111',
            street: 'n 1st street',
            city: 'san jose',
            state: 'ca',
            zipcode: '95135',
            countryCode: 'US'
        };
        var result = fiServiceLib.buildCardModel(param);
        //console.info(JSON.stringify(result));
        assert.equal(result.model.card_number, '12345');

    });

    it('should build updateCardModel', function () {
        var param = {
                expireMonth: '8',
                expireYear: '2012',
                cvv2: '123'
            },
            cardObj = {
                "id": "CC262145",
                "type": "visa",
                "issuer_name": "",
                "card_number_last_n": "4403",
                "expire_month": 12,
                "expire_year": 2018,
                "first_name": "The Cameron",
                "last_name": "US",
                "billing_address": {
                    "id": "432018",
                    "address": {
                        "line1": "3901 Lick Mill Blvd",
                        "line2": "",
                        "city": "Santa Clara",
                        "state": "CA",
                        "postal_code": "95054",
                        "country_code": "US"
                    }
                },
                "confirmation_status": "confirmed",
                "status": {
                    "value": "active",
                    "reason_code": "not_applicable"
                },
                "authorization_status": "authorized",
                "links": [
                    {
                        "href": "/v1/wallet/@me/financial-instruments/payment-cards/CC262145",
                        "rel": "self",
                        "method": "GET"
                    }
                ]
            };
        var result = fiServiceLib.buildCardUpdateModel(param, cardObj);
        assert.equal(result.err, 0);
        //console.info("model:" + JSON.stringify(result.model));
        assert.equal(result.model.inline.id, 'CC262145');
        assert.equal(result.model.body.expire_month, '8');

    });

    it('should test a get call to getAllFinancialInstruments', function (done) {
        this.timeout(60000);
        var callback = function (err, result) {
            //console.info('err' + err);
            //console.info('result' + JSON.stringify(result));
            assert.equal(result.statusCode, 200);
            //console.info(JSON.stringify(result.body));
            done();
        };
        fiServiceLib.getFinancialInstruments(account, null, callback);
    });

    it('should test a get call to getAllFinancialInstruments with no params', function (done) {
        this.timeout(60000);
        var callback = function (err, result) {
            assert.equal(result.statusCode, 200);
            //console.info(JSON.stringify(result.body));
            done();
        };
        fiServiceLib.getFinancialInstruments(account, callback);
    });

    it('should test a post call to addPaymentCard, put call to updatePaymentCard, initiateConfirmCardByPaypalCode, confirmCardByPaypalCode, delete call to deletePaymentCard', function (done) {
        this.timeout(100000);

        var fiId,
            delCallback = function (result, callback) {
                //console.info("delcallback");
                //console.info('************ in deltePaymentCard ' + JSON.stringify(result));
                assert.equal(result.statusCode, 200);
                done();
            },
            completeConfirmationCallback = function (result, callback) {
                //console.info("completeconfirm");
                //TODO: can't really test confirm success case, would need to retrieve paypal code from DB
                //console.info("\n\n\nerr:" + JSON.stringify(err) + ", result:" + JSON.stringify(result));
                assert.equal(result.statusCode, 500);
                assert.equal(result.body.details[0].code, "4050");
                var param = {
                    id: fiId
                };
                fiServiceLib.deletePaymentCard(account, param, callback);
            },
            initConfirmationCallback = function (result, callback) {
                //console.info("initiconfirm");
                //console.info("\n\n\nerr:" + JSON.stringify(err) + ", result:" + JSON.stringify(result));
                assert.equal(result.statusCode, 200);
                var param = {
                    inline: {
                        id: fiId
                    },
                    body: {
                        confirmation_code: "6152"
                    }
                };
                fiServiceLib.confirmCardByPaypalCode(account, param, function (err, result) {
                    callback(null, result);
                });
            },
            updateCallback = function (result, callback) {
                //console.info("updatecallback");
                fiId = result.body.id;
                //console.info("\n\n\nerr:" + JSON.stringify(err) + ", result:" + JSON.stringify(result));
                assert.equal(result.statusCode, 200);
                var param = {
                    id: fiId
                };
                fiServiceLib.initiateConfirmCardByPaypalCode(account, param, callback);
            },
            addCallback = function (result, callback) {
                //console.info("addcallback");
                //console.info("Addcallback\n\n\nerr:" + JSON.stringify(err) + ", result:" + JSON.stringify(result));
                assert.equal(result.statusCode, 200);
                var param = {
                    cvv2: '123',
                    expireYear: '2015',
                    expireMonth: '8'
                };
                result = fiServiceLib.buildCardUpdateModel(param, result.body);
                assert.equal(result.err, 0);
                fiServiceLib.updatePaymentCard(account, result.model, callback);
            },

            doTest = function (cardNum, callback) {
                //console.info("err:" + err);
                //console.info("carNum:" + cardNum);
                var param = {
                    cardNumber: cardNum,
                    firstName: 'john',
                    lastName: 'Doe',
                    issuerName: 'wells fargo',
                    type: 'VISA',
                    expireMonth: '11',
                    expireYear: '2018',
                    cvv2: '123',
                    billingAddressLine1: '111',
                    street: 'n 1st street',
                    city: 'san jose',
                    state: 'ca',
                    zipcode: '95135',
                    countryCode: 'US'
                };

                var result = fiServiceLib.buildCardModel(param);
                //console.info("calling into addPaymentCard");
                fiServiceLib.addPaymentCard(account, result.model, callback);
            },

            initial = function (callback) {
                fiGenerator.cardGenerate('VISA', callback);
            };

        async.waterfall([
            initial,
            doTest,
            addCallback,
            updateCallback,
            initConfirmationCallback,
            completeConfirmationCallback,
            delCallback
        ]);

    });

    it('should test a post call to addBankSource and delete call to delete bank', function (done) {
        this.timeout(50000);
        var callback = function (err, bankObj) {
            var params = {
                accountNumber: bankObj.accountNum,
                firstName: 'john',
                lastName: 'doe',
                type: 'Checking',
                currency: 'USD',
                bankName: bankObj.bankName,
                routingNumber1: bankObj.routingNum1,
                branchLocationCountry: 'US'
            };
            //console.info('params: ' + JSON.stringify(params));
            var result = fiServiceLib.buildBankModel(params);
            assert.equal(result.err, 0);

            var addCallback = function (err, result) {
                //console.info("\n\n\nerr:"+ JSON.stringify(err) + ", result:" +JSON.stringify(result));
                assert(result.statusCode);
                var param = {
                    id: result.body.id
                };
                var delCallback = function (err, result) {
                    //console.info('**** in delteBank ' + JSON.stringify(result));
                    assert(result.statusCode);
                    done();
                };
                fiServiceLib.deleteBank(account, param, delCallback);
            };
            fiServiceLib.addBank(account, result.model, addCallback);

        };

        fiGenerator.bankGenerate('Checking', callback);
    });

    it('should build AddWithdrawModel', function () {
        var param = {
            method: 'ach',
            fiId: 'BAHBM4NQ5G36UW6',
            amount: '20.00',
            currency: 'USD'
        };

        var result = fiServiceLib.buildAddWithdrawModel(param);
        //console.info(JSON.stringify(result));
        assert.equal(result.model.method, 'ach');
    });

    it('should test get balances', function (done) {
        var account = {
            accountNumber: '1168198438714581147',
            id: '30686'
        };

        fiServiceLib.getBalances(account, null, function (err, res) {
            assert.equal(res.statusCode, 200);
            done();
        });
    });

    it('should test add fund from bank', function (done) {
        this.timeout(50000);
        var param = {
                method: 'ach',
                fiId: 'BA4BPXN9MVRE72L',
                amount: '1.00',
                currency: 'USD'
            },
            result = fiServiceLib.buildAddWithdrawModel(param);

        assert.equal(result.err, 0);
//        console.log("------", result.model);
        fiServiceLib.addFunds(account, result.model, function (err, res) {
//            console.log("111111111", res.body);
            assert.equal(res.statusCode, 500);
            done();
        });
    });

    it('should test withdraw fund from bank', function (done) {
        var param = {
                method: 'ach',
                fiId: 'BA4BPXN9MVRE72L',
                amount: '1.00',
                currency: 'USD'
            },
            result = fiServiceLib.buildAddWithdrawModel(param);

        assert.equal(result.err, 0);
        fiServiceLib.withdrawFunds(account, result.model, function (err, res) {
            //NOTE: eventually the account will exceed monthly spending limit for many times
            if (res.statusCode !== 200) {
                assert.equal(res.statusCode, 500);
                assert(res.body.details[0].code);
            }
            done();
        });
    });

    it('should test analyze withdraw fund from bank', function (done) {
        var param = {
                method: 'ach',
                fiId: 'BA4BPXN9MVRE72L',
                amount: '2.00',
                currency: 'USD'
            },
            result = fiServiceLib.buildAddWithdrawModel(param);

        assert.equal(result.err, 0);
//        console.info('result:' + JSON.stringify(result));
        fiServiceLib.analyzeWithdrawFunds(account, result.model, function (err, res) {
            //NOTE: eventually the account will exceed monthly spending limit for many times
            if (res.statusCode !== 200) {
                assert.equal(res.statusCode, 500);
            } else {
                assert.equal(res.body.conversion_rate_info.exchange_rate, '0');
                assert.equal(res.body.amount_going_to_instrument.amount, '2.00');
                assert.equal(res.body.amount_going_to_instrument.currency, 'USD');
            }
            done();
        });
    });

    it('should test a post call to add yodlee ineligible bank and initiate yodlee confirmation', function (done) {
        this.timeout(50000);
        var param = {
            id: 'BAK2E6FQWRWYUXW'
        };
        //for routing number other than '999999989' yodlee intiation would return 500 Internal service error
        var yodleeInitiateCallback = function (err, result) {
            assert(result.statusCode);
            done();
        };
        fiServiceLib.intitiateConfirmBankByYodlee(account, param, yodleeInitiateCallback);
    });

    it('should test a post call to add yodlee eligible bank and initiate yodlee confirmation ', function (done) {
        this.timeout(50000);
        var callback = function (err, bankObj) {
            var params = {
                accountNumber: bankObj.accountNum,
                firstName: 'john',
                lastName: 'doe',
                type: 'Checking',
                currency: 'USD',
                bankName: bankObj.bankName,
                routingNumber1: '999999989',
                branchLocationCountry: 'US'
            };
            var result = fiServiceLib.buildBankModel(params);
            assert.equal(result.err, 0);

            var addCallback = function (err, result) {
                assert(result.statusCode);
                var param = {
                    id: result.body.id
                };
                var yodleeInitiateCallback = function (err, result) {
                    assert(result.statusCode);
                    done();
                };
                fiServiceLib.intitiateConfirmBankByYodlee(account, param, yodleeInitiateCallback);
            };
            fiServiceLib.addBank(account, result.model, addCallback);
        };
        fiGenerator.bankGenerate('Checking', callback);
    });

    it('should test a post call to add yodlee eligible bank and complete yodlee confirmation ', function (done) {
        this.timeout(90000);
        var callback = function (err, bankObj) {
            var fiId,
                params = {
                    accountNumber: bankObj.accountNum,
                    firstName: 'john',
                    lastName: 'doe',
                    type: 'Checking',
                    currency: 'USD',
                    bankName: bankObj.bankName,
                    routingNumber1: '999999989',
                    branchLocationCountry: 'US'
                };
            var result = fiServiceLib.buildBankModel(params);
            assert.equal(result.err, 0);

            var addCallback = function (err, result) {
                fiId = result.body.id;
                assert(result.statusCode);
                var param = {
                    id: fiId
                };
                var yodleeInitiateCallback = function (err, result) {
                    assert(result.statusCode);
                    var param = {
                        inline: {
                            id: fiId
                        },
                        body: {
                            "online_confirmation_form": {
                                "locale": "en_US",
                                "type": "login",
                                "fields": [
                                    {
                                        "id": "LOGIN",
                                        "value_type": "string",
                                        "value": "IAVSend.bank109"
                                    },
                                    {
                                        "id": "PASSWORD1",
                                        "value_type": "string",
                                        "value": "bank109"
                                    },
                                    {
                                        "id": "PASSWORD1",
                                        "value_type": "string",
                                        "value": "bank109"
                                    }
                                ],
                                "session_id": "TESTING23984704701234SESSID",
                                "timeout_msec": 0
                            }
                        }
                    };
                    var yodleeCompleteCallback = function (err, result) {
                        //yodlee will return 500 for incorrect username & password
                        assert(result.statusCode);
                        done();
                    };
                    fiServiceLib.confirmBankByYodlee(account, param, yodleeCompleteCallback);
                };
                fiServiceLib.intitiateConfirmBankByYodlee(account, param, yodleeInitiateCallback);
            };
            fiServiceLib.addBank(account, result.model, addCallback);
        };
        fiGenerator.bankGenerate('Checking', callback);
    });

    it('should test get Frictionless banks', function (done) {

        var param = {
                country: 'US',
                type: 'bank'
            };

        fiServiceLib.getFrictionLessBanks(account, param, function (err, res) {
            assert.equal(res.statusCode, 200);
            done();
        });
    });

    it('should test get Frictionless bank by routing number', function (done) {

        var param = {
                country: 'US',
                type: 'bank',
                routing_number:'999999989'
            };

        fiServiceLib.getFrictionLessBankByRoutingNumber(account, param, function (err, res) {
            assert.equal(res.statusCode, 200);
            done();
        });
    });
});
