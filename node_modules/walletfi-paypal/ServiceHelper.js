"use strict";

var ACTOR_TYPE = {
    NONE: 0,
    ANONYMOUS: 1,
    USER_LOGIN: 2,
    ADMIN: 3,
    SERVER: 4,
    GOD: 5,
    BATCH: 6,
    ANON_USER: 7,
    API: 8,
    GUEST_USER: 9,
    AUTHORIZED_API: 10,
    MANAGED_QUEUE: 11
};

module.exports = {

    formatEndpoint: function (config, params) {
        var formattedEndpoint = config.endpoint;
        if (config.paramType === 'inlineParam' || config.paramType === 'hybrid') {

            Object.keys(params).forEach(function (param) {
                var placeholder, replacement;
                placeholder = '<' + param + '>';
                if (~config.endpoint.indexOf(placeholder)) {
                    replacement = (config.needKey ? param + '/' : '') + params[param];
                    formattedEndpoint = formattedEndpoint.replace(placeholder, replacement);
                }
            });
        }
        return formattedEndpoint;
    },

    generateXPaypalSecurityContext: function (headers, account) {
        var placeholder,
            replacement;

        var xPaypalSecurityContext = JSON.parse(headers['X-PAYPAL-SECURITY-CONTEXT']);
        xPaypalSecurityContext.actor.account_number = account.accountNumber;
        xPaypalSecurityContext.actor.id = account.id;
        if (account.actorSessionId) {
            xPaypalSecurityContext.global_session_id = account.actorSessionId;
        }
        xPaypalSecurityContext.subjects[0].subject.account_number = account.accountNumber;
        headers['X-PAYPAL-SECURITY-CONTEXT'] = JSON.stringify(xPaypalSecurityContext);
    },

    populateHeaders: function (headers, account) {
        var xPaypalSecurityContext = JSON.parse(headers['X-PAYPAL-SECURITY-CONTEXT']);
        xPaypalSecurityContext.actor.account_number = account.accountNumber;
        xPaypalSecurityContext.actor.id = account.id;
        if (account.actorSessionId) {
            xPaypalSecurityContext.global_session_id = account.actorSessionId;
        }
        xPaypalSecurityContext.subjects[0].subject.account_number = account.accountNumber;
        xPaypalSecurityContext.subjects[0].subject.id = account.id;
        if (account.actorType === ACTOR_TYPE.GUEST_USER) {
            xPaypalSecurityContext.actor.auth_state = 'ANONYMOUS';
            xPaypalSecurityContext.actor.auth_claims = [];
            xPaypalSecurityContext.auth_state = 'ANONYMOUS';
            xPaypalSecurityContext.auth_claims = [];
            xPaypalSecurityContext.subjects[0].subject.auth_state = 'ANONYMOUS';
            xPaypalSecurityContext.subjects[0].subject.auth_claims = [];
        }

        headers['X-PAYPAL-SECURITY-CONTEXT'] = JSON.stringify(xPaypalSecurityContext);

        //add more headers with Risk data

        if (account.agent || account.httpUserAgent) {
            headers['user-agent'] = account.agent || account.httpUserAgent;
        }
        if (account.fso) {
            headers['fso_id'] = account.fso;
        }
        if (account.vid || account.visitorId) {
            headers['visitor_id'] = account.vid || account.visitorId;
        }
        if (account.entryPoint) {
            headers['paypal-entry-point'] = account.entryPoint;
        }
        if (account.referer || account.httpReferrer) {
            headers['http_referer'] = account.referer || account.httpReferrer;
        }
        if (account.lang) {
            headers['lang'] = account.lang;
        }
        if (account.http_accept_language || account.httpAcceptLang) {
            headers['accept-language'] = account.http_accept_language || account.httpAcceptLang;
        }
        if (account.os_type) {
            headers['os_type'] = account.os_type;
        }
        if (account.clientMetadataId) {
            headers['PayPal-Client-Metadata-Id'] = account.clientMetadataId;
        }
    }
};
