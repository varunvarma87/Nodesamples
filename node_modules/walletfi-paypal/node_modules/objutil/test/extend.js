/*global describe:false, it:false, before:false, after:false*/
'use strict';

var objutil = require('../index'),
    assert = require('assert');


describe('extend', function () {


    function BaseClass() {
        this._baseProperty = 'baseValue';
    }


    function SubClass() {
        SubClass.super_.apply(this, arguments);
        this._subProperty = 'subValue';
    }


    var prototype = {
        toString: function () {
            return this._baseProperty + ' ' + this._subProperty;
        }
    };


    var getset = {
        get subProperty () {
            return this._subProperty;
        },

        set subProperty (value) {
            this._subProperty = value;
        }
    };


    it('should handle direct extension', function () {
        objutil.extend(SubClass, BaseClass);

        var instance = new SubClass();
        assert(instance);
        assert(instance instanceof SubClass);
        assert(instance instanceof BaseClass);
        assert(Object.getPrototypeOf(instance) instanceof BaseClass);
        assert.equal(instance.constructor, SubClass);
        assert.equal(instance._baseProperty, 'baseValue');
        assert.equal(instance._subProperty, 'subValue');
    });


    it('should accept a prototype', function () {
        objutil.extend(SubClass, BaseClass, prototype);

        var instance = new SubClass();
        assert(instance);
        assert(instance instanceof SubClass);
        assert(instance instanceof BaseClass);
        assert(Object.getPrototypeOf(instance) instanceof BaseClass);
        assert.equal(instance.constructor, SubClass);
        assert.equal(instance._baseProperty, 'baseValue');
        assert.equal(instance._subProperty, 'subValue');
        assert.equal(instance.toString(), 'baseValue subValue');
    });


    it('should honor getters and setters', function () {
        objutil.extend(SubClass, BaseClass, getset);

        var instance = new SubClass();
        assert(instance);
        assert(instance instanceof SubClass);
        assert(instance instanceof BaseClass);
        assert(Object.getPrototypeOf(instance) instanceof BaseClass);
        assert.equal(instance.constructor, SubClass);
        assert.equal(instance._baseProperty, 'baseValue');
        assert.equal(instance._subProperty, 'subValue');
        assert.equal(instance.subProperty, 'subValue');
    });


    it.skip('should honor property metadata', function () {
        // TODO
    });

});
