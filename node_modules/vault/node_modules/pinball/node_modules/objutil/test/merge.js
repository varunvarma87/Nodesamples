/*global describe:false, it:false, before:false, after:false*/
'use strict';

var objutil = require('../index'),
    assert = require('assert');

describe('merge', function () {

    var src = { foo : 'foo', bar: 'bar' };
    var src2 = { baz: 'baz', bam: 'bam' };

    var getset = {
        _foo: 'foo',
        _bar: 'bar',
        get foo () {
            return this._foo;
        },
        set foo (value) {
            this._foo = value;
        },
        get bar () {
            return this._bar;
        },
        set bar (value) {
            this._bar = value;
        }
    };

    it('should merge two objects', function () {
        var dest = {};
        var merged = objutil.merge(src, dest);
        assert.strictEqual(dest, merged);
        assert(src !== dest);
        assert.equal(dest.foo, src.foo);
    });


    it('should only copy if a property is not defined', function () {
        var dest = { foo: 'baz' };
        objutil.merge(src, dest);
        assert(src !== dest);
        assert.strictEqual(dest.foo, 'baz');
        assert.strictEqual(dest.bar, src.bar);
    });


    it('should handle multiple sources', function () {
        var dest = { call: 'me maybe'};
        objutil.merge(src, src2, dest);
        assert(src !== dest);
        assert(src2 !== dest);
        assert.strictEqual(dest.foo, 'foo');
        assert.strictEqual(dest.bar, 'bar');
        assert.strictEqual(dest.baz, 'baz');
        assert.strictEqual(dest.bam, 'bam');
        assert.strictEqual(dest.call, 'me maybe');
    });


    it('should merge getters and setters', function () {
        var dest = { _foo: 'bar' };
        objutil.merge(getset, dest);
        assert(dest !== getset);
        assert.strictEqual(dest.foo, 'bar');
        assert.strictEqual(dest.bar, getset.bar);
    });

});
