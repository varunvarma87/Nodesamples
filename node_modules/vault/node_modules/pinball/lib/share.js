'use strict';

var assert = require('assert'),
    ppcrypt = require('./ppcrypt');


var hash = ppcrypt.hash;
var cipher = ppcrypt.cipher;
var SHA_MID = hash.SHA1_DIGEST_LENGTH / 2;


exports = module.exports = {

    create: function (password, data, degree) {
        var hashPwd, hashA, hashB, hashes, key, iv;

        assert(data);
        assert(Buffer.isBuffer(password));

        // Hash the password
        hashPwd = hash.sha1(password);

        // Hash the first half of the resulting password hash and keep the first 16 bytes
        hashA = hash.sha1(hashPwd.slice(0, SHA_MID));
        hashA.length = 16;

        // Hash the second half of the password hash and keep the first 16 bytes
        hashB = hash.sha1(hashPwd.slice(SHA_MID));
        hashB.length = 16;

        // Create the key from the first 24 bytes of the hashes and the initialization
        // vector from the remaining 8
        hashes = Buffer.concat([hashA, hashB]);
        key = hashes.slice(0, 24);
        iv  = hashes.slice(24);

        // Decrypt and return
        return {
            id: degree,
            data: cipher.undesx(data, key, iv, false)
        };
    }

};