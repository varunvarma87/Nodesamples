'use strict';

var assert = require('assert');


function equal(a, b) {
    var i, len;

    if (a.length !== b.length) {
        return false;
    }

    for (i = 0, len = a.length; i < len; i++) {
        if (a[i] !== b[i]) {
            return false;
        }
    }
    return true;
}


function tryPad(buffer, totalWidth, value, padImpl) {
    assert(!value || value <= 0xff, 'padding value too large. must fit in one byte.');
    assert(buffer.length <= totalWidth, 'oob');

    if (buffer.length === totalWidth) {
        return buffer;
    }

    return padImpl(buffer, totalWidth, value);
}



function padLeft(buffer, totalWidth, value) {
    var result;
    result = new Buffer(totalWidth);
    result.fill(value || 0x00);
    buffer.copy(result, totalWidth - buffer.length);
    return result;
}



function padRight(buffer, totalWidth, value) {
    var result;
    result = new Buffer(totalWidth);
    result.fill(value || 0x00);
    buffer.copy(result);
    return result;
}



exports = module.exports = {

    equal: equal,

    padLeft: function (buffer, totalWidth, value) {
        return tryPad(buffer, totalWidth, value, padLeft);
    },

    padRight: function (buffer, totalWidth, value) {
        return tryPad(buffer, totalWidth, value, padRight);
    }

};