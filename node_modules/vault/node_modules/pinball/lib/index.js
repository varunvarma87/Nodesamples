'use strict';

var cdb     = require('cdb'),
    path    = require('path'),
    assert  = require('assert'),
    apputil = require('./util/apputil'),
    LocalClient  = require('./localclient'),
    RemoteClient = require('./remoteclient');



/**
 * options = { name: '', dir: '', [operation: ''] }
 * @param options
 * @param callback
 */
function read(options, callback) {

    assert(options.name, 'service name parameter not defined');
    assert(options.dir, 'protected directory not defined');

    readConfig(options.dir, function (err, config) {
        var client, remote;

        if (err) {
            callback(err);
            return;
        }

        config.env = options.env;
        client = new LocalClient(config);
        client.sharePath = options.dir;
        client._autopass = exports._autopass;

        if (process.env.AUTHCODE) {
            remote = new RemoteClient(config);
            remote.authCode = process.env.AUTHCODE;
            remote.operation = options.operation || 'launch';
            remote.serviceName = options.name;
            remote.sharePath = options.dir;
            remote.fallback = client;
            client = remote;
        }

        client.getPin(callback);
    });

}


function readConfig(dir, callback) {
    var share = path.join(dir, 'SHARE.cdb');
    cdb.createReader(share).dump(function (err, config) {
        callback(err, apputil.normalizeConfig(config));
    });
}


exports = module.exports = {

    _autopass: undefined,

    read: read

};