'use strict';

var util = require('util'),
    read = require('read'),
    async  = require('async'),
    bignum = require('bignum'),
    share  = require('./share'),
    ppcrypt   = require('./ppcrypt'),
    PinClient = require('./baseclient'),
    pinutil   = require('./util/pinutil');


function LocalClient(config) {
    LocalClient.super_.apply(this, arguments);

    this._autopass    = undefined;
    this._minShares   = parseInt(config.min_shares  || 0, 10);
    this._pinLength   = parseInt(config.key_bytes   || 0, 10);
    this._saltLength  = parseInt(config.secret_salt || 0, 10);
    this._prime = config.prime; // hex encoded, so leave as string
    this._env = config.env;
    this.SHARE_PASSWORD = 'aardvark';
}

util.inherits(LocalClient, PinClient);




LocalClient.prototype._doGetPin = function (callback) {
    var that, shares;

    shares = [];
    that = this;

    async.whilst(

        function () {
            return shares.length < that._minShares;
        },

        function (next) {
            function decryptShare(err, input) {
                if (err) {
                    next(err);
                    return;
                }

                input = new Buffer(input.trim(), 'ascii');
                shares.push(that._decryptShare(input));
                input.fill(0);
                next();
            }

            that._readStdin(decryptShare);
        },

        function (err) {
            var prime, pin;

            if (err) {
                callback(err);
                return;
            }

            // All shares have been read, so combine and desalinate
            prime = (that._prime && bignum(that._prime, 16)) || ppcrypt.maths.createPrime(that._pinLength);
            pin = ppcrypt.shamir.join(shares, prime);
            pin = pinutil.removeSalt(pin, that._pinLength, that._saltLength);
            if (pin) {
                callback(null, pin.toString('base64'));
            } else {
                callback('Application attempted to be started with an incorrect or no SHARE password; AUTHCODE not set in evvironment either', null);
            }
        }

    );
};


LocalClient.prototype._readStdin = function (callback) {
    // TODO: Autopass needs to support multiple shares with different passwords.
    if (this._autopass) {
        callback(null, this._autopass);
        return;
    }
    var sharepwd = process.env.SHARE_PWD;
    if (!this._env || this._env === 'DEVELOPMENT') {
        sharepwd = this.SHARE_PASSWORD;
    }
    if (sharepwd) {
        callback(null, sharepwd);
        return;
    }
    read({ prompt: 'Enter a share password: ', silent: true }, callback);
};


LocalClient.prototype._decryptShare = function (password) {
    var prefix, data, degree;
    prefix = pinutil.getPrefix(password, this._totalShares);
    data   = pinutil.readShare(this._sharePath, prefix);
    degree = pinutil.getDegree(prefix);
    return share.create(password, data, degree);
};


exports = module.exports = LocalClient;
