'use strict';

var bignum = require('bignum'),
    assert = require('assert');


var ZERO = bignum(0);
var ONE = bignum(1);



function split() {
    throw new Error('Not implemented');
}


function join(shares, prime) {
    var result;

    if (shares.length === 1) {
        return shares[0].data;
    }

    assert(distinct(shares));
    result = ZERO;

    shares.forEach(function (share) {
        var num, den, x, y, tmp;

        num = ONE;
        den = ONE;
        x   = bignum(share.id);
        y   = bignum.fromBuffer(share.data);

        shares.forEach(function (curr) {
            var currX, tmp;

            if (share === curr) {
                return;
            }

            currX = bignum(curr.id);
            num = num.mul(currX);
            num = num.mod(prime);

            tmp = x.sub(currX);
            tmp = tmp.mod(prime);

            den = den.mul(tmp);
            den = den.mod(prime);
        });

        tmp = num.mul(y);
        tmp = tmp.mod(prime);

        tmp = tmp.mul(den.invertm(prime));
        tmp = tmp.mod(prime);

        result = result.add(tmp);
        result = result.mod(prime);
    });

    return result.toBuffer();
}


function distinct(shares) {
    if (shares.length === 1) {
        return true;
    }

    var def = {};
    shares.forEach(function (share) {
        def[share.id] = true;
    });

    return Object.keys(def).length === shares.length;
}


exports = module.exports = {

    split: split,

    join: join

};