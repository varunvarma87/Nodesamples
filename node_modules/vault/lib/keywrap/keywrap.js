'use strict';

var assert = require('assert'),
    crypto = require('crypto');



function wrap(input, kek, iv) {
    var inLength, ivLength, block, cipher, buffer, ciphertext;
    var t, k, j, i;

    assert(input, 'Input is null or not defined');
    assert(kek, 'kek is null or not defined');
    assert(iv, 'iv is null or not defined');

    inLength = input.length;
    ivLength = iv.length;

    var n = inLength / 8;
    if ((n * 8) !== inLength) {
        return null;
    }

    block = new Buffer(inLength + ivLength);
    iv.copy(block, 0, 0, ivLength);
    input.copy(block, ivLength, 0, inLength);

    buffer = new Buffer(8 + ivLength);


    for (j = 0; j < 6; j++) {
        for (i = 1; i <= n; i++) {

            block.copy(buffer, 0, 0, ivLength);
            block.copy(buffer, ivLength, 8 * i, (8 * i) + 8);

            cipher = createCipher(kek.toString('binary'));
            ciphertext = cipher.update(buffer, undefined, 'hex');
            ciphertext += cipher.final('hex');
            buffer = new Buffer(ciphertext, 'hex');

            t = n * j + i;
            for (k = 1; t !== 0; k++) {
                buffer[ivLength - k] ^= t;
                t >>>= 8;
                //t = 0;
            }


            arraycopy(buffer, 0, block, 0, 8);
            arraycopy(buffer, 8, block, 8 * i, 8);
        }
    }

    return block;
}


function unwrap(input, kek, iv) {
    var inLength, ivLength, block, a, buffer, cipher, ciphertext;
    var t, k, j, i;

    assert(input, 'Input is null or not defined');
    assert(kek, 'kek is null or not defined');
    //assert(iv, 'iv is null or not defined');

    inLength = input.length;
    ivLength = 8;

    var n = inLength / 8;
    if ((n * 8) !== inLength) {
        return null;
    }

    block = new Buffer(inLength - ivLength);
    a = new Buffer(ivLength);
    buffer = new Buffer(8 + ivLength);

    arraycopy(input, 0, a, 0, ivLength);
    arraycopy(input, ivLength, block, 0, inLength - ivLength);

    n -= 1;

    for (j = 5; j >= 0; j--) {
        for (i = n; i >= 1; i--) {
            arraycopy(a, 0, buffer, 0, ivLength);
            arraycopy(block, 8 * (i - 1), buffer, ivLength, 8);

            t = n * j + i;
            for (k = 1; t !== 0; k++) {
                buffer[ivLength - k] ^= t;
                t >>>= 8;
                //	t = 0;
            }

            cipher = createDecipher(kek.toString('binary'));
            ciphertext = cipher.update(buffer.toString('binary'), 'binary', 'binary');
            ciphertext += cipher.final('binary');
            buffer = new Buffer(ciphertext, 'binary');

            arraycopy(buffer, 0, a, 0, 8);
            arraycopy(buffer, 8, block, 8 * (i - 1), 8);
        }
    }

    if (iv) {
        if (a.toString('hex') !== iv.toString('hex')) {
            return null;
        }
        return block;
    }

    var ivAndBlock = new Buffer(8 + block.length);
    arraycopy(a, 0, ivAndBlock, 0, 8);
    arraycopy(block, 0, ivAndBlock, 8, block.length);
    return ivAndBlock;
}


function arraycopy(src, srcPos, dest, destPos, length) {
    // Plz don't pass nulls
    srcPos = isNaN(srcPos) ? 0 : srcPos;
    destPos = isNaN(destPos) ? 0 : destPos;
    length = isNaN(length) ? src.length : length;
    src.copy(dest, destPos, srcPos, srcPos + length);
}

// OMG!OMG!OMG! THANK YOU!! -> http://stackoverflow.com/questions/7787773/encrypt-with-node-js-crypto-module-and-decrypt-with-java-in-android-app
function createCipher(key) {
    var cipher = crypto.createCipheriv('aes-' + (key.length * 8) + '-ecb', key, '');
    cipher.setAutoPadding(false);
    return cipher;
}


function createDecipher(key) {
    var decipher = crypto.createDecipheriv('aes-' + (key.length * 8) + '-ecb', key, '');
    decipher.setAutoPadding(false);
    return decipher;
}


exports = module.exports = {

    wrap: wrap,

    unwrap: unwrap,

    createCipher: createCipher,

    createDecipher: createDecipher

};