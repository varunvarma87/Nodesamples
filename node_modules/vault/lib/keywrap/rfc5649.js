'use strict';

var keywrap = require('./keywrap');


var ALTERNATE_IV =  new Buffer([ 0xA6, 0x59, 0x59, 0xA6 ]);


function wrap(input, kek) {
    var len, iv, bytes, plaintext, cipher, result;

    len = input.length;

    iv = new Buffer(8);
    ALTERNATE_IV.copy(iv, 0);
    iv.writeInt32BE(len, 4);

    bytes = (len + 7) & ~7;
    if (bytes === 8) {
        plaintext = new Buffer(8 + len);
        iv.copy(plaintext, 0, 8);
        input.copy(plaintext, 8, len);

        cipher = keywrap.createCipher(kek);
        result = cipher.update(plaintext.toString('binary'));
        result += cipher.final();
        return new Buffer(result, 'binary');
    }

    // TODO: would like to know why this is done.
    result = new Buffer(bytes);
    result.fill(0);
    input.copy(result, 0);
    return keywrap.wrap(result, kek, iv);
}


function unwrap(input, kek) {
    var len, octets, cipher, result;

    len = input.length;
    octets = len / 8;

    if ((octets === 1) || ((octets * 8) !== len)) {
        return undefined;
    }

    if (octets === 2) {
        cipher = keywrap.createCipher(kek);
        result = cipher.update(input.toString('binary'));
        result += cipher.final();
    } else {
        result = keywrap.unwrap(input, kek);
    }

    var pad;
    if (result.slice(0, 4).toString('hex') === ALTERNATE_IV.toString('hex')) {
        len = result.readInt32BE(4);
        pad = input.length - 8 - len;

        if ((pad < 0) || (pad > 8)) {
            return undefined;
        }

        var zeroes = new Buffer(pad);
        zeroes.fill(0);

        if (zeroes.toString('hex') === result.slice(8 + len).toString('hex')) {
            return result.slice(8, 8 + len);
        }
    }
    return undefined;
}


exports = module.exports = {

    wrap: wrap,

    unwrap: unwrap

};
