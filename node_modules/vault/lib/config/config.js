'use strict';

var fs = require('fs');


function readLines(path, callback) {
    var reader, lines, remainder;

    reader = fs.createReadStream(path, { encoding: 'utf8' });
    lines = [];
    remainder = '';

    reader.on('data', function (str) {
        var matcher;

        str = remainder + str;
        while (matcher = str.match(/\r?\n/)) {
            lines.push(str.substr(0, matcher.index));
            str = str.slice(matcher.index + 1);
        }

        remainder = str;
    });

    reader.on('end', function () {
        callback(null, lines);
    });

    reader.on('error', callback);
}



function parseLines(lines) {
    return lines.map(function (line) {
        var tuple;

        tuple = partition(line, '#');
        tuple = partition(tuple[2], '=');
        tuple.splice(1, 1);

        return tuple.map(function (str) {
            return str ? str.trim() : '';
        });
    });
}



function partition(str, del) {
    var index, tuple;

    index = str.indexOf(del);
    tuple = [];
    tuple[2] = str;

    if (~index) {
        tuple[0] = str.slice(0, index);
        tuple[1] = del;
        tuple[2] = str.substr(index + del.length);
    }

    return tuple;
}



function load(file, callback) {
    readLines(file, function (err, lines) {
        var raw;

        if (err) {
            callback(err);
            return;
        }

        raw = Object.create(null);

        // Populate the config object
        parseLines(lines).forEach(function (tuple) {
            tuple[0] && (raw[tuple[0]] = tuple[1]);
        });

        callback(null, wrap(raw));
    });
}


function wrap(raw) {
    var cache = Object.create(null);

    return {

        _raw: raw,

        transform: function (transformer) {
            Object.keys(raw).forEach(function (key) {
                cache[key] = transformer(key, cache[key] || raw[key]);
            });
        },

        get: function (key) {
            return cache[key] || raw[key];
        },

        set: function (key, value) {
            raw[key] = value;
        },

        del: function (key) {
            cache[key] = raw[key] = undefined;
        },

        contains: function (key) {
            return (key in raw);
        }

    };
}



exports = module.exports = {

    _readLines: readLines,

    _parseLines: parseLines,

    _partition: partition,

    load: load

};