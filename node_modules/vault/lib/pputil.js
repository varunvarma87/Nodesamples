'use strict';


function rightPad(str, chr, size) {
    while (str < size) {
        str += chr;
    }
    return str;
}


function leftPad(str, chr, size) {
    while (str.length < size) {
        str = chr + str;
    }
    return str;
}


function isBase64(key) {
    return !key.indexOf('b64_') || isEncrypted(key);
}


function isEncrypted(key) {
    return !key.indexOf('encrypted_');
}


function base64Decode(value) {
    value = value.replace(/\-/g, '+');
    value = value.replace(/\./g, '/');

    if (!~value.indexOf('=')) {
        value = rightPad(value, '=', value.length + (value % 4));
    }

    return new Buffer(value, 'base64');
}


function base64Encode(buffer) {
    //This is the PayPal base64 encoding and not standard RFC as  mentioned in
    //http://xotoolslvs01.qa.paypal.com/gitsource/xref/Infrastructure__infra__master/github/all/infra/utility/transport/encoding/base64.cpp
    var str;
    str = buffer.toString('base64');
    str = str.replace(/\+/g, '-');
    str = str.replace(/\//g, '.');
    str = str.replace(/\={0,2}$/, '');
    return str;
}


exports = module.exports = {

    isBase64: isBase64,

    isEncrypted: isEncrypted,

    base64Decode: base64Decode,

    base64Encode: base64Encode

};
