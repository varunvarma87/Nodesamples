'use strict';

var fs = require('fs'),
    path = require('path'),
    util = require('util'),
    async = require('async'),
    assert = require('assert'),
    pputil = require('../pputil');



function readFiles(dir, files, callback) {
    Object.keys(files).forEach(function (file) {
        files[file] = path.join(dir, files[file]);
    });

    function readFile(file, next) {
        fs.readFile(files[file], function (err, data) {
            files[file] = data;
            next();
        });
    }

    async.each(Object.keys(files), readFile, function () {
        callback(null, files);
    });
}


exports = module.exports = {

    supports: function (options, callback) {
        var required = [
            options.keyName,
            options.certName
        ];

        required = required.map(function (file) {
            return path.join(options.dir, file);
        });

        // If the pem files are available, choose this package type
        async.every(required, fs.exists, function (result) {
            callback(null, result);
        });
    },


    create: function (options, config, callback) {
        var passphrase, key, files;

        passphrase = options.passphrase;

        if (!passphrase) {
            key = util.format('encrypted_%s_key_passphrase', options.name);
            passphrase = config.get(key);
        }

        if (!passphrase) {
            key = 'encrypted_cert_password';
            passphrase = config.get(key);
        }

        assert(passphrase, 'Passphrase not found.');
        passphrase = pputil.base64Encode(passphrase);


        files = {
            'key':     options.keyName,
            'cert':    options.certName,
            'clients': options.trustedClientsName,
            'ca':      options.trustedServersName
        };

        function create(err, files) {
            if (err) {
                callback(err);
                return;
            }

            config.set('client_credentials', Object.freeze({
                passphrase: passphrase,
                key:  files.key,
                cert: files.cert,
                ca:   files.ca
            }));

            if (files.clients) {
                config.set('server_credentials', Object.freeze({
                    passphrase: passphrase,
                    key:  files.key,
                    cert: files.cert,
                    ca:   files.clients
                }));
            }

            callback(null, config);
        }

        readFiles(options.dir, files, create);
    }

};