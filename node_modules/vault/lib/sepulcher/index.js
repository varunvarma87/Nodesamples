'use strict';

var async = require('async'),
    classic = require('./classic'),
    keystore = require('./keystore'),
    clientsessions = require('./clientsessions'),
    serversessions = require('./serversessions');


/**
 *
 * Determine protected mode (Java or C++)
 *  - if protected.jks then Java
 *  - if {name}_cert.pem and {name}_key.pem then C++
 *
 *
 * Ensure {name}_protected.cfg
 *
 * If !PIN provided
 *   read PIN
 *
 * set PIN
 *
 * Read {name}_protected.cfg
 *
 * Fork on Mode
 */
exports = module.exports = {


    create: function (options, config, callback) {

        var implementations = [classic, keystore, clientsessions, serversessions];

        function isSupported(impl, next) {
            impl.supports(options, function (err, supported) {
                next(!err && supported);
            });
        }

        function create(config, impl, next) {
            if (!impl) {
                next(new Error('Invalid or unknown package format.'));
                return;
            }
            impl.create(options, config, next);
        }

        async.filter(implementations, isSupported, function (results) {
            async.reduce(results, config, create, callback);
        });

    }


};
