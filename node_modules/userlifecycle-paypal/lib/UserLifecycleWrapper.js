'use strict';

var camelscore = require('camelscore');

exports = module.exports = function (config, transport) {
	
    return {
		/**
		 * generate_new_ids
		 * @param request
		 * @param callback
		 */
		generate_new_ids: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::GenerateNewIdsRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'generate_new_ids',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * modify_user_data
		 * @param request
		 * @param callback
		 */
		modify_user_data: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::ModifyUserDataRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'modify_user_data',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * account_lifecycle
		 * @param request
		 * @param callback
		 */
		account_lifecycle: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::AccountLifecycleRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'account_lifecycle',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * party_lifecycle
		 * @param request
		 * @param callback
		 */
		party_lifecycle: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::PartyLifecycleRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'party_lifecycle',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * access_point_lifecycle
		 * @param request
		 * @param callback
		 */
		access_point_lifecycle: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::AccessPointLifecycleRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'access_point_lifecycle',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * user_property_lifecycle
		 * @param request
		 * @param callback
		 */
		user_property_lifecycle: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::UserPropertyLifecycleRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'user_property_lifecycle',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * create_identity_partner_app
		 * @param request
		 * @param callback
		 */
		create_identity_partner_app: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::CreateIdentityPartnerAppRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'create_identity_partner_app',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * update_identity_partner_app
		 * @param request
		 * @param callback
		 */
		update_identity_partner_app: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::UpdateIdentityPartnerAppRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'update_identity_partner_app',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * delete_identity_partner_app
		 * @param request
		 * @param callback
		 */
		delete_identity_partner_app: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::DeleteIdentityPartnerAppRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'delete_identity_partner_app',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * create_identity_access_point
		 * @param request
		 * @param callback
		 */
		create_identity_access_point: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::CreateIdentityAccessPointRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'create_identity_access_point',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * update_identity_access_point
		 * @param request
		 * @param callback
		 */
		update_identity_access_point: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::UpdateIdentityAccessPointRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'update_identity_access_point',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * delete_identity_access_point
		 * @param request
		 * @param callback
		 */
		delete_identity_access_point: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::DeleteIdentityAccessPointRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'delete_identity_access_point',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * create_account
		 * @param request
		 * @param callback
		 */
		create_account: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::CreateAccountRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'create_account',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * update_account_entities
		 * @param request
		 * @param callback
		 */
		update_account_entities: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::UpdateAccountEntitiesRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'update_account_entities',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * remove_login_entities
		 * @param request
		 * @param callback
		 */
		remove_login_entities: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::RemoveLoginEntitiesRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'remove_login_entities',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * request_mail_password
		 * @param request
		 * @param callback
		 */
		request_mail_password: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::RequestMailPasswordRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'request_mail_password',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * request_instant_password
		 * @param request
		 * @param callback
		 */
		request_instant_password: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::RequestInstantPasswordRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'request_instant_password',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * add_account_entities
		 * @param request
		 * @param callback
		 */
		add_account_entities: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::AddAccountEntitiesRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'add_account_entities',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * remove_account_entities
		 * @param request
		 * @param callback
		 */
		remove_account_entities: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::RemoveAccountEntitiesRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'remove_account_entities',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * add_login_entities
		 * @param request
		 * @param callback
		 */
		add_login_entities: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::AddLoginEntitiesRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'add_login_entities',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		},
		
		/**
		 * downgrade_user_group
		 * @param request
		 * @param callback
		 */
		downgrade_user_group: function (request, callback) {
			request = (config.asfSchemaOverride)? camelscore.underscorify(request) : request;
			var payload = transport.vo('User::DowngradeUserGroupRequest', request);
			
			transport({
		        service: 'User::UserLifecycle',
		        operation: 'downgrade_user_group',
		        data: payload
		    }, function (error, response) {
		    	if (config.asfSchemaOverride && response && response.body) {
		    		response.body = camelscore.camelize(response.body);
		    	}
		    	callback(error, response);
		    });
		}
		
	};
};