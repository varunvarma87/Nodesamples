/*global describe:false, it:false, before:false, beforeEach:false, after:false, afterEach:false*/
'use strict';

var userlifecycle = require('../index'),
    servicecore = require('servicecore'),
    useraccesscontrol = require('useraccesscontrol-paypal'),
    vault = require('vault'),
    path = require('path'),
    nconf = require('nconf'),
    assert = require('assert');

servicecore.register('userlifecycle-paypal', userlifecycle);

nconf.file({ file: './test/config.json' });

describe("Testing UserLifecycle", function () {

	var updated_client_actor;

	before(function (next) {
        this.timeout(5000);

        process.env.SHARE_PWD = 'aardvark';

        var options = {
            dir:        path.join(process.cwd() + '/node_modules', 'testkeystore')
        };

        vault.create(options, function (err, pkg) {
            nconf.set('services:servicecore:sessions', pkg.getClientSessions());

            var credentials = pkg.getClientCredentials();

            Object.getOwnPropertyNames(credentials).forEach(function (key)  {
                nconf.set('services:servicecore:' + key, credentials[key]);
            });

            servicecore.configuration = nconf.get('services');

            next();
        });
    });

	it("Get actor from UserAccessControl in userauthserv", function (next) {
        this.timeout(5000);
        var authReqAlias = {
            claims: [
                {
                    type: 0,
                    value: "sparta@paypal.com"
                },
                {
                    type: 1,
                    value: "11111111"
                }
            ]
        };
        var useraccesscontrolClient = servicecore.create('useraccesscontrol-paypal');
        useraccesscontrolClient.create_token(authReqAlias, function (error, result) {
            updated_client_actor = result.body.result.updated_client_actor;
            assert(!error && result.body);
            assert(updated_client_actor);
            next();
        });
    });

	it("generate_new_ids", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.generate_new_ids(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("modify_user_data", function (next) {
		this.timeout(5000);
		var payload = {
            account_number : updated_client_actor.actor_account_number,
            client_actor : updated_client_actor,
            new_address : [
                {
                    address1: "2211 N First Street",
                    address2: "PayPal",
                    zip: "95131",
                    city: "San Jose",
                    state : "CA",
                    iso_country: "US"
                }
            ]
        },
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.modify_user_data(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("account_lifecycle", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.account_lifecycle(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("party_lifecycle", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.party_lifecycle(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("access_point_lifecycle", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.access_point_lifecycle(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("user_property_lifecycle", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.user_property_lifecycle(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("create_identity_partner_app", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.create_identity_partner_app(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("update_identity_partner_app", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.update_identity_partner_app(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("delete_identity_partner_app", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.delete_identity_partner_app(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("create_identity_access_point", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.create_identity_access_point(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("update_identity_access_point", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.update_identity_access_point(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("delete_identity_access_point", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.delete_identity_access_point(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("create_account", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.create_account(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("update_account_entities", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.update_account_entities(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("remove_login_entities", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.remove_login_entities(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("request_mail_password", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.request_mail_password(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("request_instant_password", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.request_instant_password(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("add_account_entities", function (next) {
		this.timeout(5000);
		var payload = {
            account_number : updated_client_actor.actor_account_number,
            actor_info : updated_client_actor,
            addresses : [
                {
                    address1: "2211 N 1st Street",
                    address2: "PayPal",
                    zip: "95131",
                    city: "San Jose",
                    state : "CA",
                    iso_country: "US"
                }
            ]
        },
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.add_account_entities(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("remove_account_entities", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.remove_account_entities(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("add_login_entities", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.add_login_entities(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
	
	it("downgrade_user_group", function (next) {
		this.timeout(5000);
		var payload = {
			/* test payload */
		},
		userlifecycleClient = servicecore.create("userlifecycle-paypal");
		
		userlifecycleClient.downgrade_user_group(payload, function (error, result) {
			assert(!error && result && result.body);
			assert(result.statusCode === 200);
			next();
		});
	});
});