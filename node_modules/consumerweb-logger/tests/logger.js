'use strict';

var logger = require('../lib/logger');
var bizLogger = require('../lib/bizevents-logger');
var cal = require('cal');

/**
 * Test function to hijack cal.
 * @param done
 */
function hijackCal(done) {
	var oldCreate = cal.createEvent;
	var oldAdd = cal.addData;
	var oldComplete = cal.complete;
	cal.createEvent = function() {
		return {
			addData: function() {},
			complete: function() {
				cal.createEvent = oldCreate;
				cal.addData = oldAdd;
				cal.complete =  oldComplete;
				done();
			}
		};
	};
}

describe('Logger tests', function () {

	it('should debug log', function (done) {
		var req = {};
		hijackCal(done);
		logger.debug(req, { test: true });
	});

	it('should info log', function (done) {
		var req = {};
		hijackCal(done);
		logger.info(req, { test: true });
	});

	it('should warn log', function (done) {
		var req = {};
		hijackCal(done);
		logger.warn(req, { test: true });
	});

	it('should error log', function (done) {
		var req = {};
		hijackCal(done);
		logger.error(req, { test: true });
	});

	it('should logCalEvent', function (done) {
		hijackCal(done);
		logger.logCalEvent('test', 'BIZ', { test: true }, 'error', '1234');
	});

	it('should log', function (done) {
		var req = {};
		hijackCal(done);
		logger.log(new Error('test'), req, '500');
	});

	it('should log string errors', function (done) {
		var req = {};
		hijackCal(done);
		logger.info(req, 'i am a messy string');
	});

	it('should send biz event', function (done){
		var req = {
			locality: {
				country: 'GB'
			}
		};
		bizLogger.logBizEvent(req, bizLogger.bizEventEnums.ADD_CARD, bizLogger.bizEventEnums.SUCCESS);
		done();
	});
});
