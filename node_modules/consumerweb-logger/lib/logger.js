'use strict';

var logMappings = require('./logMappings.json'),
	cal = require('cal'),
	consoleLogger = require('./console-logger');

var calEvent,
	defaultLevelStatusMapping = {
		'debug': cal.Status.SUCCESS,
		'info': cal.Status.SUCCESS,
		'warn': cal.Status.WARNING,
		'error': cal.Status.ERROR
	};

function calLog(name, type, data, status, correlationId) {
	if (cal) {
		name = name || '8Ball_App';
		calEvent = cal.createEvent(type, name);
		calEvent.status = cal.Status[status] || cal.Status.SUCCESS;
		if (correlationId) {
			calEvent.addData('corr_id', correlationId);
		}
		if (data) {
			calEvent.addData(data);
		}
		calEvent.complete();
	}
}

/**
 * We are utilizing pplogger (middleware) & cal node modules for logging
 *
 * In LIVE app.json
 * "logger": {
		"type": "cal",
		"format": "cal",
		"level": "info"
	}
 * In local: use app-development.json
 * "logger": {
		"type": "console",
		"format": "console",
		"level": "debug"
	}
 * In Stage: use app-staging.json
 * "logger": {
		"type": "cal",
		"format": "cal",
		"level": "debug"
	}
 */

function logInternal(req, data, level) {
	if (!data) {
		console.log('Data should exist to log');
		return;
	}

	if (typeof data === 'string') {
		data = {
			message: data
		};
	}

	if (!data.corr_id) {
		data.corr_id = req && req.correlationId;
	}

	level = level || 'debug';

	//set the cal outer transaction status.
	//TODO:set the status i.e 0 or 1 or 2 based on the error type
	if (req && req.model && req.model.rootTxn) {
		req.model.rootTxn.status = req.model.rootTxn.status || defaultLevelStatusMapping[level];
	}

	if (req && req.log) {
		req.log(level, data);
	} else {
		//log it with CAL
		calLog(level, 'LOG', data, defaultLevelStatusMapping[level]);
	}

	// our own error logger/formatter that is the best
	consoleLogger(level, data);
}

/**
 * All debug logs will only be accessible in local/dev/stage env only.
 * Info, warnings & error logs will show up in live (through CAL events)
 *
 * @type {{debug: debug, info: info, warn: warn, error: error, calError: calError, logCalEvent: logCalEvent, log: log}}
 */
module.exports = {
	debug: function (req, data) {
		logInternal(req, data, 'debug');
	},
	info: function (req, data) {
		logInternal(req, data, 'info');
	},
	warn: function (req, data) {
		logInternal(req, data, 'warn');
	},
	error: function (req, data) {
		logInternal(req, data, 'error');
	},
	logCalEvent: function (name, type, data, status, correlationId) {
		calLog(name, type, data, status, correlationId);
	},
	log: function (err, req, statusCode) {
		var logLevel = logMappings[err && err.errorCode] || 'info';
		req = req || {};

		logInternal(req, {
			corr_id: req.correlationId,
			path: req.path,
			method: req.method,
			status: statusCode || 500,
			message: err && err.message,
			extra: err ? JSON.stringify(err.extra) : '',
			stack: err && err.stack
		}, logLevel);
	}
};
