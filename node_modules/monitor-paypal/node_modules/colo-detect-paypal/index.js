'use strict';

/**
 * coloDetect - Uses heuristics to determine datacenter it is running in.
 *              Applications should never use this module. They need to
 *              be location-independent. It is for tasks like metrics
 *              collection where the ability to drill down by data center
 *              is important to resolving location-specific issues.
 *
 * @return last third component in the result of running hostname -f.
 *         Ideally, you should call this once and keep the result as
 *         calling a shell operation is not the most efficient thing.
 *         Note that there are heuristics here.
 *
 *         Note that purely for testing purposes, a host and root
 *         file path can be supplied as arguments. Normally, this
 *         is invoked with no arguments.
 */

var shell = require('shelljs');
var fs = require('graceful-fs');
var parts;

module.exports.coloDetect = function coloDetect(testHost, testPath) {
  var env = process.env.NODE_ENV,
    deploySite = process.env.DEPLOY_SITE;

    if (!env || env === 'development') {
        return 'development';
    }
    if (testHost || !parts) {
      parts = getHostName(testHost);
    }

    // Structure:
    // parts[0]=hostname, parts[1]=slc|phx|chd..., parts[2]=paypal, parts[3]=com
    // Backup logic in the event DEPLOY_SITE is not setup
    if (parts[parts.length - 2] === 'paypal') {
        if (parts[parts.length - 3] === 'phx') {
            return 'phx';
        }

        // If this is SLC, use the DEPLOY_SITE environment variable
        // to distinguish between SLCA and SLCB. The old /x/web/LIVEx
        // paths do not exist in Altus (just /x/web/LIVE).
        if (parts[parts.length - 3] === 'slc' && deploySite) {
            return deploySite.toLowerCase();
        }

        var path = process.cwd();
        if (testPath) {
            path = testPath;
        }
        var pathParts = path.split('/');
        if (pathParts[3].indexOf('LIVE5')  === 0) {
            return "slca";
        } else if (pathParts[3].indexOf('LIVE6') === 0) {
            return "slcb";
        } else {
            return parts[parts.length - 3]; // no idea. Return xxx from xxx.paypal.com
        }
    }
    if (parts[parts.length - 2] === 'paypalinc') {
        return parts[parts.length - 4];
    }
    return '';
};

// Determine the MX host for the colo
// PayPal is different for PHX and SLC. DCG uses either PHX or SLC
// based on where it is.
module.exports.coloMxDetect = function coloMxDetect(testHost) {
  var env = process.env.NODE_ENV;

  if (!env || env === 'development' || env === 'staging') {
    return 'atom.paypalcorp.com';
  }
  if (testHost || !parts) {
    parts = getHostName(testHost);
  }
  if (parts[parts.length - 2] === 'paypal' || parts[parts.length - 2] === 'paypalinc') {
    if (parts[parts.length - 3] === 'phx') {
      return 'mx.phx.paypal.com';
    }
    if (parts[parts.length - 3] === 'slc') {
      return 'mx.slc.paypal.com';
    }
  }

};

// Returns an array with the parts of the FQDN of the host
function getHostName (testHost) {
  var res;

  if (testHost) {
    res = testHost;
  } else {
    res = shell.exec('hostname -f', 'silent');

    if (res.code !== 0) {
      return '';
    }
    res = res.output;
  }

  var parts = res.split('.');
  if (parts.length <= 3) {
    return [];
  }
  return parts;
}
