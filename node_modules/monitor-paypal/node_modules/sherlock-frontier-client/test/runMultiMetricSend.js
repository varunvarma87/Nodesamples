'use strict';

var os = require('os'),
    assert = require('assert'),
    async = require('async'),
    FrontierClient = require('../lib/FrontierGA'),
    clientEndPoint = "127.0.0.1:7200",
    clientGroup = "tenant=pp;env=qa;app_svc=nodejs",
    queueCapacity = "100",
    fc,
    metricIds,
    frontierMockServer = require('./fixtures/mockFrontierServer');

    var metricSet = {
    resolution: 'R_1m',
    domain: 'nodejs_perfmon',
    dimension: [ ],
    metric: [
        {
            name: 'eventLoop', // time for a circuit of the node event loop
            metric_kind: 'GAUGE',
            value_kind: 'INT',
            units: 'msec.'
        }
    ]};


describe('frontier mock server', function () {

    before(function (next) {
        frontierMockServer.listen(7200, function () {
            next();
        });
    });


    after(function (next) {
        frontierMockServer.close();
        next();
    });

    describe('Happy path:', function (next) {

        it('many metrics sent test', function (next) {

            fc = new FrontierClient(clientEndPoint, clientGroup, {
                connect_retry_interval_sec: 5,
                queue_capacity: queueCapacity
            });
            assert.equal('tenant=pp;env=qa;app_svc=nodejs', fc.clientGroup);
            async.waterfall(
            [
                fc.once.bind(fc, 'connect') ,
                function (frontier_master, cb) {
                        fc && fc.register(metricSet, cb);
                    } ,
                function (response, reg_latency, next) {
                    metricIds = response.metric_id;
                    if (metricIds) {
                        // postMetrics(metricIds); // post on the first call
                    } else {
                        // resetConnection();
                    }
                    var i = 30;
                    while (i--) {
                        postMetrics(metricIds);
                    }
                    next(null);
                }
            ],
            function waterfallDone(err) {
                if (err) {
                    console.log("WATERFALL ERR");

                }
                next();
            });

            // postMetrics(metricIds, next);

        });

    });

    function postMetrics(metricIds, next) {

    var metricsData =  [{
            int32_value: 5
        }
        ];

        console.log("***** POSTING metricsData");

    fc.post(
        Date.now() / 1000, //timestamp, in seconds
        metricIds, // array of binary metric IDs returned by 'register' call
        metricsData,
        FrontierClient.PostReliability.BEST_EFFORT, function (err, result, latency) {
            if (err) {
                console.error("Post Sherlock metrics failed " + JSON.stringify(err));
            }
            if(next) {
                return next(null);
            } else {
                return;
            }
        }
    );
}

});
