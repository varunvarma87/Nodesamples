'use strict';

var os = require('os'),
    async = require('async'),
    assert = require('assert'),
    shell = require('shelljs'),
    clientGroup = "tenant=pp;env=qa;app_svc=nodejs",
    queueCapacity = "100",
    frontierMockServer = require('./fixtures/mockFrontierServer');

var FrontierClient = require('../lib/FrontierGA');

function setErrorIntercept(next) {
    FrontierClient.prototype._onError = function intercept(error) {
        console.log("ERROR REPORTED", error);
        var errcode = error.code === 'ECONNREFUSED' || error.code === ' ENOTFOUND';
        assert.equal(true, errcode);
        next();
    };
}

var metricIds,
    metricSet = {
    resolution: 'R_1m',
    domain: 'nodejs_perfmon',
    dimension: [ ],
    metric: [
        {
            name: 'eventLoop', // time for a circuit of the node event loop
            metric_kind: 'GAUGE',
            value_kind: 'INT',
            units: 'msec.'
        }
    ]
};

// describe.skip('frontier mock server', function () {

    describe('UNHAPPY path:', function (next) {

        it('connect to dead port', function (next) {
            var clientEndPoint = '127.0.0.1:6000';
            setErrorIntercept(next);

            var fc = new FrontierClient(clientEndPoint, clientGroup, {
                connect_retry: false,
                queue_capacity: queueCapacity
            });

            fc.once('error', function (err) {
                console.error('FrontierClient error: ' + JSON.stringify(err));
            });
        });

    });
// });
