'use strict';

var net = require('net'),
    debug = require('debuglog')('mockfrontier'),
    http = require("http"),
    debug = require('debuglog')('mockFrontier'),
    fs = require("fs"),
    path = require("path"),
    ws = require("ws"),
    server,
    wss,
    timeout = 0,
    disconnectAfter,
    _socket,
    serverClosed,
    ProtoBuf = require("protobufjs"),
    ByteBuffer = require('bytebuffer').ByteBufferNB;

// Initialize from .proto file
var builder = ProtoBuf.loadProtoFile(path.join(__dirname, "ProtocolV1.proto")),
    FrontierProto = builder.build("sherlock.frontier.v1");


var frontierMockServer = module.exports = {};
frontierMockServer.listen = function (port, done) {
    // HTTP server
    server = http.createServer(function(req, res) {
    });
    server.on("listening", function() {
        console.log("Server started on port:", port);
    });
    server.on('end', function () {
        debug('frontierMockServer disconnected');
    });
    server.on("error", function(err) {
        console.log("Failed to start server:", err);
        process.exit(1);
    });
    server.listen(port);

    // WebSocket adapter
    server.listen(port, function () {
        wss = new ws.Server({server: server});
        wss.on("connection", function(socket) {
            _socket = socket;
            console.log("New WebSocket connection");
            socket.on("close", function() {
                console.log("WebSocket disconnected");
            });
            socket.on("error", function(err) {
                    console.log("WSS ERROR", err);
            });
            socket.on("message", function(data, flags, cb) {
                if (flags.binary) {
                    try {
                        // Decode the Message
                        var msg = FrontierProto.ClientRequestProto.decode(data);
                        var resp;
                        if(msg.get_session_request) {
                            msg = handleGetSessionRequest(msg);
                        }
                        else if (msg.register_request) {
                            msg = handleRegisterMetricsRequest(msg);
                        }
                        else if (msg.post_registered_request) {
                            msg = handlePostMetrics(msg);
                        }
                        // Return the response
                        socket.send(msg.toBuffer(), function (err) {
                        //    console.trace("SENDERR");
                        });
                        console.log("Sent: "+msg);
                    } catch (err) {
                        if (serverClosed) {
                            // cb(new Error("ECONNREFUSED"));
                        }
                        console.log("Processing failed:", err);
                    }
                } else {
                    console.log("Not binary data");
                }
            });
        });
        done();

    });

    // done();
};

frontierMockServer.setDisconnectCount = function(howMany) {
    disconnectAfter = howMany;
};
frontierMockServer.close = function () {
    server.close();
};

// Handle setting up a session
function handleGetSessionRequest(req) {
    var msg, resp;
    console.log("DO get_session_request");
    var buffer = ByteBuffer.wrap([16,2]);

    // var buffer = ByteBuffer.wrap([16,2,34,50,8,1,16,1,24,1,50,42,8,1,18,38,10,36, 100,101,51,54,55,57,97,50,45,57,51,54,101,45,52,57,53,48,45,56,53,52,57,45,
    //     102,54,101,51,98,50,52,53,97,97,53,54]);

    resp = new FrontierProto.ServerResponseProto({
        type: FrontierProto.ServerResponseProto.Status.SUCCESS,
        id: req.id,
        status: 1,
        err_code: null,
        get_session_response: {"status":1,"session_info":{"id":buffer}}
    });
    msg = new FrontierProto.ServerMessageProto(
        {"type": FrontierProto.ServerMessageProto.Type.RESPONSE,
        "server_response":resp
        }
    );
    return msg;
}

// Handle registering metrics
function handleRegisterMetricsRequest(req) {
    var msg, resp;

    var regBuff = new ByteBuffer.wrap([3,14]);
    resp = new FrontierProto.ServerResponseProto({
        type: 2,
        id: req.id,
        status: 1,
        err_code: null,
        register_response: {"metric_id": regBuff}
    });
    msg = new FrontierProto.ServerMessageProto(
        {"type": FrontierProto.ServerMessageProto.Type.RESPONSE,
            server_response: resp}
    );
    return msg;
}

// Handle posting metrics data
function handlePostMetrics(req) {
    var msg, resp;

    if (disconnectAfter > 0) {
        disconnectAfter--;
    }
    else if (disconnectAfter === 0) {
        serverClosed = true;
        return server.close();
    }

    var regBuff = new ByteBuffer.wrap([3,14]);
    resp = new FrontierProto.ServerResponseProto({
        type: 3,
        id: req.id,
        status: 1,
        err_code: null,
        post_registered_response: {}
    });
    msg = new FrontierProto.ServerMessageProto(
        {"type": FrontierProto.ServerMessageProto.Type.RESPONSE,
            server_response: resp}
    );
    return msg;
}
