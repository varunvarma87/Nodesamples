'use strict';

var FrontierProto = require('./protocols').FrontierProtoV1;

function getRequestEnvelope(request) {
    var envelope = null,
        requestEnvelope = request && request.envelope,
        ReqRespTypeProto = FrontierProto.ReqRespTypeProto;

    if (requestEnvelope) {
        switch (requestEnvelope.type) {
        case ReqRespTypeProto.GET_SESSION:
            envelope = null;
            break;
        case ReqRespTypeProto.REGISTER:
            envelope = requestEnvelope.register_request;
            break;
        case ReqRespTypeProto.POST_UNREGISTERED:
            envelope = requestEnvelope.post_unregistered_request;
            break;
        case ReqRespTypeProto.POST_REGISTERED:
            envelope = requestEnvelope.post_registered_request;
            break;
        }
    }
    return envelope;
}

function serverResponseWrap(msg) {
    var msgBody,
        ReqRespTypeProto = FrontierProto.ReqRespTypeProto;
    switch (msg.type) {
    case ReqRespTypeProto.GET_SESSION:
        msgBody = msg.get_session_response;
        break;
    case ReqRespTypeProto.REGISTER:
        msgBody = msg.register_response;
        break;
    case ReqRespTypeProto.POST_REGISTERED:
        msgBody = msg.post_registered_response;
        break;
    case ReqRespTypeProto.POST_UNREGISTERED:
        msgBody = msg.post_unregistered_response;
        break;
    default:
        throw new Error('Unknown Frontier server response type: ' + msg.type);
    }
    msg.body = msgBody;
    return msg;
}

function adaptMetrics(metrics, samples) {
    return metrics.map(function (m, index) {
        var ret = {
            name: m.name,
            metric_type: m.metric_kind ? m.metric_kind : m.metric_type,
            value_type: m.value_kind ? m.value_kind : m.value_type
        };
        if (samples) {
            ret.value = samples[index];
        }
        return ret;
    });
}

function adaptResolution(res) {
    var ret = parseInt(res, 10),
        resolvedDuration = 60;    //default 1min

    if (isNaN(ret)) {
        // formats R_10s, R_10m, R_1h
        if (res.indexOf('R_') === 0 && res.length > 3) {
            var number = parseInt(res.substr(2, res.length - 3), 10);
            if (!isNaN(number)) {
                switch (res.charAt(res.length - 1)) {
                case 's':
                    resolvedDuration = number;
                    break;
                case 'm':
                    resolvedDuration = number * 60;
                    break;
                case 'h':
                    resolvedDuration = number * 3600;
                    break;
                }
            }
        }
    } else {
        resolvedDuration = ret;
    }
    return resolvedDuration;
}

function adaptClientGroup(cg) {
    if (typeof cg === 'string') {
        return cg.split(';').map(function (tok) {
            var pair = tok.split('=');
            return {
                key: pair[0].trim(),
                value: pair[1].trim()
            };
        });
    } else if (typeof cg === 'object') {
        return Object.keys(cg).map(function (k) {
            return {
                key: k,
                value: String(cg[k])
            };
        });
    } else {
        throw new Error('Invalid client group specification: ' + cg);
    }
}

function normalizeMetricSet(metric_set) {
    return {
        resolution_seconds: adaptResolution(metric_set.resolution ? metric_set.resolution : metric_set.resolution_seconds),
        profile: metric_set.domain ? metric_set.domain : metric_set.profile,
        dimension: metric_set.dimension.map(function (dim) {
            return { key: dim.name, value: String(dim.value).trim() };
        }),
        metric: adaptMetrics(metric_set.metric)
    };
}

function getRegisterClientMsgEnvelope(metric_set) {
    var clientMsgEnvelope = new FrontierProto.ClientRequestProto({
        type: FrontierProto.ReqRespTypeProto.REGISTER,
        register_request: {
            metric_set: normalizeMetricSet(metric_set)
        }
    });

    return clientMsgEnvelope;
}

function getPostRegisterClientMsgEnvelope(timestampSec, metric_ids, samples, reliability) {
    var clientMsgEnvelope = new FrontierProto.ClientRequestProto({
        type : FrontierProto.ReqRespTypeProto.POST_REGISTERED,
        post_registered_request: {
            post_concern: reliability.concern,
            epoch_second: parseInt(timestampSec, 10),
            metric_id: metric_ids,
            metric_value: samples
        }
    });

    return clientMsgEnvelope;
}

function getPostUnregisterClientMsgEnvelope(timestampSec, metric_set, samples, reliability) {
    var clientMsgEnvelope = new FrontierProto.ClientRequestProto({
        type: FrontierProto.ReqRespTypeProto.POST_UNREGISTERED,
        post_unregistered_request: {
            post_concern: reliability.concern,
            epoch_second: parseInt(timestampSec, 10),
            metric_set: normalizeMetricSet(metric_set)
        }
    });

    return clientMsgEnvelope;
}

module.exports = {
    getRequestEnvelope: getRequestEnvelope,
    serverResponseWrap: serverResponseWrap,
    adaptClientGroup: adaptClientGroup,
    getRegisterClientMsgEnvelope: getRegisterClientMsgEnvelope,
    getPostRegisterClientMsgEnvelope: getPostRegisterClientMsgEnvelope,
    getPostUnregisterClientMsgEnvelope: getPostUnregisterClientMsgEnvelope
};