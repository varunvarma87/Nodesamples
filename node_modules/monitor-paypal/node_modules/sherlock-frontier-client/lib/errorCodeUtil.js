'use strict';

var FrontierProto = require('./protocols').FrontierProtoV1;

/**
 * Enumerated values of error codes returned by Frontier Server
 * @namespace
 * @readonly
 * @enum
 */
var ErrorCodes = {
    /**
     * Unidentified server error
     * @instance
     * @const
     */
    SERVER_ERROR: {
        value: FrontierProto.ServerResponseProto.ErrorCode.SERVER_ERROR,
        description: "Unidentified server error"
    },
    /**
     * The user is not authorized to get a session or an invalid session id was provided
     * @instance
     */
    BAD_CREDENTIALS: {
        value: FrontierProto.ServerResponseProto.ErrorCode.BAD_CREDENTIALS,
        description: "The user is not authorized to get a session or an invalid session id was provided"
    },
    /**
     * The request is either malformed or violates a field constraint
     * @instance
     */
    BAD_REQUEST: {
        value: FrontierProto.ServerResponseProto.ErrorCode.BAD_REQUEST,
        description: "The request is either malformed or violates a field constraint"
    },
    /**
     * A rate limit has been exceeded
     * @instance
     */
    EXCEEDED_RATE: {
        value: FrontierProto.ServerResponseProto.ErrorCode.EXCEEDED_RATE,
        description: "A rate limit has been exceeded"
    },
    /**
     * A quota has been exceeded
     * @instance
     */
    EXCEEDED_QUOTA: {
        value: FrontierProto.ServerResponseProto.ErrorCode.EXCEEDED_QUOTA,
        description: "A quota has been exceeded"
    },
    /**
     * The node did not receive a timely response from an upstream channel
     * @instance
     */
    UPSTREAM_TIMEOUT: {
        value: FrontierProto.ServerResponseProto.ErrorCode.UPSTREAM_TIMEOUT,
        description: "The node did not receive a timely response from an upstream channel"
    },
    /**
     * The required upstream channel is unavailable but may become available later
     * @instance
     */
    UPSTREAM_UNAVAILABLE: {
        value: FrontierProto.ServerResponseProto.ErrorCode.UPSTREAM_UNAVAILABLE,
        description: "The required upstream channel is unavailable but may become available later"
    }
};

function errorStatusFromCode(code) {
    var ret = Object.keys(ErrorCodes).filter(function (k) {
        return (ErrorCodes[k].value === code);
    });
    if (ret.length === 1) {
        return ErrorCodes[ret[0]];
    }
    else {
        throw new Error('Unexpected error code: ' + code);
    }
}

module.exports = {
    ErrorCodes: ErrorCodes,
    errorStatusFromCode: errorStatusFromCode
};