'use strict';
/**
 * Created by yfinkelstein on 12/9/13.
 */

/**
 * Creates instance of SignedInt32.
 * @param {Number} initValue - initial value; will be converted to int32
 * @class Emulates signed int32 behavior
 */
function SignedInt32(initValue) {

    /**
     * the wrapped value
     * @memberof SignedInt32
     * @instance
     * @type {Number}
     */
    this.val = initValue >= 0 ? initValue % (SignedInt32.INT_MAX + 1) : initValue % (SignedInt32.INT_MIN - 1);
}

SignedInt32.P32 = Math.pow(2, 32);
SignedInt32.P31 = Math.pow(2, 31);

/**
 * Max possible value held by this object
 * @type {number}
 */
SignedInt32.INT_MAX = SignedInt32.P31 - 1;

/**
 * Min possible value held by this object
 * @type {number}
 */
SignedInt32.INT_MIN = -SignedInt32.P31;

SignedInt32.prototype = {
    /**
     * increment the current value and return the result.
     * @returns {number} - incremented value
     */
    inc: function () {
        if (++this.val > SignedInt32.INT_MAX) {
            this.val -= SignedInt32.P32;
        }
        return this.val;
    },

    /**
     * Decrement the current value and return the result.
     * @returns {number} - decremented value
     */
    dec: function () {
        if (--this.val < SignedInt32.INT_MIN) {
            this.val += SignedInt32.P32;
        }
        return this.val;
    }
};

module.exports = exports = SignedInt32;