'use strict';

/**
 * A demo of Sherlock Frontier client which demonstrates registering a set of metrics and publishing a single sample
 * for each of them in a single shot using {@link FrontierClient#postUnregistered} method.
 * The demo is invoked with a number of optional command line arguments to control its key settings.

 * @author Yuri Finkelstein, December 2014
 * @module
 */


var async = require('async');
var argv = require('optimist').argv;
var Promise = require("node-promise").Promise;

var FrontierClient = require('../index');

var frontierEndpoint = argv.ep || "localhost:6001";

var clientGroup = argv.cg || "a=7;b=10;environment=prod";

var postReliability = FrontierClient.PostReliability.ENSURE_TRANSMISSION; //default
if (argv.prt) {
    postReliability = FrontierClient.PostReliability.ENSURE_TRANSMISSION;
}
if (argv.pra) {
    postReliability = FrontierClient.PostReliability.ENSURE_ACK;
}
if (argv.prp) {
    postReliability = FrontierClient.PostReliability.ENSURE_PROCESSED;
}

var queue_capacity = parseInt(argv.qc, 10) || 100;

// demonstration of postUnregistered
function demo3(demo_callback) {
    var fc = new FrontierClient(frontierEndpoint, clientGroup, {
        connect_retry: true,
        connect_retry_interval_sec: 5,
        queue_capacity: queue_capacity
    });
    fc.on('error', function (error) {
        console.error("FrontierClient error: %j", error);
    });
    async.waterfall(
        [
            fc.once.bind(fc, "connect"),
            function (frontier_master, cb) {
                console.log("Successfully connected to master frontier node %s", frontier_master);
                fc.postUnregistered(
                    Date.now() / 1000, /*timestamp, in seconds*/ {
                        resolution: 'R_1m',
                        domain: 'pp_here_app',
                        dimension: [{
                            name: 'pool',
                            value: 'p123'
                        }, {
                            name: 'host',
                            value: 'host456'
                        }],
                        metric: [{
                            name: 'business.metric3',
                            metric_kind: 'GAUGE',
                            value_kind: "DOUBLE",
                            units: "requests/sec"
                        }, {
                            name: 'business.metric4',
                            metric_kind: 'COUNTER',
                            value_kind: "INT",
                            units: "transactions"
                        }]
                    }, [{
                        float_value: 100
                    }, {
                        int32_value: 200
                    }],
                    postReliability,
                    cb
                );
            },
            function (response, latency, cb) {
                console.log("Response from post is %j, (latency=%d msec)", response, latency);
                console.log("Frontier demo3 success!");
                cb(null);
            }
        ],
        function (err, result) {
            fc.close();
            demo_callback(err);
        }
    );
}


async.waterfall(
    [
        demo3
    ],
    function (err) {
        if (!err) {
            console.log("All demos completed successfully");
        } else {
            console.error("Some demos had errors: %j", err);
        }
    }
);
