'use strict';

/**
 * A demo of Sherlock Frontier client which demonstrates registering a set of metrics and publishing their time series.
 * The demo is invoked with a number of optional command line arguments to control its key settings.
 * The demo demonstrates usage of BEST_EFFORT POST concern level without a completion callback. This means that if for
 * whatever reason a POST request can not be sent it will be discarded. Also, as a side effect, the client is not blocked by this request
 * and will resume immediately even if Frontier server is overloaded, underlying websocket connection is congested, or no connection is
 * is available at all.
 *
 * Regardless of the circumstances, the demo completes right after making specified number of post requests.
 * @author Yuri Finkelstein, December 2014
 * @module
 */

var async = require('async');
var argv = require('optimist').argv;
var assert = require('assert');
var Promise = require("node-promise").Promise;

var FrontierClient = require('../index');

var frontierEndpoint = argv.ep || "sherlock-ftr-qa.stratus.phx.qa.ebay.com:80";

var clientGroup = argv.cg || "a=7;b=10;environment=prod";

var numPosts = parseInt(argv.np, 10) || 100;

var queue_capacity = parseInt(argv.qc, 10) || 100;


// demonstration of register/loop/post
function demo2(demo_callback) {
    var fc = new FrontierClient(frontierEndpoint, clientGroup, {
        connect_retry_interval_sec: 5,
        queue_capacity: queue_capacity
    });
    fc.on('error', function (error) {
        console.error("FrontierClient error: %j", error);
    });
    var metric_set = {
        resolution: 'R_10s',
        domain: 'pp_here_app',
        dimension: [{
            name: 'pool',
            value: 'p123'
        }, {
            name: 'host',
            value: 'host456'
        }],
        metric: [{
            name: 'business.metric1',
            metric_kind: 'GAUGE',
            value_kind: "FLOAT",
            units: "payments/sec"
        }, {
            name: 'business.metric2',
            metric_kind: 'COUNTER',
            value_kind: "INT",
            units: "payments"
        }]
    };

    async.waterfall(
        [
            fc.once.bind(fc, "connect"),
            function (frontier_master, cb) {
                console.log("Successfully connected to master frontier node %s", frontier_master);
                fc.register(metric_set, cb);
            },
            function (response, reg_latency, done_cb) {
                assert(response.metric_id instanceof Array, "metric_ids is not an array");
                assert.equal(response.metric_id.length, metric_set.metric.length);

                console.log("Received registration ids: %j (latency=%d msec)", response.metric_id, reg_latency);
                async.timesSeries(numPosts, function (this_post, times_callback) {
                    setTimeout(function () {
                        console.log("sending post # %d", this_post + 1);
                        fc.post(
                            Date.now() / 1000, //timestamp, in seconds
                            response.metric_id, // array of binary metric IDs returned by 'register' call
                            [{
                                float_value: 10 + this_post
                            }, {
                                int32_value: 20 + this_post
                            }], //samples
                            FrontierClient.PostReliability.BEST_EFFORT // post ack concern
                            // note that no completion callback is provided here
                        );
                        times_callback(null);
                    }, 3 * 1000);
                }, function (err, num_posted) {
                    if (!err) {
                        console.log("Posed %d rounds", num_posted.length);
                        console.log("Frontier demo2 success!");
                    }
                    done_cb(err);
                });
            }
        ],
        function (err, result) {
            fc.close();
            demo_callback(err);
        }
    );
}

async.waterfall(
    [
        demo2
    ],
    function (err) {
        if (!err) {
            console.log("All demos completed successfully");
        } else {
            console.error("Some demos had errors: %j", err);
        }
    }
);
