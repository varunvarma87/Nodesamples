'use strict';

var path = require('path'),
    util = require('util'),
    confit = require('confit_mod'),
    shell = require('shelljs'),
    utils = require('./utils'),
    cache = require('memory-cache'),
    configAsync = require('./confit-async'),
    configSync = path.join(__dirname, './confit-sync'),
    debug = require('debug')('modconfig:index');

module.exports = function config(moduleRef, callback) {
    var modRoot,
        cacheKey,
        configObject,
        appConfigRoot,
        moduleConfigRoot,
        confitOption = [];

    if (callback) {
        return configAsync(moduleRef, callback);
    }

    modRoot = utils.moduleRoot(moduleRef);
    cacheKey = utils.moduleName(modRoot);
    configObject = cache.get(cacheKey);

    if (configObject) {
        return configObject;
    }

    //Add quotes to each path to account for cases where there are spaces in the appConfigRoot or moduleConfigRoot
    appConfigRoot = '\"' + path.resolve(process.cwd(), 'config') + '\"';
    moduleConfigRoot = '\"' + path.resolve(modRoot, 'config') + '\"';
    confitOption.push(appConfigRoot);
    confitOption.push(moduleConfigRoot);

    var output,
        nodeBinary = process.execPath,
        response,
        cmd = util.format('"%s" "%s" %s', nodeBinary, configSync, confitOption.join(' '));
    response = shell.exec(cmd, {silent: true});
    if (response && response.code === 0) {
        output = response.output;
        output = output.substr(output.indexOf(utils.CONFIG_TOKEN) + utils.CONFIG_TOKEN.length);
        output = JSON.parse(output);

        output = utils.mergeWithNconf(output);

        configObject = confit.config(output);

        cache.put(cacheKey, configObject);

        return configObject;
    }
    debug('confit sync issue');
    return;
};

module.exports.cache = cache;
