'use strict';


var tryRequire = require('try-require');
var cal = tryRequire('cal');

var CAL_TRANSACTION_TYPE = 'MONITORING';


function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getYear() % 100, d.getMonth() + 1, d.getDate() ].join('-') + ':' + time;
}

function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

function writeCalEvent(name, key, msg, status) {
    var calEvent;
    status = status || 'ERROR';
    if (cal) {
        calEvent = cal.createEvent(CAL_TRANSACTION_TYPE, name);
        calEvent.status = cal.Status[status];
        if (msg) {
            calEvent.addData(key, msg);
        } else {
            calEvent.addData(key);
        }
        calEvent.complete();
    } else {
        console.error(timestamp(), CAL_TRANSACTION_TYPE, name, key, msg || '');
    }
}

function getSessionSize(sess) {
    if (sess) {
        // Use value from connect-mayfly it it exists. Save recomputing it.
        if (sess._sessionLen) {
            return sess._sessionLen;
        }
        try {
            var sessSize = JSON.stringify(sess).length;
            return sessSize;
        }
        catch (e) {
            // nop
        }
    }
    return 0;
}

module.exports = {
    timestamp: timestamp,
    writeCalEvent: writeCalEvent,
    getSessionSize: getSessionSize
};
