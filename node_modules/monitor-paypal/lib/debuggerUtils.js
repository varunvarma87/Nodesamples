'use strict';

var fs = require('fs-extra'),
    mkdirp = require('mkdirp'),
    utils = require('./utils');

var DEFAULT_TIMEOUT = 60000;  //1min

var status = {
    memwatchDebugging: false,
    heapdumpDebugging: false,
    memDiffDebugging: false,
    v8profilerDebugging: false
};

var debuggingModules = {
    heapdump: null,
    memwatch: null,
    heapDiff: null,
    v8profiler: null
};

module.exports = {
    memwatchDebugging: function memwatchDebugging(timeout) {
        var heapdump, memwatch, tmin;

        timeout = timeout || DEFAULT_TIMEOUT;
        tmin = Math.floor(timeout / (1000 * 60));

        if (!debuggingModules.heapdump) {
            debuggingModules.heapdump = require('heapdump');
        }
        if (!debuggingModules.memwatch) {
            debuggingModules.memwatch = require('memwatch-next');
        }
        heapdump = debuggingModules.heapdump;
        memwatch = debuggingModules.memwatch;


        if (!status.memwatchDebugging) {
            status.memwatchDebugging = true;
            console.error('----- enabling %dmin memwatchDebugging -----', tmin);
            memwatch.on('leak', function (info) {
                mkdirp.sync('./logs');
                var filename = './logs/heapdump_' + Date.now() + '.heapsnapshot';
                console.error(utils.timestamp(), '**memory leak**', info);
                console.error(utils.timestamp(), '**writing heapdump**', filename);
                heapdump.writeSnapshot(filename);
                console.error('-----');
            });
            setTimeout(function () {
                memwatch.removeAllListeners('leak');
                status.memwatchDebugging = false;
                console.error('----- disabling memwatchDebugging -----');
            }, timeout);
        }
    },
    heapdumpDebugging: function heapdumpDebugging(timeout) {
        var heapdump, tmin;

        timeout = timeout || DEFAULT_TIMEOUT;
        tmin = Math.floor(timeout / (1000 * 60));

        if (!debuggingModules.heapdump) {
            debuggingModules.heapdump = require('heapdump');
        }
        heapdump = debuggingModules.heapdump;

        if (!status.heapdumpDebugging) {
            status.heapdumpDebugging = true;
            console.error('----- enabling %dmin heapdumpDebugging -----', tmin);
            setTimeout(function () {
                mkdirp.sync('./logs');
                var filename = './logs/heapdump_' + Date.now() + '.heapsnapshot';
                console.error(utils.timestamp(), '**writing heapdump**', filename);
                heapdump.writeSnapshot(filename);
                status.heapdumpDebugging = false;
                console.error('-----');
            }, timeout);
        }
    },
    memDiffDebugging: function memDiffDebugging(timeout) {
        var memwatch, heapDiff, tmin;

        timeout = timeout || DEFAULT_TIMEOUT;
        tmin = Math.floor(timeout / (1000 * 60));

        if (!debuggingModules.memwatch) {
            debuggingModules.memwatch = require('memwatch-next');
        }
        memwatch = debuggingModules.memwatch;

        if (!status.memDiffDebugging) {
            status.memDiffDebugging = true;
            console.error('----- enabling %dmin memDiffDebugging -----', tmin);
            debuggingModules.heapDiff = new memwatch.HeapDiff();
            setTimeout(function () {
                heapDiff = debuggingModules.heapDiff.end();
                debuggingModules.heapDiff = null;
                mkdirp.sync('./logs');
                var filename = './logs/memdiff_' + Date.now() + '.json';
                console.error(utils.timestamp(), '**heap diff**', filename);
                fs.writeFileSync(filename, JSON.stringify(heapDiff, null, 2));
                status.memDiffDebugging = false;
                console.error('-----');
            }, timeout);
        }
    },
    v8profilerDebugging: function v8profilerDebugging(timeout) {
        var v8profiler, tmin;

        timeout = timeout || DEFAULT_TIMEOUT;
        tmin = Math.floor(timeout / (1000 * 60));

        if (!debuggingModules.v8profiler) {
            debuggingModules.v8profiler = require('v8-profiler');
        }
        v8profiler = debuggingModules.v8profiler;

        if (!status.v8profilerDebugging) {
            status.v8profilerDebugging = true;
            console.error('----- enabling %dmin v8profilerDebugging -----', tmin);
            v8profiler.startProfiling('', true);
            setTimeout(function () {
                mkdirp.sync('./logs');
                var filename = './logs/v8_' + Date.now() + '.json';
                console.error(utils.timestamp(), '**writing heapdump**', filename);
                var cpuProfile = v8profiler.stopProfiling('');
                v8profiler.deleteAllProfiles();
                fs.writeFileSync(filename, JSON.stringify(cpuProfile, null, 1));
                cpuProfile.delete();
                status.v8profilerDebugging = false;
                console.error('-----');
            }, timeout);
        }
    },
    logDebugging: function logDebugging() {
        //TODO right now debug and debuglog modules doesn't support
        // dynamic injection for enabling/disabling logs
        //No op
    }
};

