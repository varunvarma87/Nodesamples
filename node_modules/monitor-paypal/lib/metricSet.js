'use strict';

var metricSet = {
    resolution: 'R_1m',
    domain: 'nodejs_perfmon',
    dimension: [ ],
    metric: [
        {
            name: 'eventLoop', // time for a circuit of the node event loop
            metric_kind: 'GAUGE',
            value_kind: 'INT',
            units: 'msec.'
        },
        {
            name: 'gc_count', // # of full garbace collects in this interval
            metric_kind: 'GAUGE',
            value_kind: 'INT'
        },
        {
            name: 'gc_count_incremental', // # of incremental garbace collects in this interval
            metric_kind: 'GAUGE',
            value_kind: 'INT'
        },
        {
            name: 'heapSizePostGC', // Heap size after a full GC
            metric_kind: 'GAUGE',
            value_kind: 'INT',
            units: 'Kbytes'
        },
        {
            name: 'heap_max', // Maximum heap size. Note node periodically bumps this up
            metric_kind: 'GAUGE',
            value_kind: 'INT',
            units: 'Kbytes'
        },
        {
            name: 'heap_used', // amount of heap currently used
            metric_kind: 'GAUGE',
            value_kind: 'INT',
            units: 'Kbytes'
        },
        {
            name: 'rss', // V8's memory usage
            metric_kind: 'GAUGE',
            value_kind: 'INT',
            units: 'Kbytes'
        },
        {
            name: 'gcInterval', // % of cp time spent doing GC in the interval
            metric_kind: 'GAUGE',
            value_kind: 'FLOAT'
        },
        {
            name: 'memoryLeakReports', // note: this is really oomError data but Sherlock quotas complain on name change
            metric_kind: 'COUNTER',
            value_kind: 'INT'
        },
        {
            name: 'uptime',
            metric_kind: 'COUNTER',
            value_kind: 'INT',
            units: 'sec'
        },
        {
            name: 'concurrentRequests',
            metric_kind: 'GAUGE',
            value_kind: 'INT'
        },
        {
            name: 'urlTime',
            metric_kind: 'GAUGE',
            value_kind: 'FLOAT',
            units: 'msec'
        },
        {
            name: 'fd_available',
            metric_kind: 'GAUGE',
            value_kind: 'INT'
        },
        {
            name: 'renderTime',
            metric_kind: 'GAUGE',
            value_kind: 'FLOAT',
            units: 'msec'
        },
        {
            name: 'eps', // Errors/second HTTP4xx5xx errors
            metric_kind: 'GAUGE',
            value_kind: 'FLOAT'
        },
        {
            name: '2XXCount',
            metric_kind: 'COUNTER',
            value_kind: 'INT'
        },
        {
            name: '3XXCount',
            metric_kind: 'COUNTER',
            value_kind: 'INT'
        },
        {
            name: '4XXCount',
            metric_kind: 'COUNTER',
            value_kind: 'INT'
        },
        {
            name: '5XXCount',
            metric_kind: 'COUNTER',
            value_kind: 'INT'
        },
        {
            name: 'RequestBodySize',
            metric_kind: 'GAUGE',
            value_kind: 'FLOAT',
            units: 'bytes'
        },
        {
            name: 'MaxCookieSize',
            metric_kind: 'GAUGE',
            value_kind: 'INT',
            units: 'bytes'
        },
        {
            name: 'sessionSize',
            metric_kind: 'GAUGE',
            value_kind: 'INT',
            units: 'bytes'
        },
        {
            name: 'tps',
            metric_kind: 'GAUGE',
            value_kind: 'FLOAT'
        },
        {
            name: 'cpu',
            metric_kind: 'GAUGE',
            value_kind: 'FLOAT',
            units: 'percentage'
        },
        {
            name: 'noWorkers',
            metric_kind: 'GAUGE',
            value_kind: 'INT'
        },
        {
            name: 'restarts',
            metric_kind: 'GAUGE',
            value_kind: 'INT'
        }
    ]
};

module.exports = metricSet;
