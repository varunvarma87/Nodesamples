'use strict';

var tooBusy = require('toobusy-js'),
    modConfig = require('module-config-paypal'),
    path = require('path'),
    detector = require('colo-detect-paypal'),
    reportFunctions = require('./reportFunctions');

var appRoot = process.cwd();

// Setup all the options needed for Sherlock reporting and a few other
// once only computations like max file descriptors.
exports.setupOptions = function setupOptions(options, callback) {

    options = options || {};
    modConfig(module, function (err, config) {
        if (!err) {
            options = getOptions(config, options);
        }
        callback(null, options);
    });
};

function getOptions(config, options) {
    var determineMaxFileDescriptors = reportFunctions.determineMaxFileDescriptors;

    // Determine datacenter, MX gateway and application name
    options.colo = detector.coloDetect();
    options.coloMx = detector.coloMxDetect();
    var appName = process.env.APP_NAME;

    if (!options.pool) {
        options.pool = appName;
        if (!appName && appRoot) {
            var pkg = require(path.join(appRoot, 'package.json'));
            options.pool = pkg.name;
        }
    }

    options.tenant = 'pp';

    // To addresses for delivery of crash email
    options.monitor = config.get('monitor');
    options.clientEndPoint = options.clientEndPoint || config.get('monitoring:frontierEndpoint');
    options.clientGroup = options.clientGroup || config.get('monitoring:clientGroup');

    options.interval = options.interval || config.get('monitoring:interval');
    options.maxLag = options.maxLag || config.get('monitoring:maxLag');
    if (options.maxLag) {
        tooBusy.maxLag(options.maxLag);
    }

    options.interval = +options.interval || 60; // reporting interval
    options.interval = options.interval * 1000; // make into milliseconds
    determineMaxFileDescriptors(function (err, maxFd) {
        if (!err) {
            options.maxFileDescriptors = maxFd;
        }
    });
    return options;
}
