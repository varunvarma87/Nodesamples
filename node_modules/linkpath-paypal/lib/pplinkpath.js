'use strict';


var url = require('url'),
    util = require('./util');

var RESOURCE_BASE = '';
var LIVE_HOST = 'www.paypalobjects.com';
var config;

var resolvers = {

    development: trimRoute(function (host, route) {
        // If there's no route after trimming, just leave it as-is, but if there
        // is a path remaining, prepend the slash.
        return route ? '/' + route : route;
    }),


    stage: trimRouteAndPort(function (host, route) {
        //return 'https://' + util.join(host, route);
        // Use relative URL for stage env as well.
        return route ? '/' + route : route;
    }),


    sandbox: trimPort(function (host, route) {
        var override, base;

        // Favor env override and kill route (not used in this env)
        host = process.env.HOST_FQDN || host;
        route = undefined;

        // Favor config override
        // NOTE: Override is provide primarily for sandbox where there can be a need to use paypalobjects.com urls
        // Override for other environments not provided pending an identified need. Keeping it simple.
        override = config && config.get('links') && config.get('links').base;
        if (override && override.sandbox) {
            host = override.sandbox;
        }

        base = RESOURCE_BASE ? util.join('web', 'res', RESOURCE_BASE) : undefined;
        return 'https://' + util.join(host, base, route);
    }),


    live: function (host, route) {
        var base;

        // Override host and kill route (not used in this env)
        host = LIVE_HOST;
        route = undefined;

        base = RESOURCE_BASE ? util.join('web', 'res', RESOURCE_BASE) : undefined;
        return 'https://' + util.join(host, base, route);
    }

};


/**
 * Generate entries in the data model for js, css, template hash base urls
 *
 */
exports.linksBuilder = function linksBuilder(host, res) {
    var env, links, resolve, root;

    var app = res && res.req && res.req.app;
    config = app && app.kraken;

    // Favor config override
    env  = config && config.get('links') && config.get('links').env || getEnvironment(host);

    resolve = resolvers[env];
    root = resolve(host, app.get('mountpath'));

    links = util.namespace(res, 'locals', 'context', 'links');
    links.jsBaseUrl       = util.join(root, 'js');
    links.cssBaseUrl      = util.join(root, 'css');
    links.templateBaseUrl = util.join(root, 'templates');
    links.resourceBaseUrl = root;
};


/**
 * Interface to supply new baseUrl for JS/CSS/Templates resources when a hot deploy happens.
 * @param  base resourceBaseUrl value, typically something like "ac0/87e328a5d54a2b")
 *
 */
exports.setResourceBase = util.maybe(function setResourceBase(base) {
    RESOURCE_BASE = base;
});

/**
 * @param  {String} host hostname
 * @return {String} Returns the environment according to the hostname or "live" as default
 */

function getEnvironment(host) {
    var env = 'live';
    if (~host.indexOf('sandbox')) {
        env = 'sandbox';
    } else if (~host.indexOf('stage') || /stag/gi.test(process.env.DEPLOY_ENV)) {
        env = 'stage';
    } else if (~host.indexOf('localhost') || ~host.indexOf('127.0.0.1')) {
        env = 'development';
    }
    return env;
}

function trimRoute(fn) {
    return function (host, route) {
        route = (route && route[0] === '/') ? route.slice(1) : route;
        return fn(host, route);
    };
}

function trimPort(fn) {
    return function (host, route) {
        var idx;

        idx = host.indexOf(':');
        host = (~idx) ? host.substring(0, idx) : host;

        return fn(host, route);
    };
}

function trimRouteAndPort(fn) {
    return trimPort(trimRoute(fn));
}
