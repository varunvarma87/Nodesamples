/*global describe:false, it:false*/
'use strict';

var assert = require('assert'),
    util = require('../lib/util');

describe('util', function () {

    describe('namespace', function () {

        it('should return the original obj if no args', function () {
            var foo, bar;
            foo = {};
            bar = util.namespace(foo);
            assert.strictEqual(foo, bar);
        });


        it('should add an object if one doesn\'t exist', function () {
            var foo, bar;
            foo = {};
            bar = util.namespace(foo, 'bar');
            assert.strictEqual(foo.bar, bar);
        });


        it('should add n properties/objects', function () {
            var foo, bam;
            foo = {};
            bam = util.namespace(foo, 'bar', 'baz', 'bam');
            assert.strictEqual(foo.bar.baz.bam, bam);
        });


        it('should keep existing properties, if present', function () {
            var foo, bam;
            foo = { bar: { baz: {} } };
            bam = util.namespace(foo, 'bar', 'baz', 'bam');
            assert.strictEqual(foo.bar.baz.bam, bam);
        });

    });


    describe('join', function () {

        it('should join n url path segments', function () {
            var path;

            path = util.join('foo');
            assert.strictEqual(path, 'foo');

            path = util.join(path, 'bar', 'baz');
            assert.strictEqual(path, 'foo/bar/baz');
        });


        it('should ignore missing arguments', function () {
            var path;

            path = util.join(undefined, 'foo', null);
            assert.strictEqual(path, 'foo');

            path = util.join(path, undefined, 'baz');
            assert.strictEqual(path, 'foo/baz');
        });


        it('should not ignore empty strings', function () {
            var path;

            path = util.join('', 'foo', null);
            assert.strictEqual(path, '/foo');

            path = util.join(path, '', 'baz');
            assert.strictEqual(path, '/foo//baz');
        });

    });


    describe('maybe', function () {

        it('should only invoke the wrapped function if all arguments are defined', function () {
            var a, b, c, maybeFoo;

            function foo(a1, b1, c1) {
                a = a1;
                b = b1;
                c = c1;
            }

            maybeFoo = util.maybe(foo);

            maybeFoo();
            assert.strictEqual(a, undefined);
            assert.strictEqual(b, undefined);
            assert.strictEqual(c, undefined);

            maybeFoo('a');
            assert.strictEqual(a, undefined);
            assert.strictEqual(b, undefined);
            assert.strictEqual(c, undefined);

            maybeFoo(undefined, undefined, 'c');
            assert.strictEqual(a, undefined);
            assert.strictEqual(b, undefined);
            assert.strictEqual(c, undefined);

            maybeFoo('a', undefined, 'c');
            assert.strictEqual(a, undefined);
            assert.strictEqual(b, undefined);
            assert.strictEqual(c, undefined);

            maybeFoo('a', 'b', 'c');
            assert.strictEqual(a, 'a');
            assert.strictEqual(b, 'b');
            assert.strictEqual(c, 'c');

        });

    });

});

